<?php
/**
 * DictionaryControllerApi
 * PHP version 7.4
 *
 * @category Class
 * @package  DocStudio\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DocStudio Api Documentation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R110.5
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DocStudio\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use DocStudio\Client\ApiException;
use DocStudio\Client\Configuration;
use DocStudio\Client\HeaderSelector;
use DocStudio\Client\ObjectSerializer;

/**
 * DictionaryControllerApi Class Doc Comment
 *
 * @category Class
 * @package  DocStudio\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DictionaryControllerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'archiveDictionary' => [
            'application/json',
        ],
        'checkColumnValues' => [
            'application/json',
        ],
        'checkDictionary' => [
            'application/json',
        ],
        'createColumn' => [
            'application/json',
        ],
        'createDictionary' => [
            'application/json',
        ],
        'createRecord' => [
            'application/json',
        ],
        'deleteColumnDictionary' => [
            'application/json',
        ],
        'deleteRecords' => [
            'application/json',
        ],
        'download' => [
            'application/json',
        ],
        'downloadStatus' => [
            'application/json',
        ],
        'getColumnValue' => [
            'application/json',
        ],
        'getColumnValues' => [
            'application/json',
        ],
        'getDictionaryRecord' => [
            'application/json',
        ],
        'getDictionaryRecordUuids' => [
            'application/json',
        ],
        'getDictionaryRecords' => [
            'application/json',
        ],
        'patchDictionary' => [
            'application/json',
        ],
        'patchRecord' => [
            'application/json',
        ],
        'readDictionary' => [
            'application/json',
        ],
        'searchDictionaries' => [
            'application/json',
        ],
        'updateColumnDictionary' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation archiveDictionary
     *
     * Archive dictionary
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['archiveDictionary'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function archiveDictionary($dictionary_uuid, $mailbox, string $contentType = self::contentTypes['archiveDictionary'][0])
    {
        $this->archiveDictionaryWithHttpInfo($dictionary_uuid, $mailbox, $contentType);
    }

    /**
     * Operation archiveDictionaryWithHttpInfo
     *
     * Archive dictionary
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['archiveDictionary'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function archiveDictionaryWithHttpInfo($dictionary_uuid, $mailbox, string $contentType = self::contentTypes['archiveDictionary'][0])
    {
        $request = $this->archiveDictionaryRequest($dictionary_uuid, $mailbox, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation archiveDictionaryAsync
     *
     * Archive dictionary
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['archiveDictionary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function archiveDictionaryAsync($dictionary_uuid, $mailbox, string $contentType = self::contentTypes['archiveDictionary'][0])
    {
        return $this->archiveDictionaryAsyncWithHttpInfo($dictionary_uuid, $mailbox, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation archiveDictionaryAsyncWithHttpInfo
     *
     * Archive dictionary
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['archiveDictionary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function archiveDictionaryAsyncWithHttpInfo($dictionary_uuid, $mailbox, string $contentType = self::contentTypes['archiveDictionary'][0])
    {
        $returnType = '';
        $request = $this->archiveDictionaryRequest($dictionary_uuid, $mailbox, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'archiveDictionary'
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['archiveDictionary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function archiveDictionaryRequest($dictionary_uuid, $mailbox, string $contentType = self::contentTypes['archiveDictionary'][0])
    {

        // verify the required parameter 'dictionary_uuid' is set
        if ($dictionary_uuid === null || (is_array($dictionary_uuid) && count($dictionary_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_uuid when calling archiveDictionary'
            );
        }

        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling archiveDictionary'
            );
        }


        $resourcePath = '/api/v1/dictionary/{dictionaryUuid}/archive';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($dictionary_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'dictionaryUuid' . '}',
                ObjectSerializer::toPathValue($dictionary_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation checkColumnValues
     *
     * Check dictionary column. Check access, existence, etc.
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkColumnValues'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\DictionaryCheckResponseDTO
     */
    public function checkColumnValues($dictionary_uuid, $column_uuid, $mailbox, string $contentType = self::contentTypes['checkColumnValues'][0])
    {
        list($response) = $this->checkColumnValuesWithHttpInfo($dictionary_uuid, $column_uuid, $mailbox, $contentType);
        return $response;
    }

    /**
     * Operation checkColumnValuesWithHttpInfo
     *
     * Check dictionary column. Check access, existence, etc.
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkColumnValues'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\DictionaryCheckResponseDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkColumnValuesWithHttpInfo($dictionary_uuid, $column_uuid, $mailbox, string $contentType = self::contentTypes['checkColumnValues'][0])
    {
        $request = $this->checkColumnValuesRequest($dictionary_uuid, $column_uuid, $mailbox, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DocStudio\Client\Model\DictionaryCheckResponseDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\DictionaryCheckResponseDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\DictionaryCheckResponseDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\DictionaryCheckResponseDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\DictionaryCheckResponseDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkColumnValuesAsync
     *
     * Check dictionary column. Check access, existence, etc.
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkColumnValues'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkColumnValuesAsync($dictionary_uuid, $column_uuid, $mailbox, string $contentType = self::contentTypes['checkColumnValues'][0])
    {
        return $this->checkColumnValuesAsyncWithHttpInfo($dictionary_uuid, $column_uuid, $mailbox, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkColumnValuesAsyncWithHttpInfo
     *
     * Check dictionary column. Check access, existence, etc.
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkColumnValues'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkColumnValuesAsyncWithHttpInfo($dictionary_uuid, $column_uuid, $mailbox, string $contentType = self::contentTypes['checkColumnValues'][0])
    {
        $returnType = '\DocStudio\Client\Model\DictionaryCheckResponseDTO';
        $request = $this->checkColumnValuesRequest($dictionary_uuid, $column_uuid, $mailbox, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkColumnValues'
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkColumnValues'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function checkColumnValuesRequest($dictionary_uuid, $column_uuid, $mailbox, string $contentType = self::contentTypes['checkColumnValues'][0])
    {

        // verify the required parameter 'dictionary_uuid' is set
        if ($dictionary_uuid === null || (is_array($dictionary_uuid) && count($dictionary_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_uuid when calling checkColumnValues'
            );
        }

        // verify the required parameter 'column_uuid' is set
        if ($column_uuid === null || (is_array($column_uuid) && count($column_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column_uuid when calling checkColumnValues'
            );
        }

        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling checkColumnValues'
            );
        }


        $resourcePath = '/api/v1/dictionary/{dictionaryUuid}/column/{columnUuid}/check';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($dictionary_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'dictionaryUuid' . '}',
                ObjectSerializer::toPathValue($dictionary_uuid),
                $resourcePath
            );
        }
        // path params
        if ($column_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'columnUuid' . '}',
                ObjectSerializer::toPathValue($column_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation checkDictionary
     *
     * Check dictionary. Check access, existence, etc.
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkDictionary'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\DictionaryCheckResponseDTO
     */
    public function checkDictionary($dictionary_uuid, $mailbox, string $contentType = self::contentTypes['checkDictionary'][0])
    {
        list($response) = $this->checkDictionaryWithHttpInfo($dictionary_uuid, $mailbox, $contentType);
        return $response;
    }

    /**
     * Operation checkDictionaryWithHttpInfo
     *
     * Check dictionary. Check access, existence, etc.
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkDictionary'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\DictionaryCheckResponseDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkDictionaryWithHttpInfo($dictionary_uuid, $mailbox, string $contentType = self::contentTypes['checkDictionary'][0])
    {
        $request = $this->checkDictionaryRequest($dictionary_uuid, $mailbox, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DocStudio\Client\Model\DictionaryCheckResponseDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\DictionaryCheckResponseDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\DictionaryCheckResponseDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\DictionaryCheckResponseDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\DictionaryCheckResponseDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkDictionaryAsync
     *
     * Check dictionary. Check access, existence, etc.
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkDictionary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkDictionaryAsync($dictionary_uuid, $mailbox, string $contentType = self::contentTypes['checkDictionary'][0])
    {
        return $this->checkDictionaryAsyncWithHttpInfo($dictionary_uuid, $mailbox, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkDictionaryAsyncWithHttpInfo
     *
     * Check dictionary. Check access, existence, etc.
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkDictionary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkDictionaryAsyncWithHttpInfo($dictionary_uuid, $mailbox, string $contentType = self::contentTypes['checkDictionary'][0])
    {
        $returnType = '\DocStudio\Client\Model\DictionaryCheckResponseDTO';
        $request = $this->checkDictionaryRequest($dictionary_uuid, $mailbox, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkDictionary'
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkDictionary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function checkDictionaryRequest($dictionary_uuid, $mailbox, string $contentType = self::contentTypes['checkDictionary'][0])
    {

        // verify the required parameter 'dictionary_uuid' is set
        if ($dictionary_uuid === null || (is_array($dictionary_uuid) && count($dictionary_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_uuid when calling checkDictionary'
            );
        }

        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling checkDictionary'
            );
        }


        $resourcePath = '/api/v1/dictionary/{dictionaryUuid}/check';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($dictionary_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'dictionaryUuid' . '}',
                ObjectSerializer::toPathValue($dictionary_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createColumn
     *
     * Create dictionary column
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryColumnRequestDTO $dictionary_column_request_dto dictionary_column_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createColumn'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\SingleUuidDTO
     */
    public function createColumn($dictionary_uuid, $mailbox, $dictionary_column_request_dto, string $contentType = self::contentTypes['createColumn'][0])
    {
        list($response) = $this->createColumnWithHttpInfo($dictionary_uuid, $mailbox, $dictionary_column_request_dto, $contentType);
        return $response;
    }

    /**
     * Operation createColumnWithHttpInfo
     *
     * Create dictionary column
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryColumnRequestDTO $dictionary_column_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createColumn'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\SingleUuidDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createColumnWithHttpInfo($dictionary_uuid, $mailbox, $dictionary_column_request_dto, string $contentType = self::contentTypes['createColumn'][0])
    {
        $request = $this->createColumnRequest($dictionary_uuid, $mailbox, $dictionary_column_request_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\DocStudio\Client\Model\SingleUuidDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\SingleUuidDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\SingleUuidDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\SingleUuidDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\SingleUuidDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createColumnAsync
     *
     * Create dictionary column
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryColumnRequestDTO $dictionary_column_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createColumn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createColumnAsync($dictionary_uuid, $mailbox, $dictionary_column_request_dto, string $contentType = self::contentTypes['createColumn'][0])
    {
        return $this->createColumnAsyncWithHttpInfo($dictionary_uuid, $mailbox, $dictionary_column_request_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createColumnAsyncWithHttpInfo
     *
     * Create dictionary column
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryColumnRequestDTO $dictionary_column_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createColumn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createColumnAsyncWithHttpInfo($dictionary_uuid, $mailbox, $dictionary_column_request_dto, string $contentType = self::contentTypes['createColumn'][0])
    {
        $returnType = '\DocStudio\Client\Model\SingleUuidDTO';
        $request = $this->createColumnRequest($dictionary_uuid, $mailbox, $dictionary_column_request_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createColumn'
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryColumnRequestDTO $dictionary_column_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createColumn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createColumnRequest($dictionary_uuid, $mailbox, $dictionary_column_request_dto, string $contentType = self::contentTypes['createColumn'][0])
    {

        // verify the required parameter 'dictionary_uuid' is set
        if ($dictionary_uuid === null || (is_array($dictionary_uuid) && count($dictionary_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_uuid when calling createColumn'
            );
        }

        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling createColumn'
            );
        }

        // verify the required parameter 'dictionary_column_request_dto' is set
        if ($dictionary_column_request_dto === null || (is_array($dictionary_column_request_dto) && count($dictionary_column_request_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_column_request_dto when calling createColumn'
            );
        }


        $resourcePath = '/api/v1/dictionary/{dictionaryUuid}/column';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($dictionary_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'dictionaryUuid' . '}',
                ObjectSerializer::toPathValue($dictionary_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($dictionary_column_request_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($dictionary_column_request_dto));
            } else {
                $httpBody = $dictionary_column_request_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createDictionary
     *
     * Create empty dictionary
     *
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDictionary'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\SingleUuidDTO
     */
    public function createDictionary($mailbox, string $contentType = self::contentTypes['createDictionary'][0])
    {
        list($response) = $this->createDictionaryWithHttpInfo($mailbox, $contentType);
        return $response;
    }

    /**
     * Operation createDictionaryWithHttpInfo
     *
     * Create empty dictionary
     *
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDictionary'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\SingleUuidDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDictionaryWithHttpInfo($mailbox, string $contentType = self::contentTypes['createDictionary'][0])
    {
        $request = $this->createDictionaryRequest($mailbox, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\DocStudio\Client\Model\SingleUuidDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\SingleUuidDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\SingleUuidDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\SingleUuidDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\SingleUuidDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createDictionaryAsync
     *
     * Create empty dictionary
     *
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDictionary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDictionaryAsync($mailbox, string $contentType = self::contentTypes['createDictionary'][0])
    {
        return $this->createDictionaryAsyncWithHttpInfo($mailbox, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDictionaryAsyncWithHttpInfo
     *
     * Create empty dictionary
     *
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDictionary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDictionaryAsyncWithHttpInfo($mailbox, string $contentType = self::contentTypes['createDictionary'][0])
    {
        $returnType = '\DocStudio\Client\Model\SingleUuidDTO';
        $request = $this->createDictionaryRequest($mailbox, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDictionary'
     *
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDictionary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createDictionaryRequest($mailbox, string $contentType = self::contentTypes['createDictionary'][0])
    {

        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling createDictionary'
            );
        }


        $resourcePath = '/api/v1/dictionary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createRecord
     *
     * Create record(s)
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryColumnValueRequestDTO[][] $dictionary_column_value_request_dto dictionary_column_value_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRecord'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\CreateRecordsResponseDTO
     */
    public function createRecord($dictionary_uuid, $mailbox, $dictionary_column_value_request_dto, string $contentType = self::contentTypes['createRecord'][0])
    {
        list($response) = $this->createRecordWithHttpInfo($dictionary_uuid, $mailbox, $dictionary_column_value_request_dto, $contentType);
        return $response;
    }

    /**
     * Operation createRecordWithHttpInfo
     *
     * Create record(s)
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryColumnValueRequestDTO[][] $dictionary_column_value_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRecord'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\CreateRecordsResponseDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createRecordWithHttpInfo($dictionary_uuid, $mailbox, $dictionary_column_value_request_dto, string $contentType = self::contentTypes['createRecord'][0])
    {
        $request = $this->createRecordRequest($dictionary_uuid, $mailbox, $dictionary_column_value_request_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\DocStudio\Client\Model\CreateRecordsResponseDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\CreateRecordsResponseDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\CreateRecordsResponseDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\CreateRecordsResponseDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\CreateRecordsResponseDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createRecordAsync
     *
     * Create record(s)
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryColumnValueRequestDTO[][] $dictionary_column_value_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRecordAsync($dictionary_uuid, $mailbox, $dictionary_column_value_request_dto, string $contentType = self::contentTypes['createRecord'][0])
    {
        return $this->createRecordAsyncWithHttpInfo($dictionary_uuid, $mailbox, $dictionary_column_value_request_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createRecordAsyncWithHttpInfo
     *
     * Create record(s)
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryColumnValueRequestDTO[][] $dictionary_column_value_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRecordAsyncWithHttpInfo($dictionary_uuid, $mailbox, $dictionary_column_value_request_dto, string $contentType = self::contentTypes['createRecord'][0])
    {
        $returnType = '\DocStudio\Client\Model\CreateRecordsResponseDTO';
        $request = $this->createRecordRequest($dictionary_uuid, $mailbox, $dictionary_column_value_request_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createRecord'
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryColumnValueRequestDTO[][] $dictionary_column_value_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createRecordRequest($dictionary_uuid, $mailbox, $dictionary_column_value_request_dto, string $contentType = self::contentTypes['createRecord'][0])
    {

        // verify the required parameter 'dictionary_uuid' is set
        if ($dictionary_uuid === null || (is_array($dictionary_uuid) && count($dictionary_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_uuid when calling createRecord'
            );
        }

        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling createRecord'
            );
        }

        // verify the required parameter 'dictionary_column_value_request_dto' is set
        if ($dictionary_column_value_request_dto === null || (is_array($dictionary_column_value_request_dto) && count($dictionary_column_value_request_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_column_value_request_dto when calling createRecord'
            );
        }


        $resourcePath = '/api/v1/dictionary/{dictionaryUuid}/record';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($dictionary_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'dictionaryUuid' . '}',
                ObjectSerializer::toPathValue($dictionary_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($dictionary_column_value_request_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($dictionary_column_value_request_dto));
            } else {
                $httpBody = $dictionary_column_value_request_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteColumnDictionary
     *
     * Delete column. Will return deleted column UUID
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteColumnDictionary'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\SingleUuidDTO
     */
    public function deleteColumnDictionary($dictionary_uuid, $column_uuid, $mailbox, string $contentType = self::contentTypes['deleteColumnDictionary'][0])
    {
        list($response) = $this->deleteColumnDictionaryWithHttpInfo($dictionary_uuid, $column_uuid, $mailbox, $contentType);
        return $response;
    }

    /**
     * Operation deleteColumnDictionaryWithHttpInfo
     *
     * Delete column. Will return deleted column UUID
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteColumnDictionary'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\SingleUuidDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteColumnDictionaryWithHttpInfo($dictionary_uuid, $column_uuid, $mailbox, string $contentType = self::contentTypes['deleteColumnDictionary'][0])
    {
        $request = $this->deleteColumnDictionaryRequest($dictionary_uuid, $column_uuid, $mailbox, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 204:
                    if ('\DocStudio\Client\Model\SingleUuidDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\SingleUuidDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\SingleUuidDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\SingleUuidDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\SingleUuidDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteColumnDictionaryAsync
     *
     * Delete column. Will return deleted column UUID
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteColumnDictionary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteColumnDictionaryAsync($dictionary_uuid, $column_uuid, $mailbox, string $contentType = self::contentTypes['deleteColumnDictionary'][0])
    {
        return $this->deleteColumnDictionaryAsyncWithHttpInfo($dictionary_uuid, $column_uuid, $mailbox, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteColumnDictionaryAsyncWithHttpInfo
     *
     * Delete column. Will return deleted column UUID
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteColumnDictionary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteColumnDictionaryAsyncWithHttpInfo($dictionary_uuid, $column_uuid, $mailbox, string $contentType = self::contentTypes['deleteColumnDictionary'][0])
    {
        $returnType = '\DocStudio\Client\Model\SingleUuidDTO';
        $request = $this->deleteColumnDictionaryRequest($dictionary_uuid, $column_uuid, $mailbox, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteColumnDictionary'
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteColumnDictionary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteColumnDictionaryRequest($dictionary_uuid, $column_uuid, $mailbox, string $contentType = self::contentTypes['deleteColumnDictionary'][0])
    {

        // verify the required parameter 'dictionary_uuid' is set
        if ($dictionary_uuid === null || (is_array($dictionary_uuid) && count($dictionary_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_uuid when calling deleteColumnDictionary'
            );
        }

        // verify the required parameter 'column_uuid' is set
        if ($column_uuid === null || (is_array($column_uuid) && count($column_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column_uuid when calling deleteColumnDictionary'
            );
        }

        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling deleteColumnDictionary'
            );
        }


        $resourcePath = '/api/v1/dictionary/{dictionaryUuid}/column/{columnUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($dictionary_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'dictionaryUuid' . '}',
                ObjectSerializer::toPathValue($dictionary_uuid),
                $resourcePath
            );
        }
        // path params
        if ($column_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'columnUuid' . '}',
                ObjectSerializer::toPathValue($column_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteRecords
     *
     * Delete record(s). Will return deleted records UUID(s)
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\SingleUuidDTO[] $single_uuid_dto single_uuid_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRecords'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\SingleUuidDTO[]
     */
    public function deleteRecords($dictionary_uuid, $mailbox, $single_uuid_dto, string $contentType = self::contentTypes['deleteRecords'][0])
    {
        list($response) = $this->deleteRecordsWithHttpInfo($dictionary_uuid, $mailbox, $single_uuid_dto, $contentType);
        return $response;
    }

    /**
     * Operation deleteRecordsWithHttpInfo
     *
     * Delete record(s). Will return deleted records UUID(s)
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\SingleUuidDTO[] $single_uuid_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRecords'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\SingleUuidDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRecordsWithHttpInfo($dictionary_uuid, $mailbox, $single_uuid_dto, string $contentType = self::contentTypes['deleteRecords'][0])
    {
        $request = $this->deleteRecordsRequest($dictionary_uuid, $mailbox, $single_uuid_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 204:
                    if ('\DocStudio\Client\Model\SingleUuidDTO[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\SingleUuidDTO[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\SingleUuidDTO[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\SingleUuidDTO[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\SingleUuidDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteRecordsAsync
     *
     * Delete record(s). Will return deleted records UUID(s)
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\SingleUuidDTO[] $single_uuid_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRecords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRecordsAsync($dictionary_uuid, $mailbox, $single_uuid_dto, string $contentType = self::contentTypes['deleteRecords'][0])
    {
        return $this->deleteRecordsAsyncWithHttpInfo($dictionary_uuid, $mailbox, $single_uuid_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteRecordsAsyncWithHttpInfo
     *
     * Delete record(s). Will return deleted records UUID(s)
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\SingleUuidDTO[] $single_uuid_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRecords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRecordsAsyncWithHttpInfo($dictionary_uuid, $mailbox, $single_uuid_dto, string $contentType = self::contentTypes['deleteRecords'][0])
    {
        $returnType = '\DocStudio\Client\Model\SingleUuidDTO[]';
        $request = $this->deleteRecordsRequest($dictionary_uuid, $mailbox, $single_uuid_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteRecords'
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\SingleUuidDTO[] $single_uuid_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRecords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteRecordsRequest($dictionary_uuid, $mailbox, $single_uuid_dto, string $contentType = self::contentTypes['deleteRecords'][0])
    {

        // verify the required parameter 'dictionary_uuid' is set
        if ($dictionary_uuid === null || (is_array($dictionary_uuid) && count($dictionary_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_uuid when calling deleteRecords'
            );
        }

        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling deleteRecords'
            );
        }

        // verify the required parameter 'single_uuid_dto' is set
        if ($single_uuid_dto === null || (is_array($single_uuid_dto) && count($single_uuid_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $single_uuid_dto when calling deleteRecords'
            );
        }


        $resourcePath = '/api/v1/dictionary/{dictionaryUuid}/record';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($dictionary_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'dictionaryUuid' . '}',
                ObjectSerializer::toPathValue($dictionary_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($single_uuid_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($single_uuid_dto));
            } else {
                $httpBody = $single_uuid_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation download
     *
     * Download the dictionary
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryDownloadParamsDTO $dictionary_download_params_dto dictionary_download_params_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['download'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\ExportTaskStatusDTO
     */
    public function download($dictionary_uuid, $mailbox, $dictionary_download_params_dto, string $contentType = self::contentTypes['download'][0])
    {
        list($response) = $this->downloadWithHttpInfo($dictionary_uuid, $mailbox, $dictionary_download_params_dto, $contentType);
        return $response;
    }

    /**
     * Operation downloadWithHttpInfo
     *
     * Download the dictionary
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryDownloadParamsDTO $dictionary_download_params_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['download'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\ExportTaskStatusDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadWithHttpInfo($dictionary_uuid, $mailbox, $dictionary_download_params_dto, string $contentType = self::contentTypes['download'][0])
    {
        $request = $this->downloadRequest($dictionary_uuid, $mailbox, $dictionary_download_params_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\DocStudio\Client\Model\ExportTaskStatusDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\ExportTaskStatusDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\ExportTaskStatusDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\ExportTaskStatusDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\ExportTaskStatusDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation downloadAsync
     *
     * Download the dictionary
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryDownloadParamsDTO $dictionary_download_params_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['download'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadAsync($dictionary_uuid, $mailbox, $dictionary_download_params_dto, string $contentType = self::contentTypes['download'][0])
    {
        return $this->downloadAsyncWithHttpInfo($dictionary_uuid, $mailbox, $dictionary_download_params_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadAsyncWithHttpInfo
     *
     * Download the dictionary
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryDownloadParamsDTO $dictionary_download_params_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['download'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadAsyncWithHttpInfo($dictionary_uuid, $mailbox, $dictionary_download_params_dto, string $contentType = self::contentTypes['download'][0])
    {
        $returnType = '\DocStudio\Client\Model\ExportTaskStatusDTO';
        $request = $this->downloadRequest($dictionary_uuid, $mailbox, $dictionary_download_params_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'download'
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryDownloadParamsDTO $dictionary_download_params_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['download'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function downloadRequest($dictionary_uuid, $mailbox, $dictionary_download_params_dto, string $contentType = self::contentTypes['download'][0])
    {

        // verify the required parameter 'dictionary_uuid' is set
        if ($dictionary_uuid === null || (is_array($dictionary_uuid) && count($dictionary_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_uuid when calling download'
            );
        }

        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling download'
            );
        }

        // verify the required parameter 'dictionary_download_params_dto' is set
        if ($dictionary_download_params_dto === null || (is_array($dictionary_download_params_dto) && count($dictionary_download_params_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_download_params_dto when calling download'
            );
        }


        $resourcePath = '/api/v1/dictionary/{dictionaryUuid}/download';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($dictionary_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'dictionaryUuid' . '}',
                ObjectSerializer::toPathValue($dictionary_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($dictionary_download_params_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($dictionary_download_params_dto));
            } else {
                $httpBody = $dictionary_download_params_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation downloadStatus
     *
     * Download the dictionary
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $task_uuid UUID of task (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadStatus'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\ExportTaskStatusDTO
     */
    public function downloadStatus($dictionary_uuid, $task_uuid, $mailbox, string $contentType = self::contentTypes['downloadStatus'][0])
    {
        list($response) = $this->downloadStatusWithHttpInfo($dictionary_uuid, $task_uuid, $mailbox, $contentType);
        return $response;
    }

    /**
     * Operation downloadStatusWithHttpInfo
     *
     * Download the dictionary
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $task_uuid UUID of task (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadStatus'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\ExportTaskStatusDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadStatusWithHttpInfo($dictionary_uuid, $task_uuid, $mailbox, string $contentType = self::contentTypes['downloadStatus'][0])
    {
        $request = $this->downloadStatusRequest($dictionary_uuid, $task_uuid, $mailbox, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DocStudio\Client\Model\ExportTaskStatusDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\ExportTaskStatusDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\ExportTaskStatusDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\ExportTaskStatusDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\ExportTaskStatusDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation downloadStatusAsync
     *
     * Download the dictionary
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $task_uuid UUID of task (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadStatusAsync($dictionary_uuid, $task_uuid, $mailbox, string $contentType = self::contentTypes['downloadStatus'][0])
    {
        return $this->downloadStatusAsyncWithHttpInfo($dictionary_uuid, $task_uuid, $mailbox, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadStatusAsyncWithHttpInfo
     *
     * Download the dictionary
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $task_uuid UUID of task (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadStatusAsyncWithHttpInfo($dictionary_uuid, $task_uuid, $mailbox, string $contentType = self::contentTypes['downloadStatus'][0])
    {
        $returnType = '\DocStudio\Client\Model\ExportTaskStatusDTO';
        $request = $this->downloadStatusRequest($dictionary_uuid, $task_uuid, $mailbox, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'downloadStatus'
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $task_uuid UUID of task (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function downloadStatusRequest($dictionary_uuid, $task_uuid, $mailbox, string $contentType = self::contentTypes['downloadStatus'][0])
    {

        // verify the required parameter 'dictionary_uuid' is set
        if ($dictionary_uuid === null || (is_array($dictionary_uuid) && count($dictionary_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_uuid when calling downloadStatus'
            );
        }

        // verify the required parameter 'task_uuid' is set
        if ($task_uuid === null || (is_array($task_uuid) && count($task_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_uuid when calling downloadStatus'
            );
        }

        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling downloadStatus'
            );
        }


        $resourcePath = '/api/v1/dictionary/{dictionaryUuid}/download/status/{taskUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($dictionary_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'dictionaryUuid' . '}',
                ObjectSerializer::toPathValue($dictionary_uuid),
                $resourcePath
            );
        }
        // path params
        if ($task_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'taskUuid' . '}',
                ObjectSerializer::toPathValue($task_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getColumnValue
     *
     * Retrieve column value for specific record
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $record_uuid Record UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getColumnValue'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\DictionaryColumnValueResponseDTO
     */
    public function getColumnValue($dictionary_uuid, $record_uuid, $column_uuid, $mailbox = null, string $contentType = self::contentTypes['getColumnValue'][0])
    {
        list($response) = $this->getColumnValueWithHttpInfo($dictionary_uuid, $record_uuid, $column_uuid, $mailbox, $contentType);
        return $response;
    }

    /**
     * Operation getColumnValueWithHttpInfo
     *
     * Retrieve column value for specific record
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $record_uuid Record UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getColumnValue'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\DictionaryColumnValueResponseDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getColumnValueWithHttpInfo($dictionary_uuid, $record_uuid, $column_uuid, $mailbox = null, string $contentType = self::contentTypes['getColumnValue'][0])
    {
        $request = $this->getColumnValueRequest($dictionary_uuid, $record_uuid, $column_uuid, $mailbox, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DocStudio\Client\Model\DictionaryColumnValueResponseDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\DictionaryColumnValueResponseDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\DictionaryColumnValueResponseDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\DictionaryColumnValueResponseDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\DictionaryColumnValueResponseDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getColumnValueAsync
     *
     * Retrieve column value for specific record
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $record_uuid Record UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getColumnValue'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getColumnValueAsync($dictionary_uuid, $record_uuid, $column_uuid, $mailbox = null, string $contentType = self::contentTypes['getColumnValue'][0])
    {
        return $this->getColumnValueAsyncWithHttpInfo($dictionary_uuid, $record_uuid, $column_uuid, $mailbox, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getColumnValueAsyncWithHttpInfo
     *
     * Retrieve column value for specific record
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $record_uuid Record UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getColumnValue'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getColumnValueAsyncWithHttpInfo($dictionary_uuid, $record_uuid, $column_uuid, $mailbox = null, string $contentType = self::contentTypes['getColumnValue'][0])
    {
        $returnType = '\DocStudio\Client\Model\DictionaryColumnValueResponseDTO';
        $request = $this->getColumnValueRequest($dictionary_uuid, $record_uuid, $column_uuid, $mailbox, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getColumnValue'
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $record_uuid Record UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getColumnValue'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getColumnValueRequest($dictionary_uuid, $record_uuid, $column_uuid, $mailbox = null, string $contentType = self::contentTypes['getColumnValue'][0])
    {

        // verify the required parameter 'dictionary_uuid' is set
        if ($dictionary_uuid === null || (is_array($dictionary_uuid) && count($dictionary_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_uuid when calling getColumnValue'
            );
        }

        // verify the required parameter 'record_uuid' is set
        if ($record_uuid === null || (is_array($record_uuid) && count($record_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $record_uuid when calling getColumnValue'
            );
        }

        // verify the required parameter 'column_uuid' is set
        if ($column_uuid === null || (is_array($column_uuid) && count($column_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column_uuid when calling getColumnValue'
            );
        }



        $resourcePath = '/api/v1/dictionary/{dictionaryUuid}/record/{recordUuid}/column/{columnUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($dictionary_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'dictionaryUuid' . '}',
                ObjectSerializer::toPathValue($dictionary_uuid),
                $resourcePath
            );
        }
        // path params
        if ($record_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'recordUuid' . '}',
                ObjectSerializer::toPathValue($record_uuid),
                $resourcePath
            );
        }
        // path params
        if ($column_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'columnUuid' . '}',
                ObjectSerializer::toPathValue($column_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getColumnValues
     *
     * Retrieve column values from dictionary
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryColumnValueSearchDTO $dictionary_column_value_search_dto dictionary_column_value_search_dto (required)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getColumnValues'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\PageDTODictionaryColumnValueResponseDTO
     */
    public function getColumnValues($dictionary_uuid, $column_uuid, $dictionary_column_value_search_dto, $offset = 0, $limit = 25, $mailbox = null, string $contentType = self::contentTypes['getColumnValues'][0])
    {
        list($response) = $this->getColumnValuesWithHttpInfo($dictionary_uuid, $column_uuid, $dictionary_column_value_search_dto, $offset, $limit, $mailbox, $contentType);
        return $response;
    }

    /**
     * Operation getColumnValuesWithHttpInfo
     *
     * Retrieve column values from dictionary
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryColumnValueSearchDTO $dictionary_column_value_search_dto (required)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getColumnValues'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\PageDTODictionaryColumnValueResponseDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getColumnValuesWithHttpInfo($dictionary_uuid, $column_uuid, $dictionary_column_value_search_dto, $offset = 0, $limit = 25, $mailbox = null, string $contentType = self::contentTypes['getColumnValues'][0])
    {
        $request = $this->getColumnValuesRequest($dictionary_uuid, $column_uuid, $dictionary_column_value_search_dto, $offset, $limit, $mailbox, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DocStudio\Client\Model\PageDTODictionaryColumnValueResponseDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\PageDTODictionaryColumnValueResponseDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\PageDTODictionaryColumnValueResponseDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\PageDTODictionaryColumnValueResponseDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\PageDTODictionaryColumnValueResponseDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getColumnValuesAsync
     *
     * Retrieve column values from dictionary
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryColumnValueSearchDTO $dictionary_column_value_search_dto (required)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getColumnValues'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getColumnValuesAsync($dictionary_uuid, $column_uuid, $dictionary_column_value_search_dto, $offset = 0, $limit = 25, $mailbox = null, string $contentType = self::contentTypes['getColumnValues'][0])
    {
        return $this->getColumnValuesAsyncWithHttpInfo($dictionary_uuid, $column_uuid, $dictionary_column_value_search_dto, $offset, $limit, $mailbox, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getColumnValuesAsyncWithHttpInfo
     *
     * Retrieve column values from dictionary
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryColumnValueSearchDTO $dictionary_column_value_search_dto (required)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getColumnValues'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getColumnValuesAsyncWithHttpInfo($dictionary_uuid, $column_uuid, $dictionary_column_value_search_dto, $offset = 0, $limit = 25, $mailbox = null, string $contentType = self::contentTypes['getColumnValues'][0])
    {
        $returnType = '\DocStudio\Client\Model\PageDTODictionaryColumnValueResponseDTO';
        $request = $this->getColumnValuesRequest($dictionary_uuid, $column_uuid, $dictionary_column_value_search_dto, $offset, $limit, $mailbox, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getColumnValues'
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryColumnValueSearchDTO $dictionary_column_value_search_dto (required)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getColumnValues'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getColumnValuesRequest($dictionary_uuid, $column_uuid, $dictionary_column_value_search_dto, $offset = 0, $limit = 25, $mailbox = null, string $contentType = self::contentTypes['getColumnValues'][0])
    {

        // verify the required parameter 'dictionary_uuid' is set
        if ($dictionary_uuid === null || (is_array($dictionary_uuid) && count($dictionary_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_uuid when calling getColumnValues'
            );
        }

        // verify the required parameter 'column_uuid' is set
        if ($column_uuid === null || (is_array($column_uuid) && count($column_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column_uuid when calling getColumnValues'
            );
        }

        // verify the required parameter 'dictionary_column_value_search_dto' is set
        if ($dictionary_column_value_search_dto === null || (is_array($dictionary_column_value_search_dto) && count($dictionary_column_value_search_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_column_value_search_dto when calling getColumnValues'
            );
        }





        $resourcePath = '/api/v1/dictionary/{dictionaryUuid}/column/{columnUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($dictionary_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'dictionaryUuid' . '}',
                ObjectSerializer::toPathValue($dictionary_uuid),
                $resourcePath
            );
        }
        // path params
        if ($column_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'columnUuid' . '}',
                ObjectSerializer::toPathValue($column_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($dictionary_column_value_search_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($dictionary_column_value_search_dto));
            } else {
                $httpBody = $dictionary_column_value_search_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDictionaryRecord
     *
     * Retrieve record
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $record_uuid Record UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDictionaryRecord'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\DictionaryRecordValuesResponseDTO
     */
    public function getDictionaryRecord($dictionary_uuid, $record_uuid, $mailbox = null, string $contentType = self::contentTypes['getDictionaryRecord'][0])
    {
        list($response) = $this->getDictionaryRecordWithHttpInfo($dictionary_uuid, $record_uuid, $mailbox, $contentType);
        return $response;
    }

    /**
     * Operation getDictionaryRecordWithHttpInfo
     *
     * Retrieve record
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $record_uuid Record UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDictionaryRecord'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\DictionaryRecordValuesResponseDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDictionaryRecordWithHttpInfo($dictionary_uuid, $record_uuid, $mailbox = null, string $contentType = self::contentTypes['getDictionaryRecord'][0])
    {
        $request = $this->getDictionaryRecordRequest($dictionary_uuid, $record_uuid, $mailbox, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DocStudio\Client\Model\DictionaryRecordValuesResponseDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\DictionaryRecordValuesResponseDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\DictionaryRecordValuesResponseDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\DictionaryRecordValuesResponseDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\DictionaryRecordValuesResponseDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDictionaryRecordAsync
     *
     * Retrieve record
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $record_uuid Record UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDictionaryRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDictionaryRecordAsync($dictionary_uuid, $record_uuid, $mailbox = null, string $contentType = self::contentTypes['getDictionaryRecord'][0])
    {
        return $this->getDictionaryRecordAsyncWithHttpInfo($dictionary_uuid, $record_uuid, $mailbox, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDictionaryRecordAsyncWithHttpInfo
     *
     * Retrieve record
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $record_uuid Record UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDictionaryRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDictionaryRecordAsyncWithHttpInfo($dictionary_uuid, $record_uuid, $mailbox = null, string $contentType = self::contentTypes['getDictionaryRecord'][0])
    {
        $returnType = '\DocStudio\Client\Model\DictionaryRecordValuesResponseDTO';
        $request = $this->getDictionaryRecordRequest($dictionary_uuid, $record_uuid, $mailbox, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDictionaryRecord'
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $record_uuid Record UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDictionaryRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDictionaryRecordRequest($dictionary_uuid, $record_uuid, $mailbox = null, string $contentType = self::contentTypes['getDictionaryRecord'][0])
    {

        // verify the required parameter 'dictionary_uuid' is set
        if ($dictionary_uuid === null || (is_array($dictionary_uuid) && count($dictionary_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_uuid when calling getDictionaryRecord'
            );
        }

        // verify the required parameter 'record_uuid' is set
        if ($record_uuid === null || (is_array($record_uuid) && count($record_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $record_uuid when calling getDictionaryRecord'
            );
        }



        $resourcePath = '/api/v1/dictionary/{dictionaryUuid}/record/{recordUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($dictionary_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'dictionaryUuid' . '}',
                ObjectSerializer::toPathValue($dictionary_uuid),
                $resourcePath
            );
        }
        // path params
        if ($record_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'recordUuid' . '}',
                ObjectSerializer::toPathValue($record_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDictionaryRecordUuids
     *
     * Get dictionary record uuids by values
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryRecordsRequestDTO $dictionary_records_request_dto dictionary_records_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDictionaryRecordUuids'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,string>
     */
    public function getDictionaryRecordUuids($dictionary_uuid, $mailbox, $dictionary_records_request_dto, string $contentType = self::contentTypes['getDictionaryRecordUuids'][0])
    {
        list($response) = $this->getDictionaryRecordUuidsWithHttpInfo($dictionary_uuid, $mailbox, $dictionary_records_request_dto, $contentType);
        return $response;
    }

    /**
     * Operation getDictionaryRecordUuidsWithHttpInfo
     *
     * Get dictionary record uuids by values
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryRecordsRequestDTO $dictionary_records_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDictionaryRecordUuids'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,string>, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDictionaryRecordUuidsWithHttpInfo($dictionary_uuid, $mailbox, $dictionary_records_request_dto, string $contentType = self::contentTypes['getDictionaryRecordUuids'][0])
    {
        $request = $this->getDictionaryRecordUuidsRequest($dictionary_uuid, $mailbox, $dictionary_records_request_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'array<string,string>';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDictionaryRecordUuidsAsync
     *
     * Get dictionary record uuids by values
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryRecordsRequestDTO $dictionary_records_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDictionaryRecordUuids'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDictionaryRecordUuidsAsync($dictionary_uuid, $mailbox, $dictionary_records_request_dto, string $contentType = self::contentTypes['getDictionaryRecordUuids'][0])
    {
        return $this->getDictionaryRecordUuidsAsyncWithHttpInfo($dictionary_uuid, $mailbox, $dictionary_records_request_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDictionaryRecordUuidsAsyncWithHttpInfo
     *
     * Get dictionary record uuids by values
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryRecordsRequestDTO $dictionary_records_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDictionaryRecordUuids'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDictionaryRecordUuidsAsyncWithHttpInfo($dictionary_uuid, $mailbox, $dictionary_records_request_dto, string $contentType = self::contentTypes['getDictionaryRecordUuids'][0])
    {
        $returnType = 'array<string,string>';
        $request = $this->getDictionaryRecordUuidsRequest($dictionary_uuid, $mailbox, $dictionary_records_request_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDictionaryRecordUuids'
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryRecordsRequestDTO $dictionary_records_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDictionaryRecordUuids'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDictionaryRecordUuidsRequest($dictionary_uuid, $mailbox, $dictionary_records_request_dto, string $contentType = self::contentTypes['getDictionaryRecordUuids'][0])
    {

        // verify the required parameter 'dictionary_uuid' is set
        if ($dictionary_uuid === null || (is_array($dictionary_uuid) && count($dictionary_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_uuid when calling getDictionaryRecordUuids'
            );
        }

        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling getDictionaryRecordUuids'
            );
        }

        // verify the required parameter 'dictionary_records_request_dto' is set
        if ($dictionary_records_request_dto === null || (is_array($dictionary_records_request_dto) && count($dictionary_records_request_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_records_request_dto when calling getDictionaryRecordUuids'
            );
        }


        $resourcePath = '/api/v1/dictionary/{dictionaryUuid}/record-uuids';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($dictionary_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'dictionaryUuid' . '}',
                ObjectSerializer::toPathValue($dictionary_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($dictionary_records_request_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($dictionary_records_request_dto));
            } else {
                $httpBody = $dictionary_records_request_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDictionaryRecords
     *
     * Get dictionary records
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryFiltersRequestDTO $dictionary_filters_request_dto dictionary_filters_request_dto (required)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDictionaryRecords'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\PageDTODictionaryRecordValuesResponseDTO
     */
    public function getDictionaryRecords($dictionary_uuid, $mailbox, $dictionary_filters_request_dto, $offset = 0, $limit = 25, string $contentType = self::contentTypes['getDictionaryRecords'][0])
    {
        list($response) = $this->getDictionaryRecordsWithHttpInfo($dictionary_uuid, $mailbox, $dictionary_filters_request_dto, $offset, $limit, $contentType);
        return $response;
    }

    /**
     * Operation getDictionaryRecordsWithHttpInfo
     *
     * Get dictionary records
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryFiltersRequestDTO $dictionary_filters_request_dto (required)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDictionaryRecords'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\PageDTODictionaryRecordValuesResponseDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDictionaryRecordsWithHttpInfo($dictionary_uuid, $mailbox, $dictionary_filters_request_dto, $offset = 0, $limit = 25, string $contentType = self::contentTypes['getDictionaryRecords'][0])
    {
        $request = $this->getDictionaryRecordsRequest($dictionary_uuid, $mailbox, $dictionary_filters_request_dto, $offset, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DocStudio\Client\Model\PageDTODictionaryRecordValuesResponseDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\PageDTODictionaryRecordValuesResponseDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\PageDTODictionaryRecordValuesResponseDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\PageDTODictionaryRecordValuesResponseDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\PageDTODictionaryRecordValuesResponseDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDictionaryRecordsAsync
     *
     * Get dictionary records
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryFiltersRequestDTO $dictionary_filters_request_dto (required)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDictionaryRecords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDictionaryRecordsAsync($dictionary_uuid, $mailbox, $dictionary_filters_request_dto, $offset = 0, $limit = 25, string $contentType = self::contentTypes['getDictionaryRecords'][0])
    {
        return $this->getDictionaryRecordsAsyncWithHttpInfo($dictionary_uuid, $mailbox, $dictionary_filters_request_dto, $offset, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDictionaryRecordsAsyncWithHttpInfo
     *
     * Get dictionary records
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryFiltersRequestDTO $dictionary_filters_request_dto (required)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDictionaryRecords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDictionaryRecordsAsyncWithHttpInfo($dictionary_uuid, $mailbox, $dictionary_filters_request_dto, $offset = 0, $limit = 25, string $contentType = self::contentTypes['getDictionaryRecords'][0])
    {
        $returnType = '\DocStudio\Client\Model\PageDTODictionaryRecordValuesResponseDTO';
        $request = $this->getDictionaryRecordsRequest($dictionary_uuid, $mailbox, $dictionary_filters_request_dto, $offset, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDictionaryRecords'
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryFiltersRequestDTO $dictionary_filters_request_dto (required)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDictionaryRecords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDictionaryRecordsRequest($dictionary_uuid, $mailbox, $dictionary_filters_request_dto, $offset = 0, $limit = 25, string $contentType = self::contentTypes['getDictionaryRecords'][0])
    {

        // verify the required parameter 'dictionary_uuid' is set
        if ($dictionary_uuid === null || (is_array($dictionary_uuid) && count($dictionary_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_uuid when calling getDictionaryRecords'
            );
        }

        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling getDictionaryRecords'
            );
        }

        // verify the required parameter 'dictionary_filters_request_dto' is set
        if ($dictionary_filters_request_dto === null || (is_array($dictionary_filters_request_dto) && count($dictionary_filters_request_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_filters_request_dto when calling getDictionaryRecords'
            );
        }




        $resourcePath = '/api/v1/dictionary/{dictionaryUuid}/records';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($dictionary_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'dictionaryUuid' . '}',
                ObjectSerializer::toPathValue($dictionary_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($dictionary_filters_request_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($dictionary_filters_request_dto));
            } else {
                $httpBody = $dictionary_filters_request_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchDictionary
     *
     * Update dictionary
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryRequestDTO $dictionary_request_dto dictionary_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchDictionary'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\DictionaryResponseDTO
     */
    public function patchDictionary($dictionary_uuid, $mailbox, $dictionary_request_dto, string $contentType = self::contentTypes['patchDictionary'][0])
    {
        list($response) = $this->patchDictionaryWithHttpInfo($dictionary_uuid, $mailbox, $dictionary_request_dto, $contentType);
        return $response;
    }

    /**
     * Operation patchDictionaryWithHttpInfo
     *
     * Update dictionary
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryRequestDTO $dictionary_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchDictionary'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\DictionaryResponseDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchDictionaryWithHttpInfo($dictionary_uuid, $mailbox, $dictionary_request_dto, string $contentType = self::contentTypes['patchDictionary'][0])
    {
        $request = $this->patchDictionaryRequest($dictionary_uuid, $mailbox, $dictionary_request_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DocStudio\Client\Model\DictionaryResponseDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\DictionaryResponseDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\DictionaryResponseDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\DictionaryResponseDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\DictionaryResponseDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchDictionaryAsync
     *
     * Update dictionary
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryRequestDTO $dictionary_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchDictionary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchDictionaryAsync($dictionary_uuid, $mailbox, $dictionary_request_dto, string $contentType = self::contentTypes['patchDictionary'][0])
    {
        return $this->patchDictionaryAsyncWithHttpInfo($dictionary_uuid, $mailbox, $dictionary_request_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchDictionaryAsyncWithHttpInfo
     *
     * Update dictionary
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryRequestDTO $dictionary_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchDictionary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchDictionaryAsyncWithHttpInfo($dictionary_uuid, $mailbox, $dictionary_request_dto, string $contentType = self::contentTypes['patchDictionary'][0])
    {
        $returnType = '\DocStudio\Client\Model\DictionaryResponseDTO';
        $request = $this->patchDictionaryRequest($dictionary_uuid, $mailbox, $dictionary_request_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchDictionary'
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryRequestDTO $dictionary_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchDictionary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchDictionaryRequest($dictionary_uuid, $mailbox, $dictionary_request_dto, string $contentType = self::contentTypes['patchDictionary'][0])
    {

        // verify the required parameter 'dictionary_uuid' is set
        if ($dictionary_uuid === null || (is_array($dictionary_uuid) && count($dictionary_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_uuid when calling patchDictionary'
            );
        }

        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling patchDictionary'
            );
        }

        // verify the required parameter 'dictionary_request_dto' is set
        if ($dictionary_request_dto === null || (is_array($dictionary_request_dto) && count($dictionary_request_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_request_dto when calling patchDictionary'
            );
        }


        $resourcePath = '/api/v1/dictionary/{dictionaryUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($dictionary_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'dictionaryUuid' . '}',
                ObjectSerializer::toPathValue($dictionary_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($dictionary_request_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($dictionary_request_dto));
            } else {
                $httpBody = $dictionary_request_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchRecord
     *
     * Update record column values
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $record_uuid Record UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryColumnValueRequestDTO[] $dictionary_column_value_request_dto dictionary_column_value_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchRecord'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function patchRecord($dictionary_uuid, $record_uuid, $mailbox, $dictionary_column_value_request_dto, string $contentType = self::contentTypes['patchRecord'][0])
    {
        $this->patchRecordWithHttpInfo($dictionary_uuid, $record_uuid, $mailbox, $dictionary_column_value_request_dto, $contentType);
    }

    /**
     * Operation patchRecordWithHttpInfo
     *
     * Update record column values
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $record_uuid Record UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryColumnValueRequestDTO[] $dictionary_column_value_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchRecord'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchRecordWithHttpInfo($dictionary_uuid, $record_uuid, $mailbox, $dictionary_column_value_request_dto, string $contentType = self::contentTypes['patchRecord'][0])
    {
        $request = $this->patchRecordRequest($dictionary_uuid, $record_uuid, $mailbox, $dictionary_column_value_request_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation patchRecordAsync
     *
     * Update record column values
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $record_uuid Record UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryColumnValueRequestDTO[] $dictionary_column_value_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchRecordAsync($dictionary_uuid, $record_uuid, $mailbox, $dictionary_column_value_request_dto, string $contentType = self::contentTypes['patchRecord'][0])
    {
        return $this->patchRecordAsyncWithHttpInfo($dictionary_uuid, $record_uuid, $mailbox, $dictionary_column_value_request_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchRecordAsyncWithHttpInfo
     *
     * Update record column values
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $record_uuid Record UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryColumnValueRequestDTO[] $dictionary_column_value_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchRecordAsyncWithHttpInfo($dictionary_uuid, $record_uuid, $mailbox, $dictionary_column_value_request_dto, string $contentType = self::contentTypes['patchRecord'][0])
    {
        $returnType = '';
        $request = $this->patchRecordRequest($dictionary_uuid, $record_uuid, $mailbox, $dictionary_column_value_request_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchRecord'
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $record_uuid Record UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryColumnValueRequestDTO[] $dictionary_column_value_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchRecordRequest($dictionary_uuid, $record_uuid, $mailbox, $dictionary_column_value_request_dto, string $contentType = self::contentTypes['patchRecord'][0])
    {

        // verify the required parameter 'dictionary_uuid' is set
        if ($dictionary_uuid === null || (is_array($dictionary_uuid) && count($dictionary_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_uuid when calling patchRecord'
            );
        }

        // verify the required parameter 'record_uuid' is set
        if ($record_uuid === null || (is_array($record_uuid) && count($record_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $record_uuid when calling patchRecord'
            );
        }

        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling patchRecord'
            );
        }

        // verify the required parameter 'dictionary_column_value_request_dto' is set
        if ($dictionary_column_value_request_dto === null || (is_array($dictionary_column_value_request_dto) && count($dictionary_column_value_request_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_column_value_request_dto when calling patchRecord'
            );
        }


        $resourcePath = '/api/v1/dictionary/{dictionaryUuid}/record/{recordUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($dictionary_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'dictionaryUuid' . '}',
                ObjectSerializer::toPathValue($dictionary_uuid),
                $resourcePath
            );
        }
        // path params
        if ($record_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'recordUuid' . '}',
                ObjectSerializer::toPathValue($record_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($dictionary_column_value_request_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($dictionary_column_value_request_dto));
            } else {
                $httpBody = $dictionary_column_value_request_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation readDictionary
     *
     * Read/get dictionary
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  bool $with_columns Add columns description to each dictionary (optional, default to false)
     * @param  bool $with_records_count Add records count value to each dictionary (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['readDictionary'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\DictionaryResponseDTO
     */
    public function readDictionary($dictionary_uuid, $mailbox, $with_columns = false, $with_records_count = false, string $contentType = self::contentTypes['readDictionary'][0])
    {
        list($response) = $this->readDictionaryWithHttpInfo($dictionary_uuid, $mailbox, $with_columns, $with_records_count, $contentType);
        return $response;
    }

    /**
     * Operation readDictionaryWithHttpInfo
     *
     * Read/get dictionary
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  bool $with_columns Add columns description to each dictionary (optional, default to false)
     * @param  bool $with_records_count Add records count value to each dictionary (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['readDictionary'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\DictionaryResponseDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function readDictionaryWithHttpInfo($dictionary_uuid, $mailbox, $with_columns = false, $with_records_count = false, string $contentType = self::contentTypes['readDictionary'][0])
    {
        $request = $this->readDictionaryRequest($dictionary_uuid, $mailbox, $with_columns, $with_records_count, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DocStudio\Client\Model\DictionaryResponseDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\DictionaryResponseDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\DictionaryResponseDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\DictionaryResponseDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\DictionaryResponseDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation readDictionaryAsync
     *
     * Read/get dictionary
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  bool $with_columns Add columns description to each dictionary (optional, default to false)
     * @param  bool $with_records_count Add records count value to each dictionary (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['readDictionary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readDictionaryAsync($dictionary_uuid, $mailbox, $with_columns = false, $with_records_count = false, string $contentType = self::contentTypes['readDictionary'][0])
    {
        return $this->readDictionaryAsyncWithHttpInfo($dictionary_uuid, $mailbox, $with_columns, $with_records_count, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation readDictionaryAsyncWithHttpInfo
     *
     * Read/get dictionary
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  bool $with_columns Add columns description to each dictionary (optional, default to false)
     * @param  bool $with_records_count Add records count value to each dictionary (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['readDictionary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readDictionaryAsyncWithHttpInfo($dictionary_uuid, $mailbox, $with_columns = false, $with_records_count = false, string $contentType = self::contentTypes['readDictionary'][0])
    {
        $returnType = '\DocStudio\Client\Model\DictionaryResponseDTO';
        $request = $this->readDictionaryRequest($dictionary_uuid, $mailbox, $with_columns, $with_records_count, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'readDictionary'
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  bool $with_columns Add columns description to each dictionary (optional, default to false)
     * @param  bool $with_records_count Add records count value to each dictionary (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['readDictionary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function readDictionaryRequest($dictionary_uuid, $mailbox, $with_columns = false, $with_records_count = false, string $contentType = self::contentTypes['readDictionary'][0])
    {

        // verify the required parameter 'dictionary_uuid' is set
        if ($dictionary_uuid === null || (is_array($dictionary_uuid) && count($dictionary_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_uuid when calling readDictionary'
            );
        }

        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling readDictionary'
            );
        }




        $resourcePath = '/api/v1/dictionary/{dictionaryUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_columns,
            'withColumns', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_records_count,
            'withRecordsCount', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($dictionary_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'dictionaryUuid' . '}',
                ObjectSerializer::toPathValue($dictionary_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchDictionaries
     *
     * Get paged dictionary list
     *
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $level Dictionary access level, &#39;pub&#39; by default. (optional, default to 'pub')
     * @param  string $keyword Keyword to search dictionary by or dictionary UUID (optional)
     * @param  bool $with_columns Add columns description to each dictionary (optional, default to false)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchDictionaries'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\PageDTODictionaryResponseDTO
     */
    public function searchDictionaries($mailbox, $level = 'pub', $keyword = null, $with_columns = false, $offset = 0, $limit = 25, string $contentType = self::contentTypes['searchDictionaries'][0])
    {
        list($response) = $this->searchDictionariesWithHttpInfo($mailbox, $level, $keyword, $with_columns, $offset, $limit, $contentType);
        return $response;
    }

    /**
     * Operation searchDictionariesWithHttpInfo
     *
     * Get paged dictionary list
     *
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $level Dictionary access level, &#39;pub&#39; by default. (optional, default to 'pub')
     * @param  string $keyword Keyword to search dictionary by or dictionary UUID (optional)
     * @param  bool $with_columns Add columns description to each dictionary (optional, default to false)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchDictionaries'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\PageDTODictionaryResponseDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchDictionariesWithHttpInfo($mailbox, $level = 'pub', $keyword = null, $with_columns = false, $offset = 0, $limit = 25, string $contentType = self::contentTypes['searchDictionaries'][0])
    {
        $request = $this->searchDictionariesRequest($mailbox, $level, $keyword, $with_columns, $offset, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DocStudio\Client\Model\PageDTODictionaryResponseDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\PageDTODictionaryResponseDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\PageDTODictionaryResponseDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\PageDTODictionaryResponseDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\PageDTODictionaryResponseDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchDictionariesAsync
     *
     * Get paged dictionary list
     *
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $level Dictionary access level, &#39;pub&#39; by default. (optional, default to 'pub')
     * @param  string $keyword Keyword to search dictionary by or dictionary UUID (optional)
     * @param  bool $with_columns Add columns description to each dictionary (optional, default to false)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchDictionaries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchDictionariesAsync($mailbox, $level = 'pub', $keyword = null, $with_columns = false, $offset = 0, $limit = 25, string $contentType = self::contentTypes['searchDictionaries'][0])
    {
        return $this->searchDictionariesAsyncWithHttpInfo($mailbox, $level, $keyword, $with_columns, $offset, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchDictionariesAsyncWithHttpInfo
     *
     * Get paged dictionary list
     *
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $level Dictionary access level, &#39;pub&#39; by default. (optional, default to 'pub')
     * @param  string $keyword Keyword to search dictionary by or dictionary UUID (optional)
     * @param  bool $with_columns Add columns description to each dictionary (optional, default to false)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchDictionaries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchDictionariesAsyncWithHttpInfo($mailbox, $level = 'pub', $keyword = null, $with_columns = false, $offset = 0, $limit = 25, string $contentType = self::contentTypes['searchDictionaries'][0])
    {
        $returnType = '\DocStudio\Client\Model\PageDTODictionaryResponseDTO';
        $request = $this->searchDictionariesRequest($mailbox, $level, $keyword, $with_columns, $offset, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchDictionaries'
     *
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $level Dictionary access level, &#39;pub&#39; by default. (optional, default to 'pub')
     * @param  string $keyword Keyword to search dictionary by or dictionary UUID (optional)
     * @param  bool $with_columns Add columns description to each dictionary (optional, default to false)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchDictionaries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchDictionariesRequest($mailbox, $level = 'pub', $keyword = null, $with_columns = false, $offset = 0, $limit = 25, string $contentType = self::contentTypes['searchDictionaries'][0])
    {

        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling searchDictionaries'
            );
        }







        $resourcePath = '/api/v1/dictionary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $level,
            'level', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $keyword,
            'keyword', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_columns,
            'withColumns', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateColumnDictionary
     *
     * Update dictionary column
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryColumnRequestDTO $dictionary_column_request_dto dictionary_column_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateColumnDictionary'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\DictionaryColumnResponseDTO
     */
    public function updateColumnDictionary($dictionary_uuid, $column_uuid, $mailbox, $dictionary_column_request_dto, string $contentType = self::contentTypes['updateColumnDictionary'][0])
    {
        list($response) = $this->updateColumnDictionaryWithHttpInfo($dictionary_uuid, $column_uuid, $mailbox, $dictionary_column_request_dto, $contentType);
        return $response;
    }

    /**
     * Operation updateColumnDictionaryWithHttpInfo
     *
     * Update dictionary column
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryColumnRequestDTO $dictionary_column_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateColumnDictionary'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\DictionaryColumnResponseDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateColumnDictionaryWithHttpInfo($dictionary_uuid, $column_uuid, $mailbox, $dictionary_column_request_dto, string $contentType = self::contentTypes['updateColumnDictionary'][0])
    {
        $request = $this->updateColumnDictionaryRequest($dictionary_uuid, $column_uuid, $mailbox, $dictionary_column_request_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DocStudio\Client\Model\DictionaryColumnResponseDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\DictionaryColumnResponseDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\DictionaryColumnResponseDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\DictionaryColumnResponseDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\DictionaryColumnResponseDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateColumnDictionaryAsync
     *
     * Update dictionary column
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryColumnRequestDTO $dictionary_column_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateColumnDictionary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateColumnDictionaryAsync($dictionary_uuid, $column_uuid, $mailbox, $dictionary_column_request_dto, string $contentType = self::contentTypes['updateColumnDictionary'][0])
    {
        return $this->updateColumnDictionaryAsyncWithHttpInfo($dictionary_uuid, $column_uuid, $mailbox, $dictionary_column_request_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateColumnDictionaryAsyncWithHttpInfo
     *
     * Update dictionary column
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryColumnRequestDTO $dictionary_column_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateColumnDictionary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateColumnDictionaryAsyncWithHttpInfo($dictionary_uuid, $column_uuid, $mailbox, $dictionary_column_request_dto, string $contentType = self::contentTypes['updateColumnDictionary'][0])
    {
        $returnType = '\DocStudio\Client\Model\DictionaryColumnResponseDTO';
        $request = $this->updateColumnDictionaryRequest($dictionary_uuid, $column_uuid, $mailbox, $dictionary_column_request_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateColumnDictionary'
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\DictionaryColumnRequestDTO $dictionary_column_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateColumnDictionary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateColumnDictionaryRequest($dictionary_uuid, $column_uuid, $mailbox, $dictionary_column_request_dto, string $contentType = self::contentTypes['updateColumnDictionary'][0])
    {

        // verify the required parameter 'dictionary_uuid' is set
        if ($dictionary_uuid === null || (is_array($dictionary_uuid) && count($dictionary_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_uuid when calling updateColumnDictionary'
            );
        }

        // verify the required parameter 'column_uuid' is set
        if ($column_uuid === null || (is_array($column_uuid) && count($column_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column_uuid when calling updateColumnDictionary'
            );
        }

        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling updateColumnDictionary'
            );
        }

        // verify the required parameter 'dictionary_column_request_dto' is set
        if ($dictionary_column_request_dto === null || (is_array($dictionary_column_request_dto) && count($dictionary_column_request_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_column_request_dto when calling updateColumnDictionary'
            );
        }


        $resourcePath = '/api/v1/dictionary/{dictionaryUuid}/column/{columnUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($dictionary_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'dictionaryUuid' . '}',
                ObjectSerializer::toPathValue($dictionary_uuid),
                $resourcePath
            );
        }
        // path params
        if ($column_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'columnUuid' . '}',
                ObjectSerializer::toPathValue($column_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($dictionary_column_request_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($dictionary_column_request_dto));
            } else {
                $httpBody = $dictionary_column_request_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
