<?php
/**
 * DictionaryControllerApi
 * PHP version 5
 *
 * @category Class
 * @package  Docstudio\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocStudio Api Documentation
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R74.25
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Docstudio\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Docstudio\Client\ApiException;
use Docstudio\Client\Configuration;
use Docstudio\Client\HeaderSelector;
use Docstudio\Client\ObjectSerializer;

/**
 * DictionaryControllerApi Class Doc Comment
 *
 * @category Class
 * @package  Docstudio\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DictionaryControllerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation archiveDictionary
     *
     * Archive dictionary
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function archiveDictionary($dictionary_uuid, $mailbox)
    {
        $this->archiveDictionaryWithHttpInfo($dictionary_uuid, $mailbox);
    }

    /**
     * Operation archiveDictionaryWithHttpInfo
     *
     * Archive dictionary
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function archiveDictionaryWithHttpInfo($dictionary_uuid, $mailbox)
    {
        $returnType = '';
        $request = $this->archiveDictionaryRequest($dictionary_uuid, $mailbox);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation archiveDictionaryAsync
     *
     * Archive dictionary
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function archiveDictionaryAsync($dictionary_uuid, $mailbox)
    {
        return $this->archiveDictionaryAsyncWithHttpInfo($dictionary_uuid, $mailbox)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation archiveDictionaryAsyncWithHttpInfo
     *
     * Archive dictionary
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function archiveDictionaryAsyncWithHttpInfo($dictionary_uuid, $mailbox)
    {
        $returnType = '';
        $request = $this->archiveDictionaryRequest($dictionary_uuid, $mailbox);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'archiveDictionary'
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function archiveDictionaryRequest($dictionary_uuid, $mailbox)
    {
        // verify the required parameter 'dictionary_uuid' is set
        if ($dictionary_uuid === null || (is_array($dictionary_uuid) && count($dictionary_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_uuid when calling archiveDictionary'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling archiveDictionary'
            );
        }

        $resourcePath = '/api/v1/dictionary/{dictionaryUuid}/archive';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($dictionary_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'dictionaryUuid' . '}',
                ObjectSerializer::toPathValue($dictionary_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation checkColumnValues
     *
     * Check dictionary column. Check access, existence, etc.
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\DictionaryCheckResponseDTO
     */
    public function checkColumnValues($dictionary_uuid, $column_uuid, $mailbox)
    {
        list($response) = $this->checkColumnValuesWithHttpInfo($dictionary_uuid, $column_uuid, $mailbox);
        return $response;
    }

    /**
     * Operation checkColumnValuesWithHttpInfo
     *
     * Check dictionary column. Check access, existence, etc.
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\DictionaryCheckResponseDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkColumnValuesWithHttpInfo($dictionary_uuid, $column_uuid, $mailbox)
    {
        $returnType = '\Swagger\Client\Model\DictionaryCheckResponseDTO';
        $request = $this->checkColumnValuesRequest($dictionary_uuid, $column_uuid, $mailbox);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DictionaryCheckResponseDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkColumnValuesAsync
     *
     * Check dictionary column. Check access, existence, etc.
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkColumnValuesAsync($dictionary_uuid, $column_uuid, $mailbox)
    {
        return $this->checkColumnValuesAsyncWithHttpInfo($dictionary_uuid, $column_uuid, $mailbox)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkColumnValuesAsyncWithHttpInfo
     *
     * Check dictionary column. Check access, existence, etc.
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkColumnValuesAsyncWithHttpInfo($dictionary_uuid, $column_uuid, $mailbox)
    {
        $returnType = '\Swagger\Client\Model\DictionaryCheckResponseDTO';
        $request = $this->checkColumnValuesRequest($dictionary_uuid, $column_uuid, $mailbox);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkColumnValues'
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function checkColumnValuesRequest($dictionary_uuid, $column_uuid, $mailbox)
    {
        // verify the required parameter 'dictionary_uuid' is set
        if ($dictionary_uuid === null || (is_array($dictionary_uuid) && count($dictionary_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_uuid when calling checkColumnValues'
            );
        }
        // verify the required parameter 'column_uuid' is set
        if ($column_uuid === null || (is_array($column_uuid) && count($column_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column_uuid when calling checkColumnValues'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling checkColumnValues'
            );
        }

        $resourcePath = '/api/v1/dictionary/{dictionaryUuid}/column/{columnUuid}/check';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($dictionary_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'dictionaryUuid' . '}',
                ObjectSerializer::toPathValue($dictionary_uuid),
                $resourcePath
            );
        }
        // path params
        if ($column_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'columnUuid' . '}',
                ObjectSerializer::toPathValue($column_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation checkDictionary
     *
     * Check dictionary. Check access, existence, etc.
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\DictionaryCheckResponseDTO
     */
    public function checkDictionary($dictionary_uuid, $mailbox)
    {
        list($response) = $this->checkDictionaryWithHttpInfo($dictionary_uuid, $mailbox);
        return $response;
    }

    /**
     * Operation checkDictionaryWithHttpInfo
     *
     * Check dictionary. Check access, existence, etc.
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\DictionaryCheckResponseDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkDictionaryWithHttpInfo($dictionary_uuid, $mailbox)
    {
        $returnType = '\Swagger\Client\Model\DictionaryCheckResponseDTO';
        $request = $this->checkDictionaryRequest($dictionary_uuid, $mailbox);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DictionaryCheckResponseDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkDictionaryAsync
     *
     * Check dictionary. Check access, existence, etc.
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkDictionaryAsync($dictionary_uuid, $mailbox)
    {
        return $this->checkDictionaryAsyncWithHttpInfo($dictionary_uuid, $mailbox)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkDictionaryAsyncWithHttpInfo
     *
     * Check dictionary. Check access, existence, etc.
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkDictionaryAsyncWithHttpInfo($dictionary_uuid, $mailbox)
    {
        $returnType = '\Swagger\Client\Model\DictionaryCheckResponseDTO';
        $request = $this->checkDictionaryRequest($dictionary_uuid, $mailbox);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkDictionary'
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function checkDictionaryRequest($dictionary_uuid, $mailbox)
    {
        // verify the required parameter 'dictionary_uuid' is set
        if ($dictionary_uuid === null || (is_array($dictionary_uuid) && count($dictionary_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_uuid when calling checkDictionary'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling checkDictionary'
            );
        }

        $resourcePath = '/api/v1/dictionary/{dictionaryUuid}/check';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($dictionary_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'dictionaryUuid' . '}',
                ObjectSerializer::toPathValue($dictionary_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createColumn
     *
     * Create dictionary column
     *
     * @param  \Docstudio\Client\Model\DictionaryColumnRequestDTO $body body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid Dictionary UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\SingleUuidDTO
     */
    public function createColumn($body, $mailbox, $dictionary_uuid)
    {
        list($response) = $this->createColumnWithHttpInfo($body, $mailbox, $dictionary_uuid);
        return $response;
    }

    /**
     * Operation createColumnWithHttpInfo
     *
     * Create dictionary column
     *
     * @param  \Docstudio\Client\Model\DictionaryColumnRequestDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid Dictionary UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\SingleUuidDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createColumnWithHttpInfo($body, $mailbox, $dictionary_uuid)
    {
        $returnType = '\Swagger\Client\Model\SingleUuidDTO';
        $request = $this->createColumnRequest($body, $mailbox, $dictionary_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SingleUuidDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createColumnAsync
     *
     * Create dictionary column
     *
     * @param  \Docstudio\Client\Model\DictionaryColumnRequestDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid Dictionary UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createColumnAsync($body, $mailbox, $dictionary_uuid)
    {
        return $this->createColumnAsyncWithHttpInfo($body, $mailbox, $dictionary_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createColumnAsyncWithHttpInfo
     *
     * Create dictionary column
     *
     * @param  \Docstudio\Client\Model\DictionaryColumnRequestDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid Dictionary UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createColumnAsyncWithHttpInfo($body, $mailbox, $dictionary_uuid)
    {
        $returnType = '\Swagger\Client\Model\SingleUuidDTO';
        $request = $this->createColumnRequest($body, $mailbox, $dictionary_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createColumn'
     *
     * @param  \Docstudio\Client\Model\DictionaryColumnRequestDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid Dictionary UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createColumnRequest($body, $mailbox, $dictionary_uuid)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createColumn'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling createColumn'
            );
        }
        // verify the required parameter 'dictionary_uuid' is set
        if ($dictionary_uuid === null || (is_array($dictionary_uuid) && count($dictionary_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_uuid when calling createColumn'
            );
        }

        $resourcePath = '/api/v1/dictionary/{dictionaryUuid}/column';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($dictionary_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'dictionaryUuid' . '}',
                ObjectSerializer::toPathValue($dictionary_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createDictionary
     *
     * Create empty dictionary
     *
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\SingleUuidDTO
     */
    public function createDictionary($mailbox)
    {
        list($response) = $this->createDictionaryWithHttpInfo($mailbox);
        return $response;
    }

    /**
     * Operation createDictionaryWithHttpInfo
     *
     * Create empty dictionary
     *
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\SingleUuidDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDictionaryWithHttpInfo($mailbox)
    {
        $returnType = '\Swagger\Client\Model\SingleUuidDTO';
        $request = $this->createDictionaryRequest($mailbox);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SingleUuidDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createDictionaryAsync
     *
     * Create empty dictionary
     *
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDictionaryAsync($mailbox)
    {
        return $this->createDictionaryAsyncWithHttpInfo($mailbox)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDictionaryAsyncWithHttpInfo
     *
     * Create empty dictionary
     *
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDictionaryAsyncWithHttpInfo($mailbox)
    {
        $returnType = '\Swagger\Client\Model\SingleUuidDTO';
        $request = $this->createDictionaryRequest($mailbox);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDictionary'
     *
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createDictionaryRequest($mailbox)
    {
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling createDictionary'
            );
        }

        $resourcePath = '/api/v1/dictionary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createRecord
     *
     * Create record(s)
     *
     * @param  \Docstudio\Client\Model\DictionaryColumnValueRequestDTO[][] $body body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid Dictionary UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\CreateRecordsResponseDTO
     */
    public function createRecord($body, $mailbox, $dictionary_uuid)
    {
        list($response) = $this->createRecordWithHttpInfo($body, $mailbox, $dictionary_uuid);
        return $response;
    }

    /**
     * Operation createRecordWithHttpInfo
     *
     * Create record(s)
     *
     * @param  \Docstudio\Client\Model\DictionaryColumnValueRequestDTO[][] $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid Dictionary UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\CreateRecordsResponseDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createRecordWithHttpInfo($body, $mailbox, $dictionary_uuid)
    {
        $returnType = '\Swagger\Client\Model\CreateRecordsResponseDTO';
        $request = $this->createRecordRequest($body, $mailbox, $dictionary_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CreateRecordsResponseDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createRecordAsync
     *
     * Create record(s)
     *
     * @param  \Docstudio\Client\Model\DictionaryColumnValueRequestDTO[][] $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid Dictionary UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRecordAsync($body, $mailbox, $dictionary_uuid)
    {
        return $this->createRecordAsyncWithHttpInfo($body, $mailbox, $dictionary_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createRecordAsyncWithHttpInfo
     *
     * Create record(s)
     *
     * @param  \Docstudio\Client\Model\DictionaryColumnValueRequestDTO[][] $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid Dictionary UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRecordAsyncWithHttpInfo($body, $mailbox, $dictionary_uuid)
    {
        $returnType = '\Swagger\Client\Model\CreateRecordsResponseDTO';
        $request = $this->createRecordRequest($body, $mailbox, $dictionary_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createRecord'
     *
     * @param  \Docstudio\Client\Model\DictionaryColumnValueRequestDTO[][] $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid Dictionary UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createRecordRequest($body, $mailbox, $dictionary_uuid)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createRecord'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling createRecord'
            );
        }
        // verify the required parameter 'dictionary_uuid' is set
        if ($dictionary_uuid === null || (is_array($dictionary_uuid) && count($dictionary_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_uuid when calling createRecord'
            );
        }

        $resourcePath = '/api/v1/dictionary/{dictionaryUuid}/record';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($dictionary_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'dictionaryUuid' . '}',
                ObjectSerializer::toPathValue($dictionary_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteColumnDictionary
     *
     * Delete column. Will return deleted column UUID
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\SingleUuidDTO
     */
    public function deleteColumnDictionary($dictionary_uuid, $column_uuid, $mailbox)
    {
        list($response) = $this->deleteColumnDictionaryWithHttpInfo($dictionary_uuid, $column_uuid, $mailbox);
        return $response;
    }

    /**
     * Operation deleteColumnDictionaryWithHttpInfo
     *
     * Delete column. Will return deleted column UUID
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\SingleUuidDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteColumnDictionaryWithHttpInfo($dictionary_uuid, $column_uuid, $mailbox)
    {
        $returnType = '\Swagger\Client\Model\SingleUuidDTO';
        $request = $this->deleteColumnDictionaryRequest($dictionary_uuid, $column_uuid, $mailbox);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SingleUuidDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteColumnDictionaryAsync
     *
     * Delete column. Will return deleted column UUID
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteColumnDictionaryAsync($dictionary_uuid, $column_uuid, $mailbox)
    {
        return $this->deleteColumnDictionaryAsyncWithHttpInfo($dictionary_uuid, $column_uuid, $mailbox)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteColumnDictionaryAsyncWithHttpInfo
     *
     * Delete column. Will return deleted column UUID
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteColumnDictionaryAsyncWithHttpInfo($dictionary_uuid, $column_uuid, $mailbox)
    {
        $returnType = '\Swagger\Client\Model\SingleUuidDTO';
        $request = $this->deleteColumnDictionaryRequest($dictionary_uuid, $column_uuid, $mailbox);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteColumnDictionary'
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteColumnDictionaryRequest($dictionary_uuid, $column_uuid, $mailbox)
    {
        // verify the required parameter 'dictionary_uuid' is set
        if ($dictionary_uuid === null || (is_array($dictionary_uuid) && count($dictionary_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_uuid when calling deleteColumnDictionary'
            );
        }
        // verify the required parameter 'column_uuid' is set
        if ($column_uuid === null || (is_array($column_uuid) && count($column_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column_uuid when calling deleteColumnDictionary'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling deleteColumnDictionary'
            );
        }

        $resourcePath = '/api/v1/dictionary/{dictionaryUuid}/column/{columnUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($dictionary_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'dictionaryUuid' . '}',
                ObjectSerializer::toPathValue($dictionary_uuid),
                $resourcePath
            );
        }
        // path params
        if ($column_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'columnUuid' . '}',
                ObjectSerializer::toPathValue($column_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteRecords
     *
     * Delete record(s). Will return deleted records UUID(s)
     *
     * @param  \Docstudio\Client\Model\SingleUuidDTO[] $body body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid Dictionary UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\SingleUuidDTO[]
     */
    public function deleteRecords($body, $mailbox, $dictionary_uuid)
    {
        list($response) = $this->deleteRecordsWithHttpInfo($body, $mailbox, $dictionary_uuid);
        return $response;
    }

    /**
     * Operation deleteRecordsWithHttpInfo
     *
     * Delete record(s). Will return deleted records UUID(s)
     *
     * @param  \Docstudio\Client\Model\SingleUuidDTO[] $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid Dictionary UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\SingleUuidDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRecordsWithHttpInfo($body, $mailbox, $dictionary_uuid)
    {
        $returnType = '\Swagger\Client\Model\SingleUuidDTO[]';
        $request = $this->deleteRecordsRequest($body, $mailbox, $dictionary_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SingleUuidDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteRecordsAsync
     *
     * Delete record(s). Will return deleted records UUID(s)
     *
     * @param  \Docstudio\Client\Model\SingleUuidDTO[] $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid Dictionary UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRecordsAsync($body, $mailbox, $dictionary_uuid)
    {
        return $this->deleteRecordsAsyncWithHttpInfo($body, $mailbox, $dictionary_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteRecordsAsyncWithHttpInfo
     *
     * Delete record(s). Will return deleted records UUID(s)
     *
     * @param  \Docstudio\Client\Model\SingleUuidDTO[] $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid Dictionary UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRecordsAsyncWithHttpInfo($body, $mailbox, $dictionary_uuid)
    {
        $returnType = '\Swagger\Client\Model\SingleUuidDTO[]';
        $request = $this->deleteRecordsRequest($body, $mailbox, $dictionary_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteRecords'
     *
     * @param  \Docstudio\Client\Model\SingleUuidDTO[] $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid Dictionary UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteRecordsRequest($body, $mailbox, $dictionary_uuid)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling deleteRecords'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling deleteRecords'
            );
        }
        // verify the required parameter 'dictionary_uuid' is set
        if ($dictionary_uuid === null || (is_array($dictionary_uuid) && count($dictionary_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_uuid when calling deleteRecords'
            );
        }

        $resourcePath = '/api/v1/dictionary/{dictionaryUuid}/record';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($dictionary_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'dictionaryUuid' . '}',
                ObjectSerializer::toPathValue($dictionary_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation download
     *
     * Download the dictionary
     *
     * @param  \Docstudio\Client\Model\DictionaryDownloadParamsDTO $body body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid UUID of dictionary (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\ExportTaskStatusDTO
     */
    public function download($body, $mailbox, $dictionary_uuid)
    {
        list($response) = $this->downloadWithHttpInfo($body, $mailbox, $dictionary_uuid);
        return $response;
    }

    /**
     * Operation downloadWithHttpInfo
     *
     * Download the dictionary
     *
     * @param  \Docstudio\Client\Model\DictionaryDownloadParamsDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid UUID of dictionary (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\ExportTaskStatusDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadWithHttpInfo($body, $mailbox, $dictionary_uuid)
    {
        $returnType = '\Swagger\Client\Model\ExportTaskStatusDTO';
        $request = $this->downloadRequest($body, $mailbox, $dictionary_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ExportTaskStatusDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation downloadAsync
     *
     * Download the dictionary
     *
     * @param  \Docstudio\Client\Model\DictionaryDownloadParamsDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid UUID of dictionary (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadAsync($body, $mailbox, $dictionary_uuid)
    {
        return $this->downloadAsyncWithHttpInfo($body, $mailbox, $dictionary_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadAsyncWithHttpInfo
     *
     * Download the dictionary
     *
     * @param  \Docstudio\Client\Model\DictionaryDownloadParamsDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid UUID of dictionary (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadAsyncWithHttpInfo($body, $mailbox, $dictionary_uuid)
    {
        $returnType = '\Swagger\Client\Model\ExportTaskStatusDTO';
        $request = $this->downloadRequest($body, $mailbox, $dictionary_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'download'
     *
     * @param  \Docstudio\Client\Model\DictionaryDownloadParamsDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid UUID of dictionary (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadRequest($body, $mailbox, $dictionary_uuid)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling download'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling download'
            );
        }
        // verify the required parameter 'dictionary_uuid' is set
        if ($dictionary_uuid === null || (is_array($dictionary_uuid) && count($dictionary_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_uuid when calling download'
            );
        }

        $resourcePath = '/api/v1/dictionary/{dictionaryUuid}/download';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($dictionary_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'dictionaryUuid' . '}',
                ObjectSerializer::toPathValue($dictionary_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation downloadStatus
     *
     * Download the dictionary
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $task_uuid UUID of task (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\ExportTaskStatusDTO
     */
    public function downloadStatus($dictionary_uuid, $task_uuid, $mailbox)
    {
        list($response) = $this->downloadStatusWithHttpInfo($dictionary_uuid, $task_uuid, $mailbox);
        return $response;
    }

    /**
     * Operation downloadStatusWithHttpInfo
     *
     * Download the dictionary
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $task_uuid UUID of task (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\ExportTaskStatusDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadStatusWithHttpInfo($dictionary_uuid, $task_uuid, $mailbox)
    {
        $returnType = '\Swagger\Client\Model\ExportTaskStatusDTO';
        $request = $this->downloadStatusRequest($dictionary_uuid, $task_uuid, $mailbox);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ExportTaskStatusDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation downloadStatusAsync
     *
     * Download the dictionary
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $task_uuid UUID of task (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadStatusAsync($dictionary_uuid, $task_uuid, $mailbox)
    {
        return $this->downloadStatusAsyncWithHttpInfo($dictionary_uuid, $task_uuid, $mailbox)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadStatusAsyncWithHttpInfo
     *
     * Download the dictionary
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $task_uuid UUID of task (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadStatusAsyncWithHttpInfo($dictionary_uuid, $task_uuid, $mailbox)
    {
        $returnType = '\Swagger\Client\Model\ExportTaskStatusDTO';
        $request = $this->downloadStatusRequest($dictionary_uuid, $task_uuid, $mailbox);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'downloadStatus'
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $task_uuid UUID of task (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadStatusRequest($dictionary_uuid, $task_uuid, $mailbox)
    {
        // verify the required parameter 'dictionary_uuid' is set
        if ($dictionary_uuid === null || (is_array($dictionary_uuid) && count($dictionary_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_uuid when calling downloadStatus'
            );
        }
        // verify the required parameter 'task_uuid' is set
        if ($task_uuid === null || (is_array($task_uuid) && count($task_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $task_uuid when calling downloadStatus'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling downloadStatus'
            );
        }

        $resourcePath = '/api/v1/dictionary/{dictionaryUuid}/download/status/{taskUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($dictionary_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'dictionaryUuid' . '}',
                ObjectSerializer::toPathValue($dictionary_uuid),
                $resourcePath
            );
        }
        // path params
        if ($task_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'taskUuid' . '}',
                ObjectSerializer::toPathValue($task_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getColumnValue
     *
     * Retrieve column value for specific record
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $record_uuid Record UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\DictionaryColumnValueResponseDTO
     */
    public function getColumnValue($dictionary_uuid, $record_uuid, $column_uuid, $mailbox)
    {
        list($response) = $this->getColumnValueWithHttpInfo($dictionary_uuid, $record_uuid, $column_uuid, $mailbox);
        return $response;
    }

    /**
     * Operation getColumnValueWithHttpInfo
     *
     * Retrieve column value for specific record
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $record_uuid Record UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\DictionaryColumnValueResponseDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getColumnValueWithHttpInfo($dictionary_uuid, $record_uuid, $column_uuid, $mailbox)
    {
        $returnType = '\Swagger\Client\Model\DictionaryColumnValueResponseDTO';
        $request = $this->getColumnValueRequest($dictionary_uuid, $record_uuid, $column_uuid, $mailbox);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DictionaryColumnValueResponseDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getColumnValueAsync
     *
     * Retrieve column value for specific record
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $record_uuid Record UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getColumnValueAsync($dictionary_uuid, $record_uuid, $column_uuid, $mailbox)
    {
        return $this->getColumnValueAsyncWithHttpInfo($dictionary_uuid, $record_uuid, $column_uuid, $mailbox)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getColumnValueAsyncWithHttpInfo
     *
     * Retrieve column value for specific record
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $record_uuid Record UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getColumnValueAsyncWithHttpInfo($dictionary_uuid, $record_uuid, $column_uuid, $mailbox)
    {
        $returnType = '\Swagger\Client\Model\DictionaryColumnValueResponseDTO';
        $request = $this->getColumnValueRequest($dictionary_uuid, $record_uuid, $column_uuid, $mailbox);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getColumnValue'
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $record_uuid Record UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getColumnValueRequest($dictionary_uuid, $record_uuid, $column_uuid, $mailbox)
    {
        // verify the required parameter 'dictionary_uuid' is set
        if ($dictionary_uuid === null || (is_array($dictionary_uuid) && count($dictionary_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_uuid when calling getColumnValue'
            );
        }
        // verify the required parameter 'record_uuid' is set
        if ($record_uuid === null || (is_array($record_uuid) && count($record_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $record_uuid when calling getColumnValue'
            );
        }
        // verify the required parameter 'column_uuid' is set
        if ($column_uuid === null || (is_array($column_uuid) && count($column_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column_uuid when calling getColumnValue'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling getColumnValue'
            );
        }

        $resourcePath = '/api/v1/dictionary/{dictionaryUuid}/record/{recordUuid}/column/{columnUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($dictionary_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'dictionaryUuid' . '}',
                ObjectSerializer::toPathValue($dictionary_uuid),
                $resourcePath
            );
        }
        // path params
        if ($record_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'recordUuid' . '}',
                ObjectSerializer::toPathValue($record_uuid),
                $resourcePath
            );
        }
        // path params
        if ($column_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'columnUuid' . '}',
                ObjectSerializer::toPathValue($column_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getColumnValues
     *
     * Retrieve column values from dictionary
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     * @param  string $keyword Keyword to search by (optional)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\PageDTODictionaryColumnValueResponseDTO
     */
    public function getColumnValues($dictionary_uuid, $column_uuid, $mailbox, $offset = '0', $limit = '25', $keyword = null)
    {
        list($response) = $this->getColumnValuesWithHttpInfo($dictionary_uuid, $column_uuid, $mailbox, $offset, $limit, $keyword);
        return $response;
    }

    /**
     * Operation getColumnValuesWithHttpInfo
     *
     * Retrieve column values from dictionary
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     * @param  string $keyword Keyword to search by (optional)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\PageDTODictionaryColumnValueResponseDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getColumnValuesWithHttpInfo($dictionary_uuid, $column_uuid, $mailbox, $offset = '0', $limit = '25', $keyword = null)
    {
        $returnType = '\Swagger\Client\Model\PageDTODictionaryColumnValueResponseDTO';
        $request = $this->getColumnValuesRequest($dictionary_uuid, $column_uuid, $mailbox, $offset, $limit, $keyword);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PageDTODictionaryColumnValueResponseDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getColumnValuesAsync
     *
     * Retrieve column values from dictionary
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     * @param  string $keyword Keyword to search by (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getColumnValuesAsync($dictionary_uuid, $column_uuid, $mailbox, $offset = '0', $limit = '25', $keyword = null)
    {
        return $this->getColumnValuesAsyncWithHttpInfo($dictionary_uuid, $column_uuid, $mailbox, $offset, $limit, $keyword)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getColumnValuesAsyncWithHttpInfo
     *
     * Retrieve column values from dictionary
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     * @param  string $keyword Keyword to search by (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getColumnValuesAsyncWithHttpInfo($dictionary_uuid, $column_uuid, $mailbox, $offset = '0', $limit = '25', $keyword = null)
    {
        $returnType = '\Swagger\Client\Model\PageDTODictionaryColumnValueResponseDTO';
        $request = $this->getColumnValuesRequest($dictionary_uuid, $column_uuid, $mailbox, $offset, $limit, $keyword);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getColumnValues'
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     * @param  string $keyword Keyword to search by (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getColumnValuesRequest($dictionary_uuid, $column_uuid, $mailbox, $offset = '0', $limit = '25', $keyword = null)
    {
        // verify the required parameter 'dictionary_uuid' is set
        if ($dictionary_uuid === null || (is_array($dictionary_uuid) && count($dictionary_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_uuid when calling getColumnValues'
            );
        }
        // verify the required parameter 'column_uuid' is set
        if ($column_uuid === null || (is_array($column_uuid) && count($column_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column_uuid when calling getColumnValues'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling getColumnValues'
            );
        }

        $resourcePath = '/api/v1/dictionary/{dictionaryUuid}/column/{columnUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, 'int32');
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, 'int32');
        }
        // query params
        if ($keyword !== null) {
            $queryParams['keyword'] = ObjectSerializer::toQueryValue($keyword, null);
        }
        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($dictionary_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'dictionaryUuid' . '}',
                ObjectSerializer::toPathValue($dictionary_uuid),
                $resourcePath
            );
        }
        // path params
        if ($column_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'columnUuid' . '}',
                ObjectSerializer::toPathValue($column_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDictionaryRecord
     *
     * Retrieve record
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $record_uuid Record UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\DictionaryRecordValuesResponseDTO
     */
    public function getDictionaryRecord($dictionary_uuid, $record_uuid, $mailbox)
    {
        list($response) = $this->getDictionaryRecordWithHttpInfo($dictionary_uuid, $record_uuid, $mailbox);
        return $response;
    }

    /**
     * Operation getDictionaryRecordWithHttpInfo
     *
     * Retrieve record
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $record_uuid Record UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\DictionaryRecordValuesResponseDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDictionaryRecordWithHttpInfo($dictionary_uuid, $record_uuid, $mailbox)
    {
        $returnType = '\Swagger\Client\Model\DictionaryRecordValuesResponseDTO';
        $request = $this->getDictionaryRecordRequest($dictionary_uuid, $record_uuid, $mailbox);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DictionaryRecordValuesResponseDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDictionaryRecordAsync
     *
     * Retrieve record
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $record_uuid Record UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDictionaryRecordAsync($dictionary_uuid, $record_uuid, $mailbox)
    {
        return $this->getDictionaryRecordAsyncWithHttpInfo($dictionary_uuid, $record_uuid, $mailbox)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDictionaryRecordAsyncWithHttpInfo
     *
     * Retrieve record
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $record_uuid Record UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDictionaryRecordAsyncWithHttpInfo($dictionary_uuid, $record_uuid, $mailbox)
    {
        $returnType = '\Swagger\Client\Model\DictionaryRecordValuesResponseDTO';
        $request = $this->getDictionaryRecordRequest($dictionary_uuid, $record_uuid, $mailbox);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDictionaryRecord'
     *
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $record_uuid Record UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDictionaryRecordRequest($dictionary_uuid, $record_uuid, $mailbox)
    {
        // verify the required parameter 'dictionary_uuid' is set
        if ($dictionary_uuid === null || (is_array($dictionary_uuid) && count($dictionary_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_uuid when calling getDictionaryRecord'
            );
        }
        // verify the required parameter 'record_uuid' is set
        if ($record_uuid === null || (is_array($record_uuid) && count($record_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $record_uuid when calling getDictionaryRecord'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling getDictionaryRecord'
            );
        }

        $resourcePath = '/api/v1/dictionary/{dictionaryUuid}/record/{recordUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($dictionary_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'dictionaryUuid' . '}',
                ObjectSerializer::toPathValue($dictionary_uuid),
                $resourcePath
            );
        }
        // path params
        if ($record_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'recordUuid' . '}',
                ObjectSerializer::toPathValue($record_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDictionaryRecords
     *
     * Get dictionary records
     *
     * @param  \Docstudio\Client\Model\DictionaryFiltersRequestDTO $body body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\PageDTODictionaryRecordValuesResponseDTO
     */
    public function getDictionaryRecords($body, $mailbox, $dictionary_uuid, $offset = '0', $limit = '25')
    {
        list($response) = $this->getDictionaryRecordsWithHttpInfo($body, $mailbox, $dictionary_uuid, $offset, $limit);
        return $response;
    }

    /**
     * Operation getDictionaryRecordsWithHttpInfo
     *
     * Get dictionary records
     *
     * @param  \Docstudio\Client\Model\DictionaryFiltersRequestDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\PageDTODictionaryRecordValuesResponseDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDictionaryRecordsWithHttpInfo($body, $mailbox, $dictionary_uuid, $offset = '0', $limit = '25')
    {
        $returnType = '\Swagger\Client\Model\PageDTODictionaryRecordValuesResponseDTO';
        $request = $this->getDictionaryRecordsRequest($body, $mailbox, $dictionary_uuid, $offset, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PageDTODictionaryRecordValuesResponseDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDictionaryRecordsAsync
     *
     * Get dictionary records
     *
     * @param  \Docstudio\Client\Model\DictionaryFiltersRequestDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDictionaryRecordsAsync($body, $mailbox, $dictionary_uuid, $offset = '0', $limit = '25')
    {
        return $this->getDictionaryRecordsAsyncWithHttpInfo($body, $mailbox, $dictionary_uuid, $offset, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDictionaryRecordsAsyncWithHttpInfo
     *
     * Get dictionary records
     *
     * @param  \Docstudio\Client\Model\DictionaryFiltersRequestDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDictionaryRecordsAsyncWithHttpInfo($body, $mailbox, $dictionary_uuid, $offset = '0', $limit = '25')
    {
        $returnType = '\Swagger\Client\Model\PageDTODictionaryRecordValuesResponseDTO';
        $request = $this->getDictionaryRecordsRequest($body, $mailbox, $dictionary_uuid, $offset, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDictionaryRecords'
     *
     * @param  \Docstudio\Client\Model\DictionaryFiltersRequestDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDictionaryRecordsRequest($body, $mailbox, $dictionary_uuid, $offset = '0', $limit = '25')
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling getDictionaryRecords'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling getDictionaryRecords'
            );
        }
        // verify the required parameter 'dictionary_uuid' is set
        if ($dictionary_uuid === null || (is_array($dictionary_uuid) && count($dictionary_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_uuid when calling getDictionaryRecords'
            );
        }

        $resourcePath = '/api/v1/dictionary/{dictionaryUuid}/records';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, 'int32');
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, 'int32');
        }
        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($dictionary_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'dictionaryUuid' . '}',
                ObjectSerializer::toPathValue($dictionary_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchDictionary
     *
     * Update dictionary
     *
     * @param  \Docstudio\Client\Model\DictionaryRequestDTO $body body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid UUID of dictionary (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\DictionaryResponseDTO
     */
    public function patchDictionary($body, $mailbox, $dictionary_uuid)
    {
        list($response) = $this->patchDictionaryWithHttpInfo($body, $mailbox, $dictionary_uuid);
        return $response;
    }

    /**
     * Operation patchDictionaryWithHttpInfo
     *
     * Update dictionary
     *
     * @param  \Docstudio\Client\Model\DictionaryRequestDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid UUID of dictionary (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\DictionaryResponseDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchDictionaryWithHttpInfo($body, $mailbox, $dictionary_uuid)
    {
        $returnType = '\Swagger\Client\Model\DictionaryResponseDTO';
        $request = $this->patchDictionaryRequest($body, $mailbox, $dictionary_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DictionaryResponseDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchDictionaryAsync
     *
     * Update dictionary
     *
     * @param  \Docstudio\Client\Model\DictionaryRequestDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid UUID of dictionary (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchDictionaryAsync($body, $mailbox, $dictionary_uuid)
    {
        return $this->patchDictionaryAsyncWithHttpInfo($body, $mailbox, $dictionary_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchDictionaryAsyncWithHttpInfo
     *
     * Update dictionary
     *
     * @param  \Docstudio\Client\Model\DictionaryRequestDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid UUID of dictionary (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchDictionaryAsyncWithHttpInfo($body, $mailbox, $dictionary_uuid)
    {
        $returnType = '\Swagger\Client\Model\DictionaryResponseDTO';
        $request = $this->patchDictionaryRequest($body, $mailbox, $dictionary_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchDictionary'
     *
     * @param  \Docstudio\Client\Model\DictionaryRequestDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid UUID of dictionary (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function patchDictionaryRequest($body, $mailbox, $dictionary_uuid)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling patchDictionary'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling patchDictionary'
            );
        }
        // verify the required parameter 'dictionary_uuid' is set
        if ($dictionary_uuid === null || (is_array($dictionary_uuid) && count($dictionary_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_uuid when calling patchDictionary'
            );
        }

        $resourcePath = '/api/v1/dictionary/{dictionaryUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($dictionary_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'dictionaryUuid' . '}',
                ObjectSerializer::toPathValue($dictionary_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchRecord
     *
     * Update record column values
     *
     * @param  \Docstudio\Client\Model\DictionaryColumnValueRequestDTO[] $body body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $record_uuid Record UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function patchRecord($body, $mailbox, $dictionary_uuid, $record_uuid)
    {
        $this->patchRecordWithHttpInfo($body, $mailbox, $dictionary_uuid, $record_uuid);
    }

    /**
     * Operation patchRecordWithHttpInfo
     *
     * Update record column values
     *
     * @param  \Docstudio\Client\Model\DictionaryColumnValueRequestDTO[] $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $record_uuid Record UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchRecordWithHttpInfo($body, $mailbox, $dictionary_uuid, $record_uuid)
    {
        $returnType = '';
        $request = $this->patchRecordRequest($body, $mailbox, $dictionary_uuid, $record_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation patchRecordAsync
     *
     * Update record column values
     *
     * @param  \Docstudio\Client\Model\DictionaryColumnValueRequestDTO[] $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $record_uuid Record UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchRecordAsync($body, $mailbox, $dictionary_uuid, $record_uuid)
    {
        return $this->patchRecordAsyncWithHttpInfo($body, $mailbox, $dictionary_uuid, $record_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchRecordAsyncWithHttpInfo
     *
     * Update record column values
     *
     * @param  \Docstudio\Client\Model\DictionaryColumnValueRequestDTO[] $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $record_uuid Record UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchRecordAsyncWithHttpInfo($body, $mailbox, $dictionary_uuid, $record_uuid)
    {
        $returnType = '';
        $request = $this->patchRecordRequest($body, $mailbox, $dictionary_uuid, $record_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchRecord'
     *
     * @param  \Docstudio\Client\Model\DictionaryColumnValueRequestDTO[] $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $record_uuid Record UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function patchRecordRequest($body, $mailbox, $dictionary_uuid, $record_uuid)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling patchRecord'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling patchRecord'
            );
        }
        // verify the required parameter 'dictionary_uuid' is set
        if ($dictionary_uuid === null || (is_array($dictionary_uuid) && count($dictionary_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_uuid when calling patchRecord'
            );
        }
        // verify the required parameter 'record_uuid' is set
        if ($record_uuid === null || (is_array($record_uuid) && count($record_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $record_uuid when calling patchRecord'
            );
        }

        $resourcePath = '/api/v1/dictionary/{dictionaryUuid}/record/{recordUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($dictionary_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'dictionaryUuid' . '}',
                ObjectSerializer::toPathValue($dictionary_uuid),
                $resourcePath
            );
        }
        // path params
        if ($record_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'recordUuid' . '}',
                ObjectSerializer::toPathValue($record_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation readDictionary
     *
     * Read/get dictionary
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  bool $with_columns Add columns description to each dictionary (optional, default to false)
     * @param  bool $with_records_count Add records count value to each dictionary (optional, default to false)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\DictionaryResponseDTO
     */
    public function readDictionary($dictionary_uuid, $mailbox, $with_columns = 'false', $with_records_count = 'false')
    {
        list($response) = $this->readDictionaryWithHttpInfo($dictionary_uuid, $mailbox, $with_columns, $with_records_count);
        return $response;
    }

    /**
     * Operation readDictionaryWithHttpInfo
     *
     * Read/get dictionary
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  bool $with_columns Add columns description to each dictionary (optional, default to false)
     * @param  bool $with_records_count Add records count value to each dictionary (optional, default to false)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\DictionaryResponseDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function readDictionaryWithHttpInfo($dictionary_uuid, $mailbox, $with_columns = 'false', $with_records_count = 'false')
    {
        $returnType = '\Swagger\Client\Model\DictionaryResponseDTO';
        $request = $this->readDictionaryRequest($dictionary_uuid, $mailbox, $with_columns, $with_records_count);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DictionaryResponseDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation readDictionaryAsync
     *
     * Read/get dictionary
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  bool $with_columns Add columns description to each dictionary (optional, default to false)
     * @param  bool $with_records_count Add records count value to each dictionary (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readDictionaryAsync($dictionary_uuid, $mailbox, $with_columns = 'false', $with_records_count = 'false')
    {
        return $this->readDictionaryAsyncWithHttpInfo($dictionary_uuid, $mailbox, $with_columns, $with_records_count)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation readDictionaryAsyncWithHttpInfo
     *
     * Read/get dictionary
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  bool $with_columns Add columns description to each dictionary (optional, default to false)
     * @param  bool $with_records_count Add records count value to each dictionary (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function readDictionaryAsyncWithHttpInfo($dictionary_uuid, $mailbox, $with_columns = 'false', $with_records_count = 'false')
    {
        $returnType = '\Swagger\Client\Model\DictionaryResponseDTO';
        $request = $this->readDictionaryRequest($dictionary_uuid, $mailbox, $with_columns, $with_records_count);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'readDictionary'
     *
     * @param  string $dictionary_uuid UUID of dictionary (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  bool $with_columns Add columns description to each dictionary (optional, default to false)
     * @param  bool $with_records_count Add records count value to each dictionary (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function readDictionaryRequest($dictionary_uuid, $mailbox, $with_columns = 'false', $with_records_count = 'false')
    {
        // verify the required parameter 'dictionary_uuid' is set
        if ($dictionary_uuid === null || (is_array($dictionary_uuid) && count($dictionary_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_uuid when calling readDictionary'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling readDictionary'
            );
        }

        $resourcePath = '/api/v1/dictionary/{dictionaryUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($with_columns !== null) {
            $queryParams['withColumns'] = ObjectSerializer::toQueryValue($with_columns, null);
        }
        // query params
        if ($with_records_count !== null) {
            $queryParams['withRecordsCount'] = ObjectSerializer::toQueryValue($with_records_count, null);
        }
        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($dictionary_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'dictionaryUuid' . '}',
                ObjectSerializer::toPathValue($dictionary_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchDictionaries
     *
     * Get paged dictionary list
     *
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $level Dictionary access level, &#x27;pub&#x27; by default. (optional, default to pub)
     * @param  string $keyword Keyword to search dictionary by or dictionary UUID (optional)
     * @param  bool $with_columns Add columns description to each dictionary (optional, default to false)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\PageDTODictionaryResponseDTO
     */
    public function searchDictionaries($mailbox, $level = 'pub', $keyword = null, $with_columns = 'false', $offset = '0', $limit = '25')
    {
        list($response) = $this->searchDictionariesWithHttpInfo($mailbox, $level, $keyword, $with_columns, $offset, $limit);
        return $response;
    }

    /**
     * Operation searchDictionariesWithHttpInfo
     *
     * Get paged dictionary list
     *
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $level Dictionary access level, &#x27;pub&#x27; by default. (optional, default to pub)
     * @param  string $keyword Keyword to search dictionary by or dictionary UUID (optional)
     * @param  bool $with_columns Add columns description to each dictionary (optional, default to false)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\PageDTODictionaryResponseDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchDictionariesWithHttpInfo($mailbox, $level = 'pub', $keyword = null, $with_columns = 'false', $offset = '0', $limit = '25')
    {
        $returnType = '\Swagger\Client\Model\PageDTODictionaryResponseDTO';
        $request = $this->searchDictionariesRequest($mailbox, $level, $keyword, $with_columns, $offset, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PageDTODictionaryResponseDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchDictionariesAsync
     *
     * Get paged dictionary list
     *
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $level Dictionary access level, &#x27;pub&#x27; by default. (optional, default to pub)
     * @param  string $keyword Keyword to search dictionary by or dictionary UUID (optional)
     * @param  bool $with_columns Add columns description to each dictionary (optional, default to false)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchDictionariesAsync($mailbox, $level = 'pub', $keyword = null, $with_columns = 'false', $offset = '0', $limit = '25')
    {
        return $this->searchDictionariesAsyncWithHttpInfo($mailbox, $level, $keyword, $with_columns, $offset, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchDictionariesAsyncWithHttpInfo
     *
     * Get paged dictionary list
     *
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $level Dictionary access level, &#x27;pub&#x27; by default. (optional, default to pub)
     * @param  string $keyword Keyword to search dictionary by or dictionary UUID (optional)
     * @param  bool $with_columns Add columns description to each dictionary (optional, default to false)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchDictionariesAsyncWithHttpInfo($mailbox, $level = 'pub', $keyword = null, $with_columns = 'false', $offset = '0', $limit = '25')
    {
        $returnType = '\Swagger\Client\Model\PageDTODictionaryResponseDTO';
        $request = $this->searchDictionariesRequest($mailbox, $level, $keyword, $with_columns, $offset, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchDictionaries'
     *
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $level Dictionary access level, &#x27;pub&#x27; by default. (optional, default to pub)
     * @param  string $keyword Keyword to search dictionary by or dictionary UUID (optional)
     * @param  bool $with_columns Add columns description to each dictionary (optional, default to false)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchDictionariesRequest($mailbox, $level = 'pub', $keyword = null, $with_columns = 'false', $offset = '0', $limit = '25')
    {
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling searchDictionaries'
            );
        }

        $resourcePath = '/api/v1/dictionary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($level !== null) {
            $queryParams['level'] = ObjectSerializer::toQueryValue($level, null);
        }
        // query params
        if ($keyword !== null) {
            $queryParams['keyword'] = ObjectSerializer::toQueryValue($keyword, null);
        }
        // query params
        if ($with_columns !== null) {
            $queryParams['withColumns'] = ObjectSerializer::toQueryValue($with_columns, null);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, 'int32');
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, 'int32');
        }
        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateColumnDictionary
     *
     * Update dictionary column
     *
     * @param  \Docstudio\Client\Model\DictionaryColumnRequestDTO $body body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\DictionaryColumnResponseDTO
     */
    public function updateColumnDictionary($body, $mailbox, $dictionary_uuid, $column_uuid)
    {
        list($response) = $this->updateColumnDictionaryWithHttpInfo($body, $mailbox, $dictionary_uuid, $column_uuid);
        return $response;
    }

    /**
     * Operation updateColumnDictionaryWithHttpInfo
     *
     * Update dictionary column
     *
     * @param  \Docstudio\Client\Model\DictionaryColumnRequestDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\DictionaryColumnResponseDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateColumnDictionaryWithHttpInfo($body, $mailbox, $dictionary_uuid, $column_uuid)
    {
        $returnType = '\Swagger\Client\Model\DictionaryColumnResponseDTO';
        $request = $this->updateColumnDictionaryRequest($body, $mailbox, $dictionary_uuid, $column_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DictionaryColumnResponseDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateColumnDictionaryAsync
     *
     * Update dictionary column
     *
     * @param  \Docstudio\Client\Model\DictionaryColumnRequestDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateColumnDictionaryAsync($body, $mailbox, $dictionary_uuid, $column_uuid)
    {
        return $this->updateColumnDictionaryAsyncWithHttpInfo($body, $mailbox, $dictionary_uuid, $column_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateColumnDictionaryAsyncWithHttpInfo
     *
     * Update dictionary column
     *
     * @param  \Docstudio\Client\Model\DictionaryColumnRequestDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateColumnDictionaryAsyncWithHttpInfo($body, $mailbox, $dictionary_uuid, $column_uuid)
    {
        $returnType = '\Swagger\Client\Model\DictionaryColumnResponseDTO';
        $request = $this->updateColumnDictionaryRequest($body, $mailbox, $dictionary_uuid, $column_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateColumnDictionary'
     *
     * @param  \Docstudio\Client\Model\DictionaryColumnRequestDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $dictionary_uuid Dictionary UUID (required)
     * @param  string $column_uuid Column UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateColumnDictionaryRequest($body, $mailbox, $dictionary_uuid, $column_uuid)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateColumnDictionary'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling updateColumnDictionary'
            );
        }
        // verify the required parameter 'dictionary_uuid' is set
        if ($dictionary_uuid === null || (is_array($dictionary_uuid) && count($dictionary_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dictionary_uuid when calling updateColumnDictionary'
            );
        }
        // verify the required parameter 'column_uuid' is set
        if ($column_uuid === null || (is_array($column_uuid) && count($column_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $column_uuid when calling updateColumnDictionary'
            );
        }

        $resourcePath = '/api/v1/dictionary/{dictionaryUuid}/column/{columnUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($dictionary_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'dictionaryUuid' . '}',
                ObjectSerializer::toPathValue($dictionary_uuid),
                $resourcePath
            );
        }
        // path params
        if ($column_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'columnUuid' . '}',
                ObjectSerializer::toPathValue($column_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
