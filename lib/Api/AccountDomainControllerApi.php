<?php
/**
 * AccountDomainControllerApi
 * PHP version 7.4
 *
 * @category Class
 * @package  DocStudio\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DocStudio Api Documentation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R110.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DocStudio\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use DocStudio\Client\ApiException;
use DocStudio\Client\Configuration;
use DocStudio\Client\HeaderSelector;
use DocStudio\Client\ObjectSerializer;

/**
 * AccountDomainControllerApi Class Doc Comment
 *
 * @category Class
 * @package  DocStudio\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AccountDomainControllerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'actionAccountDomain' => [
            'application/json',
        ],
        'createAccountDomain' => [
            'application/json',
        ],
        'createAccountSsoIdp' => [
            'application/json',
        ],
        'deleteAccountDomain' => [
            'application/json',
        ],
        'deleteAccountIdp' => [
            'application/json',
        ],
        'getAccountDomain' => [
            'application/json',
        ],
        'getAccountDomains' => [
            'application/json',
        ],
        'getAccountIdp' => [
            'application/json',
        ],
        'getAllAccountIdps' => [
            'application/json',
        ],
        'updateAccountDomain' => [
            'application/json',
        ],
        'updateAccountSsoIdp' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation actionAccountDomain
     *
     * Change account domain status
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     * @param  string $action Action (required)
     * @param  \DocStudio\Client\Model\ChangeDomainStatusDTO $change_domain_status_dto change_domain_status_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['actionAccountDomain'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\AccountDomainDTO
     */
    public function actionAccountDomain($account_uuid, $domain_uuid, $action, $change_domain_status_dto = null, string $contentType = self::contentTypes['actionAccountDomain'][0])
    {
        list($response) = $this->actionAccountDomainWithHttpInfo($account_uuid, $domain_uuid, $action, $change_domain_status_dto, $contentType);
        return $response;
    }

    /**
     * Operation actionAccountDomainWithHttpInfo
     *
     * Change account domain status
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     * @param  string $action Action (required)
     * @param  \DocStudio\Client\Model\ChangeDomainStatusDTO $change_domain_status_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['actionAccountDomain'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\AccountDomainDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function actionAccountDomainWithHttpInfo($account_uuid, $domain_uuid, $action, $change_domain_status_dto = null, string $contentType = self::contentTypes['actionAccountDomain'][0])
    {
        $request = $this->actionAccountDomainRequest($account_uuid, $domain_uuid, $action, $change_domain_status_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DocStudio\Client\Model\AccountDomainDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\AccountDomainDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\AccountDomainDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\AccountDomainDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\AccountDomainDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation actionAccountDomainAsync
     *
     * Change account domain status
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     * @param  string $action Action (required)
     * @param  \DocStudio\Client\Model\ChangeDomainStatusDTO $change_domain_status_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['actionAccountDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function actionAccountDomainAsync($account_uuid, $domain_uuid, $action, $change_domain_status_dto = null, string $contentType = self::contentTypes['actionAccountDomain'][0])
    {
        return $this->actionAccountDomainAsyncWithHttpInfo($account_uuid, $domain_uuid, $action, $change_domain_status_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation actionAccountDomainAsyncWithHttpInfo
     *
     * Change account domain status
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     * @param  string $action Action (required)
     * @param  \DocStudio\Client\Model\ChangeDomainStatusDTO $change_domain_status_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['actionAccountDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function actionAccountDomainAsyncWithHttpInfo($account_uuid, $domain_uuid, $action, $change_domain_status_dto = null, string $contentType = self::contentTypes['actionAccountDomain'][0])
    {
        $returnType = '\DocStudio\Client\Model\AccountDomainDTO';
        $request = $this->actionAccountDomainRequest($account_uuid, $domain_uuid, $action, $change_domain_status_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'actionAccountDomain'
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     * @param  string $action Action (required)
     * @param  \DocStudio\Client\Model\ChangeDomainStatusDTO $change_domain_status_dto (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['actionAccountDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function actionAccountDomainRequest($account_uuid, $domain_uuid, $action, $change_domain_status_dto = null, string $contentType = self::contentTypes['actionAccountDomain'][0])
    {

        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling actionAccountDomain'
            );
        }

        // verify the required parameter 'domain_uuid' is set
        if ($domain_uuid === null || (is_array($domain_uuid) && count($domain_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain_uuid when calling actionAccountDomain'
            );
        }

        // verify the required parameter 'action' is set
        if ($action === null || (is_array($action) && count($action) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $action when calling actionAccountDomain'
            );
        }



        $resourcePath = '/api/v1/account/{accountUuid}/domain/{domainUuid}/{action}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }
        // path params
        if ($domain_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'domainUuid' . '}',
                ObjectSerializer::toPathValue($domain_uuid),
                $resourcePath
            );
        }
        // path params
        if ($action !== null) {
            $resourcePath = str_replace(
                '{' . 'action' . '}',
                ObjectSerializer::toPathValue($action),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($change_domain_status_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($change_domain_status_dto));
            } else {
                $httpBody = $change_domain_status_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAccountDomain
     *
     * Create account domain
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \DocStudio\Client\Model\AccountDomainCreateDTO $account_domain_create_dto account_domain_create_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAccountDomain'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\AccountDomainDTO
     */
    public function createAccountDomain($account_uuid, $account_domain_create_dto, string $contentType = self::contentTypes['createAccountDomain'][0])
    {
        list($response) = $this->createAccountDomainWithHttpInfo($account_uuid, $account_domain_create_dto, $contentType);
        return $response;
    }

    /**
     * Operation createAccountDomainWithHttpInfo
     *
     * Create account domain
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \DocStudio\Client\Model\AccountDomainCreateDTO $account_domain_create_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAccountDomain'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\AccountDomainDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAccountDomainWithHttpInfo($account_uuid, $account_domain_create_dto, string $contentType = self::contentTypes['createAccountDomain'][0])
    {
        $request = $this->createAccountDomainRequest($account_uuid, $account_domain_create_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DocStudio\Client\Model\AccountDomainDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\AccountDomainDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\AccountDomainDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\AccountDomainDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\AccountDomainDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAccountDomainAsync
     *
     * Create account domain
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \DocStudio\Client\Model\AccountDomainCreateDTO $account_domain_create_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAccountDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAccountDomainAsync($account_uuid, $account_domain_create_dto, string $contentType = self::contentTypes['createAccountDomain'][0])
    {
        return $this->createAccountDomainAsyncWithHttpInfo($account_uuid, $account_domain_create_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAccountDomainAsyncWithHttpInfo
     *
     * Create account domain
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \DocStudio\Client\Model\AccountDomainCreateDTO $account_domain_create_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAccountDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAccountDomainAsyncWithHttpInfo($account_uuid, $account_domain_create_dto, string $contentType = self::contentTypes['createAccountDomain'][0])
    {
        $returnType = '\DocStudio\Client\Model\AccountDomainDTO';
        $request = $this->createAccountDomainRequest($account_uuid, $account_domain_create_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAccountDomain'
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \DocStudio\Client\Model\AccountDomainCreateDTO $account_domain_create_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAccountDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createAccountDomainRequest($account_uuid, $account_domain_create_dto, string $contentType = self::contentTypes['createAccountDomain'][0])
    {

        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling createAccountDomain'
            );
        }

        // verify the required parameter 'account_domain_create_dto' is set
        if ($account_domain_create_dto === null || (is_array($account_domain_create_dto) && count($account_domain_create_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_domain_create_dto when calling createAccountDomain'
            );
        }


        $resourcePath = '/api/v1/account/{accountUuid}/domain';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($account_domain_create_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($account_domain_create_dto));
            } else {
                $httpBody = $account_domain_create_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAccountSsoIdp
     *
     * Create account SSO Identity Provider
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \DocStudio\Client\Model\AccountSsoIdProviderUpdateDTO $account_sso_id_provider_update_dto account_sso_id_provider_update_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAccountSsoIdp'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\AccountSsoIdProviderDTO
     */
    public function createAccountSsoIdp($account_uuid, $account_sso_id_provider_update_dto, string $contentType = self::contentTypes['createAccountSsoIdp'][0])
    {
        list($response) = $this->createAccountSsoIdpWithHttpInfo($account_uuid, $account_sso_id_provider_update_dto, $contentType);
        return $response;
    }

    /**
     * Operation createAccountSsoIdpWithHttpInfo
     *
     * Create account SSO Identity Provider
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \DocStudio\Client\Model\AccountSsoIdProviderUpdateDTO $account_sso_id_provider_update_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAccountSsoIdp'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\AccountSsoIdProviderDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAccountSsoIdpWithHttpInfo($account_uuid, $account_sso_id_provider_update_dto, string $contentType = self::contentTypes['createAccountSsoIdp'][0])
    {
        $request = $this->createAccountSsoIdpRequest($account_uuid, $account_sso_id_provider_update_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\DocStudio\Client\Model\AccountSsoIdProviderDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\AccountSsoIdProviderDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\AccountSsoIdProviderDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\AccountSsoIdProviderDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\AccountSsoIdProviderDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAccountSsoIdpAsync
     *
     * Create account SSO Identity Provider
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \DocStudio\Client\Model\AccountSsoIdProviderUpdateDTO $account_sso_id_provider_update_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAccountSsoIdp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAccountSsoIdpAsync($account_uuid, $account_sso_id_provider_update_dto, string $contentType = self::contentTypes['createAccountSsoIdp'][0])
    {
        return $this->createAccountSsoIdpAsyncWithHttpInfo($account_uuid, $account_sso_id_provider_update_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAccountSsoIdpAsyncWithHttpInfo
     *
     * Create account SSO Identity Provider
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \DocStudio\Client\Model\AccountSsoIdProviderUpdateDTO $account_sso_id_provider_update_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAccountSsoIdp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAccountSsoIdpAsyncWithHttpInfo($account_uuid, $account_sso_id_provider_update_dto, string $contentType = self::contentTypes['createAccountSsoIdp'][0])
    {
        $returnType = '\DocStudio\Client\Model\AccountSsoIdProviderDTO';
        $request = $this->createAccountSsoIdpRequest($account_uuid, $account_sso_id_provider_update_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAccountSsoIdp'
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \DocStudio\Client\Model\AccountSsoIdProviderUpdateDTO $account_sso_id_provider_update_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAccountSsoIdp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createAccountSsoIdpRequest($account_uuid, $account_sso_id_provider_update_dto, string $contentType = self::contentTypes['createAccountSsoIdp'][0])
    {

        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling createAccountSsoIdp'
            );
        }

        // verify the required parameter 'account_sso_id_provider_update_dto' is set
        if ($account_sso_id_provider_update_dto === null || (is_array($account_sso_id_provider_update_dto) && count($account_sso_id_provider_update_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_sso_id_provider_update_dto when calling createAccountSsoIdp'
            );
        }


        $resourcePath = '/api/v1/account/{accountUuid}/idp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($account_sso_id_provider_update_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($account_sso_id_provider_update_dto));
            } else {
                $httpBody = $account_sso_id_provider_update_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAccountDomain
     *
     * Delete account domain
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccountDomain'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAccountDomain($account_uuid, $domain_uuid, string $contentType = self::contentTypes['deleteAccountDomain'][0])
    {
        $this->deleteAccountDomainWithHttpInfo($account_uuid, $domain_uuid, $contentType);
    }

    /**
     * Operation deleteAccountDomainWithHttpInfo
     *
     * Delete account domain
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccountDomain'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAccountDomainWithHttpInfo($account_uuid, $domain_uuid, string $contentType = self::contentTypes['deleteAccountDomain'][0])
    {
        $request = $this->deleteAccountDomainRequest($account_uuid, $domain_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAccountDomainAsync
     *
     * Delete account domain
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccountDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAccountDomainAsync($account_uuid, $domain_uuid, string $contentType = self::contentTypes['deleteAccountDomain'][0])
    {
        return $this->deleteAccountDomainAsyncWithHttpInfo($account_uuid, $domain_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAccountDomainAsyncWithHttpInfo
     *
     * Delete account domain
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccountDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAccountDomainAsyncWithHttpInfo($account_uuid, $domain_uuid, string $contentType = self::contentTypes['deleteAccountDomain'][0])
    {
        $returnType = '';
        $request = $this->deleteAccountDomainRequest($account_uuid, $domain_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAccountDomain'
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccountDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAccountDomainRequest($account_uuid, $domain_uuid, string $contentType = self::contentTypes['deleteAccountDomain'][0])
    {

        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling deleteAccountDomain'
            );
        }

        // verify the required parameter 'domain_uuid' is set
        if ($domain_uuid === null || (is_array($domain_uuid) && count($domain_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain_uuid when calling deleteAccountDomain'
            );
        }


        $resourcePath = '/api/v1/account/{accountUuid}/domain/{domainUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }
        // path params
        if ($domain_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'domainUuid' . '}',
                ObjectSerializer::toPathValue($domain_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAccountIdp
     *
     * Delete account SSO IdP
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $idp_uuid IdP UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccountIdp'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAccountIdp($account_uuid, $idp_uuid, string $contentType = self::contentTypes['deleteAccountIdp'][0])
    {
        $this->deleteAccountIdpWithHttpInfo($account_uuid, $idp_uuid, $contentType);
    }

    /**
     * Operation deleteAccountIdpWithHttpInfo
     *
     * Delete account SSO IdP
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $idp_uuid IdP UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccountIdp'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAccountIdpWithHttpInfo($account_uuid, $idp_uuid, string $contentType = self::contentTypes['deleteAccountIdp'][0])
    {
        $request = $this->deleteAccountIdpRequest($account_uuid, $idp_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAccountIdpAsync
     *
     * Delete account SSO IdP
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $idp_uuid IdP UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccountIdp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAccountIdpAsync($account_uuid, $idp_uuid, string $contentType = self::contentTypes['deleteAccountIdp'][0])
    {
        return $this->deleteAccountIdpAsyncWithHttpInfo($account_uuid, $idp_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAccountIdpAsyncWithHttpInfo
     *
     * Delete account SSO IdP
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $idp_uuid IdP UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccountIdp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAccountIdpAsyncWithHttpInfo($account_uuid, $idp_uuid, string $contentType = self::contentTypes['deleteAccountIdp'][0])
    {
        $returnType = '';
        $request = $this->deleteAccountIdpRequest($account_uuid, $idp_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAccountIdp'
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $idp_uuid IdP UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccountIdp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAccountIdpRequest($account_uuid, $idp_uuid, string $contentType = self::contentTypes['deleteAccountIdp'][0])
    {

        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling deleteAccountIdp'
            );
        }

        // verify the required parameter 'idp_uuid' is set
        if ($idp_uuid === null || (is_array($idp_uuid) && count($idp_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $idp_uuid when calling deleteAccountIdp'
            );
        }


        $resourcePath = '/api/v1/account/{accountUuid}/idp/{idpUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }
        // path params
        if ($idp_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'idpUuid' . '}',
                ObjectSerializer::toPathValue($idp_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountDomain
     *
     * Get account domain
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountDomain'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\AccountDomainDTO
     */
    public function getAccountDomain($account_uuid, $domain_uuid, string $contentType = self::contentTypes['getAccountDomain'][0])
    {
        list($response) = $this->getAccountDomainWithHttpInfo($account_uuid, $domain_uuid, $contentType);
        return $response;
    }

    /**
     * Operation getAccountDomainWithHttpInfo
     *
     * Get account domain
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountDomain'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\AccountDomainDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountDomainWithHttpInfo($account_uuid, $domain_uuid, string $contentType = self::contentTypes['getAccountDomain'][0])
    {
        $request = $this->getAccountDomainRequest($account_uuid, $domain_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DocStudio\Client\Model\AccountDomainDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\AccountDomainDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\AccountDomainDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\AccountDomainDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\AccountDomainDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountDomainAsync
     *
     * Get account domain
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountDomainAsync($account_uuid, $domain_uuid, string $contentType = self::contentTypes['getAccountDomain'][0])
    {
        return $this->getAccountDomainAsyncWithHttpInfo($account_uuid, $domain_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountDomainAsyncWithHttpInfo
     *
     * Get account domain
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountDomainAsyncWithHttpInfo($account_uuid, $domain_uuid, string $contentType = self::contentTypes['getAccountDomain'][0])
    {
        $returnType = '\DocStudio\Client\Model\AccountDomainDTO';
        $request = $this->getAccountDomainRequest($account_uuid, $domain_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountDomain'
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAccountDomainRequest($account_uuid, $domain_uuid, string $contentType = self::contentTypes['getAccountDomain'][0])
    {

        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling getAccountDomain'
            );
        }

        // verify the required parameter 'domain_uuid' is set
        if ($domain_uuid === null || (is_array($domain_uuid) && count($domain_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain_uuid when calling getAccountDomain'
            );
        }


        $resourcePath = '/api/v1/account/{accountUuid}/domain/{domainUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }
        // path params
        if ($domain_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'domainUuid' . '}',
                ObjectSerializer::toPathValue($domain_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountDomains
     *
     * Get paged account domains list
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     * @param  string $keyword Domain name or part of name (optional)
     * @param  string $status Domain status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountDomains'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\PageDTOAccountDomainDTO
     */
    public function getAccountDomains($account_uuid, $offset = 0, $limit = 25, $keyword = null, $status = null, string $contentType = self::contentTypes['getAccountDomains'][0])
    {
        list($response) = $this->getAccountDomainsWithHttpInfo($account_uuid, $offset, $limit, $keyword, $status, $contentType);
        return $response;
    }

    /**
     * Operation getAccountDomainsWithHttpInfo
     *
     * Get paged account domains list
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     * @param  string $keyword Domain name or part of name (optional)
     * @param  string $status Domain status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountDomains'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\PageDTOAccountDomainDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountDomainsWithHttpInfo($account_uuid, $offset = 0, $limit = 25, $keyword = null, $status = null, string $contentType = self::contentTypes['getAccountDomains'][0])
    {
        $request = $this->getAccountDomainsRequest($account_uuid, $offset, $limit, $keyword, $status, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DocStudio\Client\Model\PageDTOAccountDomainDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\PageDTOAccountDomainDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\PageDTOAccountDomainDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\PageDTOAccountDomainDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\PageDTOAccountDomainDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountDomainsAsync
     *
     * Get paged account domains list
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     * @param  string $keyword Domain name or part of name (optional)
     * @param  string $status Domain status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountDomains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountDomainsAsync($account_uuid, $offset = 0, $limit = 25, $keyword = null, $status = null, string $contentType = self::contentTypes['getAccountDomains'][0])
    {
        return $this->getAccountDomainsAsyncWithHttpInfo($account_uuid, $offset, $limit, $keyword, $status, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountDomainsAsyncWithHttpInfo
     *
     * Get paged account domains list
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     * @param  string $keyword Domain name or part of name (optional)
     * @param  string $status Domain status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountDomains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountDomainsAsyncWithHttpInfo($account_uuid, $offset = 0, $limit = 25, $keyword = null, $status = null, string $contentType = self::contentTypes['getAccountDomains'][0])
    {
        $returnType = '\DocStudio\Client\Model\PageDTOAccountDomainDTO';
        $request = $this->getAccountDomainsRequest($account_uuid, $offset, $limit, $keyword, $status, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountDomains'
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     * @param  string $keyword Domain name or part of name (optional)
     * @param  string $status Domain status (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountDomains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAccountDomainsRequest($account_uuid, $offset = 0, $limit = 25, $keyword = null, $status = null, string $contentType = self::contentTypes['getAccountDomains'][0])
    {

        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling getAccountDomains'
            );
        }






        $resourcePath = '/api/v1/account/{accountUuid}/domain';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $keyword,
            'keyword', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountIdp
     *
     * Get account SSO IdP
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $idp_uuid IdP UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountIdp'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\AccountSsoIdProviderDTO
     */
    public function getAccountIdp($account_uuid, $idp_uuid, string $contentType = self::contentTypes['getAccountIdp'][0])
    {
        list($response) = $this->getAccountIdpWithHttpInfo($account_uuid, $idp_uuid, $contentType);
        return $response;
    }

    /**
     * Operation getAccountIdpWithHttpInfo
     *
     * Get account SSO IdP
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $idp_uuid IdP UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountIdp'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\AccountSsoIdProviderDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountIdpWithHttpInfo($account_uuid, $idp_uuid, string $contentType = self::contentTypes['getAccountIdp'][0])
    {
        $request = $this->getAccountIdpRequest($account_uuid, $idp_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DocStudio\Client\Model\AccountSsoIdProviderDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\AccountSsoIdProviderDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\AccountSsoIdProviderDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\AccountSsoIdProviderDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\AccountSsoIdProviderDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountIdpAsync
     *
     * Get account SSO IdP
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $idp_uuid IdP UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountIdp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountIdpAsync($account_uuid, $idp_uuid, string $contentType = self::contentTypes['getAccountIdp'][0])
    {
        return $this->getAccountIdpAsyncWithHttpInfo($account_uuid, $idp_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountIdpAsyncWithHttpInfo
     *
     * Get account SSO IdP
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $idp_uuid IdP UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountIdp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountIdpAsyncWithHttpInfo($account_uuid, $idp_uuid, string $contentType = self::contentTypes['getAccountIdp'][0])
    {
        $returnType = '\DocStudio\Client\Model\AccountSsoIdProviderDTO';
        $request = $this->getAccountIdpRequest($account_uuid, $idp_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountIdp'
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $idp_uuid IdP UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountIdp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAccountIdpRequest($account_uuid, $idp_uuid, string $contentType = self::contentTypes['getAccountIdp'][0])
    {

        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling getAccountIdp'
            );
        }

        // verify the required parameter 'idp_uuid' is set
        if ($idp_uuid === null || (is_array($idp_uuid) && count($idp_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $idp_uuid when calling getAccountIdp'
            );
        }


        $resourcePath = '/api/v1/account/{accountUuid}/idp/{idpUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }
        // path params
        if ($idp_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'idpUuid' . '}',
                ObjectSerializer::toPathValue($idp_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllAccountIdps
     *
     * Get all account SSO IdPs
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllAccountIdps'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\AccountSsoIdProviderShortDTO[]
     */
    public function getAllAccountIdps($account_uuid, string $contentType = self::contentTypes['getAllAccountIdps'][0])
    {
        list($response) = $this->getAllAccountIdpsWithHttpInfo($account_uuid, $contentType);
        return $response;
    }

    /**
     * Operation getAllAccountIdpsWithHttpInfo
     *
     * Get all account SSO IdPs
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllAccountIdps'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\AccountSsoIdProviderShortDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllAccountIdpsWithHttpInfo($account_uuid, string $contentType = self::contentTypes['getAllAccountIdps'][0])
    {
        $request = $this->getAllAccountIdpsRequest($account_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DocStudio\Client\Model\AccountSsoIdProviderShortDTO[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\AccountSsoIdProviderShortDTO[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\AccountSsoIdProviderShortDTO[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\AccountSsoIdProviderShortDTO[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\AccountSsoIdProviderShortDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllAccountIdpsAsync
     *
     * Get all account SSO IdPs
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllAccountIdps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllAccountIdpsAsync($account_uuid, string $contentType = self::contentTypes['getAllAccountIdps'][0])
    {
        return $this->getAllAccountIdpsAsyncWithHttpInfo($account_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllAccountIdpsAsyncWithHttpInfo
     *
     * Get all account SSO IdPs
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllAccountIdps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllAccountIdpsAsyncWithHttpInfo($account_uuid, string $contentType = self::contentTypes['getAllAccountIdps'][0])
    {
        $returnType = '\DocStudio\Client\Model\AccountSsoIdProviderShortDTO[]';
        $request = $this->getAllAccountIdpsRequest($account_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllAccountIdps'
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllAccountIdps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllAccountIdpsRequest($account_uuid, string $contentType = self::contentTypes['getAllAccountIdps'][0])
    {

        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling getAllAccountIdps'
            );
        }


        $resourcePath = '/api/v1/account/{accountUuid}/idp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAccountDomain
     *
     * Update account domain
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     * @param  \DocStudio\Client\Model\AccountDomainUpdateDTO $account_domain_update_dto account_domain_update_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccountDomain'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\AccountDomainDTO
     */
    public function updateAccountDomain($account_uuid, $domain_uuid, $account_domain_update_dto, string $contentType = self::contentTypes['updateAccountDomain'][0])
    {
        list($response) = $this->updateAccountDomainWithHttpInfo($account_uuid, $domain_uuid, $account_domain_update_dto, $contentType);
        return $response;
    }

    /**
     * Operation updateAccountDomainWithHttpInfo
     *
     * Update account domain
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     * @param  \DocStudio\Client\Model\AccountDomainUpdateDTO $account_domain_update_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccountDomain'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\AccountDomainDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAccountDomainWithHttpInfo($account_uuid, $domain_uuid, $account_domain_update_dto, string $contentType = self::contentTypes['updateAccountDomain'][0])
    {
        $request = $this->updateAccountDomainRequest($account_uuid, $domain_uuid, $account_domain_update_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DocStudio\Client\Model\AccountDomainDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\AccountDomainDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\AccountDomainDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\AccountDomainDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\AccountDomainDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAccountDomainAsync
     *
     * Update account domain
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     * @param  \DocStudio\Client\Model\AccountDomainUpdateDTO $account_domain_update_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccountDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAccountDomainAsync($account_uuid, $domain_uuid, $account_domain_update_dto, string $contentType = self::contentTypes['updateAccountDomain'][0])
    {
        return $this->updateAccountDomainAsyncWithHttpInfo($account_uuid, $domain_uuid, $account_domain_update_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAccountDomainAsyncWithHttpInfo
     *
     * Update account domain
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     * @param  \DocStudio\Client\Model\AccountDomainUpdateDTO $account_domain_update_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccountDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAccountDomainAsyncWithHttpInfo($account_uuid, $domain_uuid, $account_domain_update_dto, string $contentType = self::contentTypes['updateAccountDomain'][0])
    {
        $returnType = '\DocStudio\Client\Model\AccountDomainDTO';
        $request = $this->updateAccountDomainRequest($account_uuid, $domain_uuid, $account_domain_update_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAccountDomain'
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     * @param  \DocStudio\Client\Model\AccountDomainUpdateDTO $account_domain_update_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccountDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateAccountDomainRequest($account_uuid, $domain_uuid, $account_domain_update_dto, string $contentType = self::contentTypes['updateAccountDomain'][0])
    {

        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling updateAccountDomain'
            );
        }

        // verify the required parameter 'domain_uuid' is set
        if ($domain_uuid === null || (is_array($domain_uuid) && count($domain_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain_uuid when calling updateAccountDomain'
            );
        }

        // verify the required parameter 'account_domain_update_dto' is set
        if ($account_domain_update_dto === null || (is_array($account_domain_update_dto) && count($account_domain_update_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_domain_update_dto when calling updateAccountDomain'
            );
        }


        $resourcePath = '/api/v1/account/{accountUuid}/domain/{domainUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }
        // path params
        if ($domain_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'domainUuid' . '}',
                ObjectSerializer::toPathValue($domain_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($account_domain_update_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($account_domain_update_dto));
            } else {
                $httpBody = $account_domain_update_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAccountSsoIdp
     *
     * Update account SSO Identity Provider
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $idp_uuid IdP UUID (required)
     * @param  \DocStudio\Client\Model\AccountSsoIdProviderUpdateDTO $account_sso_id_provider_update_dto account_sso_id_provider_update_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccountSsoIdp'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\AccountSsoIdProviderDTO
     */
    public function updateAccountSsoIdp($account_uuid, $idp_uuid, $account_sso_id_provider_update_dto, string $contentType = self::contentTypes['updateAccountSsoIdp'][0])
    {
        list($response) = $this->updateAccountSsoIdpWithHttpInfo($account_uuid, $idp_uuid, $account_sso_id_provider_update_dto, $contentType);
        return $response;
    }

    /**
     * Operation updateAccountSsoIdpWithHttpInfo
     *
     * Update account SSO Identity Provider
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $idp_uuid IdP UUID (required)
     * @param  \DocStudio\Client\Model\AccountSsoIdProviderUpdateDTO $account_sso_id_provider_update_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccountSsoIdp'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\AccountSsoIdProviderDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAccountSsoIdpWithHttpInfo($account_uuid, $idp_uuid, $account_sso_id_provider_update_dto, string $contentType = self::contentTypes['updateAccountSsoIdp'][0])
    {
        $request = $this->updateAccountSsoIdpRequest($account_uuid, $idp_uuid, $account_sso_id_provider_update_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DocStudio\Client\Model\AccountSsoIdProviderDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\AccountSsoIdProviderDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\AccountSsoIdProviderDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\AccountSsoIdProviderDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\AccountSsoIdProviderDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAccountSsoIdpAsync
     *
     * Update account SSO Identity Provider
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $idp_uuid IdP UUID (required)
     * @param  \DocStudio\Client\Model\AccountSsoIdProviderUpdateDTO $account_sso_id_provider_update_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccountSsoIdp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAccountSsoIdpAsync($account_uuid, $idp_uuid, $account_sso_id_provider_update_dto, string $contentType = self::contentTypes['updateAccountSsoIdp'][0])
    {
        return $this->updateAccountSsoIdpAsyncWithHttpInfo($account_uuid, $idp_uuid, $account_sso_id_provider_update_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAccountSsoIdpAsyncWithHttpInfo
     *
     * Update account SSO Identity Provider
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $idp_uuid IdP UUID (required)
     * @param  \DocStudio\Client\Model\AccountSsoIdProviderUpdateDTO $account_sso_id_provider_update_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccountSsoIdp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAccountSsoIdpAsyncWithHttpInfo($account_uuid, $idp_uuid, $account_sso_id_provider_update_dto, string $contentType = self::contentTypes['updateAccountSsoIdp'][0])
    {
        $returnType = '\DocStudio\Client\Model\AccountSsoIdProviderDTO';
        $request = $this->updateAccountSsoIdpRequest($account_uuid, $idp_uuid, $account_sso_id_provider_update_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAccountSsoIdp'
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $idp_uuid IdP UUID (required)
     * @param  \DocStudio\Client\Model\AccountSsoIdProviderUpdateDTO $account_sso_id_provider_update_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccountSsoIdp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateAccountSsoIdpRequest($account_uuid, $idp_uuid, $account_sso_id_provider_update_dto, string $contentType = self::contentTypes['updateAccountSsoIdp'][0])
    {

        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling updateAccountSsoIdp'
            );
        }

        // verify the required parameter 'idp_uuid' is set
        if ($idp_uuid === null || (is_array($idp_uuid) && count($idp_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $idp_uuid when calling updateAccountSsoIdp'
            );
        }

        // verify the required parameter 'account_sso_id_provider_update_dto' is set
        if ($account_sso_id_provider_update_dto === null || (is_array($account_sso_id_provider_update_dto) && count($account_sso_id_provider_update_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_sso_id_provider_update_dto when calling updateAccountSsoIdp'
            );
        }


        $resourcePath = '/api/v1/account/{accountUuid}/idp/{idpUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }
        // path params
        if ($idp_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'idpUuid' . '}',
                ObjectSerializer::toPathValue($idp_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($account_sso_id_provider_update_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($account_sso_id_provider_update_dto));
            } else {
                $httpBody = $account_sso_id_provider_update_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
