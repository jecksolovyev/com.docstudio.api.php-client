<?php
/**
 * AccountDomainControllerApi
 * PHP version 5
 *
 * @category Class
 * @package  Docstudio\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocStudio Api Documentation
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R74.25
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Docstudio\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Docstudio\Client\ApiException;
use Docstudio\Client\Configuration;
use Docstudio\Client\HeaderSelector;
use Docstudio\Client\ObjectSerializer;

/**
 * AccountDomainControllerApi Class Doc Comment
 *
 * @category Class
 * @package  Docstudio\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountDomainControllerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation actionAccountDomain
     *
     * Change account domain status
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     * @param  string $action Action (required)
     * @param  \Docstudio\Client\Model\ChangeDomainStatusDTO $body body (optional)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\AccountDomainDTO
     */
    public function actionAccountDomain($account_uuid, $domain_uuid, $action, $body = null)
    {
        list($response) = $this->actionAccountDomainWithHttpInfo($account_uuid, $domain_uuid, $action, $body);
        return $response;
    }

    /**
     * Operation actionAccountDomainWithHttpInfo
     *
     * Change account domain status
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     * @param  string $action Action (required)
     * @param  \Docstudio\Client\Model\ChangeDomainStatusDTO $body (optional)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\AccountDomainDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function actionAccountDomainWithHttpInfo($account_uuid, $domain_uuid, $action, $body = null)
    {
        $returnType = '\Swagger\Client\Model\AccountDomainDTO';
        $request = $this->actionAccountDomainRequest($account_uuid, $domain_uuid, $action, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AccountDomainDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation actionAccountDomainAsync
     *
     * Change account domain status
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     * @param  string $action Action (required)
     * @param  \Docstudio\Client\Model\ChangeDomainStatusDTO $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function actionAccountDomainAsync($account_uuid, $domain_uuid, $action, $body = null)
    {
        return $this->actionAccountDomainAsyncWithHttpInfo($account_uuid, $domain_uuid, $action, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation actionAccountDomainAsyncWithHttpInfo
     *
     * Change account domain status
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     * @param  string $action Action (required)
     * @param  \Docstudio\Client\Model\ChangeDomainStatusDTO $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function actionAccountDomainAsyncWithHttpInfo($account_uuid, $domain_uuid, $action, $body = null)
    {
        $returnType = '\Swagger\Client\Model\AccountDomainDTO';
        $request = $this->actionAccountDomainRequest($account_uuid, $domain_uuid, $action, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'actionAccountDomain'
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     * @param  string $action Action (required)
     * @param  \Docstudio\Client\Model\ChangeDomainStatusDTO $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function actionAccountDomainRequest($account_uuid, $domain_uuid, $action, $body = null)
    {
        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling actionAccountDomain'
            );
        }
        // verify the required parameter 'domain_uuid' is set
        if ($domain_uuid === null || (is_array($domain_uuid) && count($domain_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain_uuid when calling actionAccountDomain'
            );
        }
        // verify the required parameter 'action' is set
        if ($action === null || (is_array($action) && count($action) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $action when calling actionAccountDomain'
            );
        }

        $resourcePath = '/api/v1/account/{accountUuid}/domain/{domainUuid}/{action}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }
        // path params
        if ($domain_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'domainUuid' . '}',
                ObjectSerializer::toPathValue($domain_uuid),
                $resourcePath
            );
        }
        // path params
        if ($action !== null) {
            $resourcePath = str_replace(
                '{' . 'action' . '}',
                ObjectSerializer::toPathValue($action),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAccountDomain
     *
     * Create account domain
     *
     * @param  \Docstudio\Client\Model\AccountDomainCreateDTO $body body (required)
     * @param  string $account_uuid Account UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\AccountDomainDTO
     */
    public function createAccountDomain($body, $account_uuid)
    {
        list($response) = $this->createAccountDomainWithHttpInfo($body, $account_uuid);
        return $response;
    }

    /**
     * Operation createAccountDomainWithHttpInfo
     *
     * Create account domain
     *
     * @param  \Docstudio\Client\Model\AccountDomainCreateDTO $body (required)
     * @param  string $account_uuid Account UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\AccountDomainDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAccountDomainWithHttpInfo($body, $account_uuid)
    {
        $returnType = '\Swagger\Client\Model\AccountDomainDTO';
        $request = $this->createAccountDomainRequest($body, $account_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AccountDomainDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAccountDomainAsync
     *
     * Create account domain
     *
     * @param  \Docstudio\Client\Model\AccountDomainCreateDTO $body (required)
     * @param  string $account_uuid Account UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAccountDomainAsync($body, $account_uuid)
    {
        return $this->createAccountDomainAsyncWithHttpInfo($body, $account_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAccountDomainAsyncWithHttpInfo
     *
     * Create account domain
     *
     * @param  \Docstudio\Client\Model\AccountDomainCreateDTO $body (required)
     * @param  string $account_uuid Account UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAccountDomainAsyncWithHttpInfo($body, $account_uuid)
    {
        $returnType = '\Swagger\Client\Model\AccountDomainDTO';
        $request = $this->createAccountDomainRequest($body, $account_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAccountDomain'
     *
     * @param  \Docstudio\Client\Model\AccountDomainCreateDTO $body (required)
     * @param  string $account_uuid Account UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAccountDomainRequest($body, $account_uuid)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createAccountDomain'
            );
        }
        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling createAccountDomain'
            );
        }

        $resourcePath = '/api/v1/account/{accountUuid}/domain';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAccountSsoIdp
     *
     * Create account SSO Identity Provider
     *
     * @param  \Docstudio\Client\Model\AccountSsoIdProviderUpdateDTO $body body (required)
     * @param  string $account_uuid Account UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\AccountSsoIdProviderDTO
     */
    public function createAccountSsoIdp($body, $account_uuid)
    {
        list($response) = $this->createAccountSsoIdpWithHttpInfo($body, $account_uuid);
        return $response;
    }

    /**
     * Operation createAccountSsoIdpWithHttpInfo
     *
     * Create account SSO Identity Provider
     *
     * @param  \Docstudio\Client\Model\AccountSsoIdProviderUpdateDTO $body (required)
     * @param  string $account_uuid Account UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\AccountSsoIdProviderDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAccountSsoIdpWithHttpInfo($body, $account_uuid)
    {
        $returnType = '\Swagger\Client\Model\AccountSsoIdProviderDTO';
        $request = $this->createAccountSsoIdpRequest($body, $account_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AccountSsoIdProviderDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAccountSsoIdpAsync
     *
     * Create account SSO Identity Provider
     *
     * @param  \Docstudio\Client\Model\AccountSsoIdProviderUpdateDTO $body (required)
     * @param  string $account_uuid Account UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAccountSsoIdpAsync($body, $account_uuid)
    {
        return $this->createAccountSsoIdpAsyncWithHttpInfo($body, $account_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAccountSsoIdpAsyncWithHttpInfo
     *
     * Create account SSO Identity Provider
     *
     * @param  \Docstudio\Client\Model\AccountSsoIdProviderUpdateDTO $body (required)
     * @param  string $account_uuid Account UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAccountSsoIdpAsyncWithHttpInfo($body, $account_uuid)
    {
        $returnType = '\Swagger\Client\Model\AccountSsoIdProviderDTO';
        $request = $this->createAccountSsoIdpRequest($body, $account_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAccountSsoIdp'
     *
     * @param  \Docstudio\Client\Model\AccountSsoIdProviderUpdateDTO $body (required)
     * @param  string $account_uuid Account UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAccountSsoIdpRequest($body, $account_uuid)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createAccountSsoIdp'
            );
        }
        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling createAccountSsoIdp'
            );
        }

        $resourcePath = '/api/v1/account/{accountUuid}/idp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAccountDomain
     *
     * Delete account domain
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAccountDomain($account_uuid, $domain_uuid)
    {
        $this->deleteAccountDomainWithHttpInfo($account_uuid, $domain_uuid);
    }

    /**
     * Operation deleteAccountDomainWithHttpInfo
     *
     * Delete account domain
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAccountDomainWithHttpInfo($account_uuid, $domain_uuid)
    {
        $returnType = '';
        $request = $this->deleteAccountDomainRequest($account_uuid, $domain_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAccountDomainAsync
     *
     * Delete account domain
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAccountDomainAsync($account_uuid, $domain_uuid)
    {
        return $this->deleteAccountDomainAsyncWithHttpInfo($account_uuid, $domain_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAccountDomainAsyncWithHttpInfo
     *
     * Delete account domain
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAccountDomainAsyncWithHttpInfo($account_uuid, $domain_uuid)
    {
        $returnType = '';
        $request = $this->deleteAccountDomainRequest($account_uuid, $domain_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAccountDomain'
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAccountDomainRequest($account_uuid, $domain_uuid)
    {
        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling deleteAccountDomain'
            );
        }
        // verify the required parameter 'domain_uuid' is set
        if ($domain_uuid === null || (is_array($domain_uuid) && count($domain_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain_uuid when calling deleteAccountDomain'
            );
        }

        $resourcePath = '/api/v1/account/{accountUuid}/domain/{domainUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }
        // path params
        if ($domain_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'domainUuid' . '}',
                ObjectSerializer::toPathValue($domain_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAccountIdp
     *
     * Delete account SSO IdP
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $idp_uuid IdP UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAccountIdp($account_uuid, $idp_uuid)
    {
        $this->deleteAccountIdpWithHttpInfo($account_uuid, $idp_uuid);
    }

    /**
     * Operation deleteAccountIdpWithHttpInfo
     *
     * Delete account SSO IdP
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $idp_uuid IdP UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAccountIdpWithHttpInfo($account_uuid, $idp_uuid)
    {
        $returnType = '';
        $request = $this->deleteAccountIdpRequest($account_uuid, $idp_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAccountIdpAsync
     *
     * Delete account SSO IdP
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $idp_uuid IdP UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAccountIdpAsync($account_uuid, $idp_uuid)
    {
        return $this->deleteAccountIdpAsyncWithHttpInfo($account_uuid, $idp_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAccountIdpAsyncWithHttpInfo
     *
     * Delete account SSO IdP
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $idp_uuid IdP UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAccountIdpAsyncWithHttpInfo($account_uuid, $idp_uuid)
    {
        $returnType = '';
        $request = $this->deleteAccountIdpRequest($account_uuid, $idp_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAccountIdp'
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $idp_uuid IdP UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAccountIdpRequest($account_uuid, $idp_uuid)
    {
        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling deleteAccountIdp'
            );
        }
        // verify the required parameter 'idp_uuid' is set
        if ($idp_uuid === null || (is_array($idp_uuid) && count($idp_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $idp_uuid when calling deleteAccountIdp'
            );
        }

        $resourcePath = '/api/v1/account/{accountUuid}/idp/{idpUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }
        // path params
        if ($idp_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'idpUuid' . '}',
                ObjectSerializer::toPathValue($idp_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountDomain
     *
     * Get account domain
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\AccountDomainDTO
     */
    public function getAccountDomain($account_uuid, $domain_uuid)
    {
        list($response) = $this->getAccountDomainWithHttpInfo($account_uuid, $domain_uuid);
        return $response;
    }

    /**
     * Operation getAccountDomainWithHttpInfo
     *
     * Get account domain
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\AccountDomainDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountDomainWithHttpInfo($account_uuid, $domain_uuid)
    {
        $returnType = '\Swagger\Client\Model\AccountDomainDTO';
        $request = $this->getAccountDomainRequest($account_uuid, $domain_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AccountDomainDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountDomainAsync
     *
     * Get account domain
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountDomainAsync($account_uuid, $domain_uuid)
    {
        return $this->getAccountDomainAsyncWithHttpInfo($account_uuid, $domain_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountDomainAsyncWithHttpInfo
     *
     * Get account domain
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountDomainAsyncWithHttpInfo($account_uuid, $domain_uuid)
    {
        $returnType = '\Swagger\Client\Model\AccountDomainDTO';
        $request = $this->getAccountDomainRequest($account_uuid, $domain_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountDomain'
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAccountDomainRequest($account_uuid, $domain_uuid)
    {
        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling getAccountDomain'
            );
        }
        // verify the required parameter 'domain_uuid' is set
        if ($domain_uuid === null || (is_array($domain_uuid) && count($domain_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain_uuid when calling getAccountDomain'
            );
        }

        $resourcePath = '/api/v1/account/{accountUuid}/domain/{domainUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }
        // path params
        if ($domain_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'domainUuid' . '}',
                ObjectSerializer::toPathValue($domain_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountDomains
     *
     * Get paged account domains list
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     * @param  string $keyword Domain name or part of name (optional)
     * @param  string $status Domain status (optional)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\PageDTOAccountDomainDTO
     */
    public function getAccountDomains($account_uuid, $offset = '0', $limit = '25', $keyword = null, $status = null)
    {
        list($response) = $this->getAccountDomainsWithHttpInfo($account_uuid, $offset, $limit, $keyword, $status);
        return $response;
    }

    /**
     * Operation getAccountDomainsWithHttpInfo
     *
     * Get paged account domains list
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     * @param  string $keyword Domain name or part of name (optional)
     * @param  string $status Domain status (optional)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\PageDTOAccountDomainDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountDomainsWithHttpInfo($account_uuid, $offset = '0', $limit = '25', $keyword = null, $status = null)
    {
        $returnType = '\Swagger\Client\Model\PageDTOAccountDomainDTO';
        $request = $this->getAccountDomainsRequest($account_uuid, $offset, $limit, $keyword, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PageDTOAccountDomainDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountDomainsAsync
     *
     * Get paged account domains list
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     * @param  string $keyword Domain name or part of name (optional)
     * @param  string $status Domain status (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountDomainsAsync($account_uuid, $offset = '0', $limit = '25', $keyword = null, $status = null)
    {
        return $this->getAccountDomainsAsyncWithHttpInfo($account_uuid, $offset, $limit, $keyword, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountDomainsAsyncWithHttpInfo
     *
     * Get paged account domains list
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     * @param  string $keyword Domain name or part of name (optional)
     * @param  string $status Domain status (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountDomainsAsyncWithHttpInfo($account_uuid, $offset = '0', $limit = '25', $keyword = null, $status = null)
    {
        $returnType = '\Swagger\Client\Model\PageDTOAccountDomainDTO';
        $request = $this->getAccountDomainsRequest($account_uuid, $offset, $limit, $keyword, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountDomains'
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     * @param  string $keyword Domain name or part of name (optional)
     * @param  string $status Domain status (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAccountDomainsRequest($account_uuid, $offset = '0', $limit = '25', $keyword = null, $status = null)
    {
        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling getAccountDomains'
            );
        }

        $resourcePath = '/api/v1/account/{accountUuid}/domain';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, 'int32');
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, 'int32');
        }
        // query params
        if ($keyword !== null) {
            $queryParams['keyword'] = ObjectSerializer::toQueryValue($keyword, null);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status, null);
        }

        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountIdp
     *
     * Get account SSO IdP
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $idp_uuid IdP UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\AccountSsoIdProviderDTO
     */
    public function getAccountIdp($account_uuid, $idp_uuid)
    {
        list($response) = $this->getAccountIdpWithHttpInfo($account_uuid, $idp_uuid);
        return $response;
    }

    /**
     * Operation getAccountIdpWithHttpInfo
     *
     * Get account SSO IdP
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $idp_uuid IdP UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\AccountSsoIdProviderDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountIdpWithHttpInfo($account_uuid, $idp_uuid)
    {
        $returnType = '\Swagger\Client\Model\AccountSsoIdProviderDTO';
        $request = $this->getAccountIdpRequest($account_uuid, $idp_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AccountSsoIdProviderDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountIdpAsync
     *
     * Get account SSO IdP
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $idp_uuid IdP UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountIdpAsync($account_uuid, $idp_uuid)
    {
        return $this->getAccountIdpAsyncWithHttpInfo($account_uuid, $idp_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountIdpAsyncWithHttpInfo
     *
     * Get account SSO IdP
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $idp_uuid IdP UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountIdpAsyncWithHttpInfo($account_uuid, $idp_uuid)
    {
        $returnType = '\Swagger\Client\Model\AccountSsoIdProviderDTO';
        $request = $this->getAccountIdpRequest($account_uuid, $idp_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountIdp'
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $idp_uuid IdP UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAccountIdpRequest($account_uuid, $idp_uuid)
    {
        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling getAccountIdp'
            );
        }
        // verify the required parameter 'idp_uuid' is set
        if ($idp_uuid === null || (is_array($idp_uuid) && count($idp_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $idp_uuid when calling getAccountIdp'
            );
        }

        $resourcePath = '/api/v1/account/{accountUuid}/idp/{idpUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }
        // path params
        if ($idp_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'idpUuid' . '}',
                ObjectSerializer::toPathValue($idp_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllAccountIdps
     *
     * Get all account SSO IdPs
     *
     * @param  string $account_uuid Account UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\AccountSsoIdProviderShortDTO[]
     */
    public function getAllAccountIdps($account_uuid)
    {
        list($response) = $this->getAllAccountIdpsWithHttpInfo($account_uuid);
        return $response;
    }

    /**
     * Operation getAllAccountIdpsWithHttpInfo
     *
     * Get all account SSO IdPs
     *
     * @param  string $account_uuid Account UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\AccountSsoIdProviderShortDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllAccountIdpsWithHttpInfo($account_uuid)
    {
        $returnType = '\Swagger\Client\Model\AccountSsoIdProviderShortDTO[]';
        $request = $this->getAllAccountIdpsRequest($account_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AccountSsoIdProviderShortDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllAccountIdpsAsync
     *
     * Get all account SSO IdPs
     *
     * @param  string $account_uuid Account UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllAccountIdpsAsync($account_uuid)
    {
        return $this->getAllAccountIdpsAsyncWithHttpInfo($account_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllAccountIdpsAsyncWithHttpInfo
     *
     * Get all account SSO IdPs
     *
     * @param  string $account_uuid Account UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllAccountIdpsAsyncWithHttpInfo($account_uuid)
    {
        $returnType = '\Swagger\Client\Model\AccountSsoIdProviderShortDTO[]';
        $request = $this->getAllAccountIdpsRequest($account_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllAccountIdps'
     *
     * @param  string $account_uuid Account UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllAccountIdpsRequest($account_uuid)
    {
        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling getAllAccountIdps'
            );
        }

        $resourcePath = '/api/v1/account/{accountUuid}/idp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAccountDomain
     *
     * Update account domain
     *
     * @param  \Docstudio\Client\Model\AccountDomainUpdateDTO $body body (required)
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\AccountDomainDTO
     */
    public function updateAccountDomain($body, $account_uuid, $domain_uuid)
    {
        list($response) = $this->updateAccountDomainWithHttpInfo($body, $account_uuid, $domain_uuid);
        return $response;
    }

    /**
     * Operation updateAccountDomainWithHttpInfo
     *
     * Update account domain
     *
     * @param  \Docstudio\Client\Model\AccountDomainUpdateDTO $body (required)
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\AccountDomainDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAccountDomainWithHttpInfo($body, $account_uuid, $domain_uuid)
    {
        $returnType = '\Swagger\Client\Model\AccountDomainDTO';
        $request = $this->updateAccountDomainRequest($body, $account_uuid, $domain_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AccountDomainDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAccountDomainAsync
     *
     * Update account domain
     *
     * @param  \Docstudio\Client\Model\AccountDomainUpdateDTO $body (required)
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAccountDomainAsync($body, $account_uuid, $domain_uuid)
    {
        return $this->updateAccountDomainAsyncWithHttpInfo($body, $account_uuid, $domain_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAccountDomainAsyncWithHttpInfo
     *
     * Update account domain
     *
     * @param  \Docstudio\Client\Model\AccountDomainUpdateDTO $body (required)
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAccountDomainAsyncWithHttpInfo($body, $account_uuid, $domain_uuid)
    {
        $returnType = '\Swagger\Client\Model\AccountDomainDTO';
        $request = $this->updateAccountDomainRequest($body, $account_uuid, $domain_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAccountDomain'
     *
     * @param  \Docstudio\Client\Model\AccountDomainUpdateDTO $body (required)
     * @param  string $account_uuid Account UUID (required)
     * @param  string $domain_uuid Domain UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAccountDomainRequest($body, $account_uuid, $domain_uuid)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateAccountDomain'
            );
        }
        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling updateAccountDomain'
            );
        }
        // verify the required parameter 'domain_uuid' is set
        if ($domain_uuid === null || (is_array($domain_uuid) && count($domain_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain_uuid when calling updateAccountDomain'
            );
        }

        $resourcePath = '/api/v1/account/{accountUuid}/domain/{domainUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }
        // path params
        if ($domain_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'domainUuid' . '}',
                ObjectSerializer::toPathValue($domain_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAccountSsoIdp
     *
     * Update account SSO Identity Provider
     *
     * @param  \Docstudio\Client\Model\AccountSsoIdProviderUpdateDTO $body body (required)
     * @param  string $account_uuid Account UUID (required)
     * @param  string $idp_uuid IdP UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\AccountSsoIdProviderDTO
     */
    public function updateAccountSsoIdp($body, $account_uuid, $idp_uuid)
    {
        list($response) = $this->updateAccountSsoIdpWithHttpInfo($body, $account_uuid, $idp_uuid);
        return $response;
    }

    /**
     * Operation updateAccountSsoIdpWithHttpInfo
     *
     * Update account SSO Identity Provider
     *
     * @param  \Docstudio\Client\Model\AccountSsoIdProviderUpdateDTO $body (required)
     * @param  string $account_uuid Account UUID (required)
     * @param  string $idp_uuid IdP UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\AccountSsoIdProviderDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAccountSsoIdpWithHttpInfo($body, $account_uuid, $idp_uuid)
    {
        $returnType = '\Swagger\Client\Model\AccountSsoIdProviderDTO';
        $request = $this->updateAccountSsoIdpRequest($body, $account_uuid, $idp_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AccountSsoIdProviderDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAccountSsoIdpAsync
     *
     * Update account SSO Identity Provider
     *
     * @param  \Docstudio\Client\Model\AccountSsoIdProviderUpdateDTO $body (required)
     * @param  string $account_uuid Account UUID (required)
     * @param  string $idp_uuid IdP UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAccountSsoIdpAsync($body, $account_uuid, $idp_uuid)
    {
        return $this->updateAccountSsoIdpAsyncWithHttpInfo($body, $account_uuid, $idp_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAccountSsoIdpAsyncWithHttpInfo
     *
     * Update account SSO Identity Provider
     *
     * @param  \Docstudio\Client\Model\AccountSsoIdProviderUpdateDTO $body (required)
     * @param  string $account_uuid Account UUID (required)
     * @param  string $idp_uuid IdP UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAccountSsoIdpAsyncWithHttpInfo($body, $account_uuid, $idp_uuid)
    {
        $returnType = '\Swagger\Client\Model\AccountSsoIdProviderDTO';
        $request = $this->updateAccountSsoIdpRequest($body, $account_uuid, $idp_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAccountSsoIdp'
     *
     * @param  \Docstudio\Client\Model\AccountSsoIdProviderUpdateDTO $body (required)
     * @param  string $account_uuid Account UUID (required)
     * @param  string $idp_uuid IdP UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAccountSsoIdpRequest($body, $account_uuid, $idp_uuid)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateAccountSsoIdp'
            );
        }
        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling updateAccountSsoIdp'
            );
        }
        // verify the required parameter 'idp_uuid' is set
        if ($idp_uuid === null || (is_array($idp_uuid) && count($idp_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $idp_uuid when calling updateAccountSsoIdp'
            );
        }

        $resourcePath = '/api/v1/account/{accountUuid}/idp/{idpUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }
        // path params
        if ($idp_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'idpUuid' . '}',
                ObjectSerializer::toPathValue($idp_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
