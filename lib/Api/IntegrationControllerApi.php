<?php
/**
 * IntegrationControllerApi
 * PHP version 5
 *
 * @category Class
 * @package  DocStudio\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocStudio Api Documentation
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R75.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocStudio\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use DocStudio\Client\ApiException;
use DocStudio\Client\Configuration;
use DocStudio\Client\HeaderSelector;
use DocStudio\Client\ObjectSerializer;

/**
 * IntegrationControllerApi Class Doc Comment
 *
 * @category Class
 * @package  DocStudio\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IntegrationControllerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation convertBinaryToXML
     *
     * Convert incoming file to XML view
     *
     * @param  string $filename filename, for type detection (required)
     * @param  string $mailbox_uuid Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\IntegrationConvertbinaryBody $body body (optional)
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function convertBinaryToXML($filename, $mailbox_uuid, $body = null)
    {
        list($response) = $this->convertBinaryToXMLWithHttpInfo($filename, $mailbox_uuid, $body);
        return $response;
    }

    /**
     * Operation convertBinaryToXMLWithHttpInfo
     *
     * Convert incoming file to XML view
     *
     * @param  string $filename filename, for type detection (required)
     * @param  string $mailbox_uuid Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\IntegrationConvertbinaryBody $body (optional)
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function convertBinaryToXMLWithHttpInfo($filename, $mailbox_uuid, $body = null)
    {
        $returnType = 'string';
        $request = $this->convertBinaryToXMLRequest($filename, $mailbox_uuid, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation convertBinaryToXMLAsync
     *
     * Convert incoming file to XML view
     *
     * @param  string $filename filename, for type detection (required)
     * @param  string $mailbox_uuid Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\IntegrationConvertbinaryBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertBinaryToXMLAsync($filename, $mailbox_uuid, $body = null)
    {
        return $this->convertBinaryToXMLAsyncWithHttpInfo($filename, $mailbox_uuid, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation convertBinaryToXMLAsyncWithHttpInfo
     *
     * Convert incoming file to XML view
     *
     * @param  string $filename filename, for type detection (required)
     * @param  string $mailbox_uuid Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\IntegrationConvertbinaryBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertBinaryToXMLAsyncWithHttpInfo($filename, $mailbox_uuid, $body = null)
    {
        $returnType = 'string';
        $request = $this->convertBinaryToXMLRequest($filename, $mailbox_uuid, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'convertBinaryToXML'
     *
     * @param  string $filename filename, for type detection (required)
     * @param  string $mailbox_uuid Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  \DocStudio\Client\Model\IntegrationConvertbinaryBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function convertBinaryToXMLRequest($filename, $mailbox_uuid, $body = null)
    {
        // verify the required parameter 'filename' is set
        if ($filename === null || (is_array($filename) && count($filename) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $filename when calling convertBinaryToXML'
            );
        }
        // verify the required parameter 'mailbox_uuid' is set
        if ($mailbox_uuid === null || (is_array($mailbox_uuid) && count($mailbox_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox_uuid when calling convertBinaryToXML'
            );
        }

        $resourcePath = '/api/v1/integration/convert-binary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filename !== null) {
            $queryParams['filename'] = ObjectSerializer::toQueryValue($filename, null);
        }
        // query params
        if ($mailbox_uuid !== null) {
            $queryParams['mailboxUuid'] = ObjectSerializer::toQueryValue($mailbox_uuid, 'uuid');
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createMailboxIntegrationRule
     *
     * Create Mailbox integration rule
     *
     * @param  \DocStudio\Client\Model\IntegrationRuleDTO $body body (required)
     * @param  string $mailbox_uuid Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\IntegrationRuleDTO
     */
    public function createMailboxIntegrationRule($body, $mailbox_uuid)
    {
        list($response) = $this->createMailboxIntegrationRuleWithHttpInfo($body, $mailbox_uuid);
        return $response;
    }

    /**
     * Operation createMailboxIntegrationRuleWithHttpInfo
     *
     * Create Mailbox integration rule
     *
     * @param  \DocStudio\Client\Model\IntegrationRuleDTO $body (required)
     * @param  string $mailbox_uuid Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\IntegrationRuleDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createMailboxIntegrationRuleWithHttpInfo($body, $mailbox_uuid)
    {
        $returnType = '\DocStudio\Client\Model\IntegrationRuleDTO';
        $request = $this->createMailboxIntegrationRuleRequest($body, $mailbox_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\IntegrationRuleDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createMailboxIntegrationRuleAsync
     *
     * Create Mailbox integration rule
     *
     * @param  \DocStudio\Client\Model\IntegrationRuleDTO $body (required)
     * @param  string $mailbox_uuid Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMailboxIntegrationRuleAsync($body, $mailbox_uuid)
    {
        return $this->createMailboxIntegrationRuleAsyncWithHttpInfo($body, $mailbox_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createMailboxIntegrationRuleAsyncWithHttpInfo
     *
     * Create Mailbox integration rule
     *
     * @param  \DocStudio\Client\Model\IntegrationRuleDTO $body (required)
     * @param  string $mailbox_uuid Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMailboxIntegrationRuleAsyncWithHttpInfo($body, $mailbox_uuid)
    {
        $returnType = '\DocStudio\Client\Model\IntegrationRuleDTO';
        $request = $this->createMailboxIntegrationRuleRequest($body, $mailbox_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createMailboxIntegrationRule'
     *
     * @param  \DocStudio\Client\Model\IntegrationRuleDTO $body (required)
     * @param  string $mailbox_uuid Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createMailboxIntegrationRuleRequest($body, $mailbox_uuid)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createMailboxIntegrationRule'
            );
        }
        // verify the required parameter 'mailbox_uuid' is set
        if ($mailbox_uuid === null || (is_array($mailbox_uuid) && count($mailbox_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox_uuid when calling createMailboxIntegrationRule'
            );
        }

        $resourcePath = '/api/v1/integration/rule/{mailboxUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($mailbox_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'mailboxUuid' . '}',
                ObjectSerializer::toPathValue($mailbox_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteMailboxIntegrationRule
     *
     * Delete Mailbox integration rule
     *
     * @param  string $integration_rule_uuid UUID of integration rule (required)
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteMailboxIntegrationRule($integration_rule_uuid)
    {
        $this->deleteMailboxIntegrationRuleWithHttpInfo($integration_rule_uuid);
    }

    /**
     * Operation deleteMailboxIntegrationRuleWithHttpInfo
     *
     * Delete Mailbox integration rule
     *
     * @param  string $integration_rule_uuid UUID of integration rule (required)
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteMailboxIntegrationRuleWithHttpInfo($integration_rule_uuid)
    {
        $returnType = '';
        $request = $this->deleteMailboxIntegrationRuleRequest($integration_rule_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteMailboxIntegrationRuleAsync
     *
     * Delete Mailbox integration rule
     *
     * @param  string $integration_rule_uuid UUID of integration rule (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMailboxIntegrationRuleAsync($integration_rule_uuid)
    {
        return $this->deleteMailboxIntegrationRuleAsyncWithHttpInfo($integration_rule_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteMailboxIntegrationRuleAsyncWithHttpInfo
     *
     * Delete Mailbox integration rule
     *
     * @param  string $integration_rule_uuid UUID of integration rule (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMailboxIntegrationRuleAsyncWithHttpInfo($integration_rule_uuid)
    {
        $returnType = '';
        $request = $this->deleteMailboxIntegrationRuleRequest($integration_rule_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteMailboxIntegrationRule'
     *
     * @param  string $integration_rule_uuid UUID of integration rule (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteMailboxIntegrationRuleRequest($integration_rule_uuid)
    {
        // verify the required parameter 'integration_rule_uuid' is set
        if ($integration_rule_uuid === null || (is_array($integration_rule_uuid) && count($integration_rule_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $integration_rule_uuid when calling deleteMailboxIntegrationRule'
            );
        }

        $resourcePath = '/api/v1/integration/rule/{integrationRuleUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($integration_rule_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'integrationRuleUuid' . '}',
                ObjectSerializer::toPathValue($integration_rule_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation execute
     *
     * Execute conversion map and generate file name (if pattern rule defined)
     *
     * @param  \DocStudio\Client\Model\IntegrationRuleRequestDTO $body body (required)
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\IntegrationRuleResponseDTO
     */
    public function execute($body)
    {
        list($response) = $this->executeWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation executeWithHttpInfo
     *
     * Execute conversion map and generate file name (if pattern rule defined)
     *
     * @param  \DocStudio\Client\Model\IntegrationRuleRequestDTO $body (required)
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\IntegrationRuleResponseDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function executeWithHttpInfo($body)
    {
        $returnType = '\DocStudio\Client\Model\IntegrationRuleResponseDTO';
        $request = $this->executeRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\IntegrationRuleResponseDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation executeAsync
     *
     * Execute conversion map and generate file name (if pattern rule defined)
     *
     * @param  \DocStudio\Client\Model\IntegrationRuleRequestDTO $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function executeAsync($body)
    {
        return $this->executeAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation executeAsyncWithHttpInfo
     *
     * Execute conversion map and generate file name (if pattern rule defined)
     *
     * @param  \DocStudio\Client\Model\IntegrationRuleRequestDTO $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function executeAsyncWithHttpInfo($body)
    {
        $returnType = '\DocStudio\Client\Model\IntegrationRuleResponseDTO';
        $request = $this->executeRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'execute'
     *
     * @param  \DocStudio\Client\Model\IntegrationRuleRequestDTO $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function executeRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling execute'
            );
        }

        $resourcePath = '/api/v1/integration/rule/execute';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation generate
     *
     * Generate envelope XML by template
     *
     * @param  string $template_uuid Template UUID (required)
     * @param  string $mailbox_uuid Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $version_uuid Template version UUID (optional)
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\DataMap
     */
    public function generate($template_uuid, $mailbox_uuid, $version_uuid = null)
    {
        list($response) = $this->generateWithHttpInfo($template_uuid, $mailbox_uuid, $version_uuid);
        return $response;
    }

    /**
     * Operation generateWithHttpInfo
     *
     * Generate envelope XML by template
     *
     * @param  string $template_uuid Template UUID (required)
     * @param  string $mailbox_uuid Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $version_uuid Template version UUID (optional)
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\DataMap, HTTP status code, HTTP response headers (array of strings)
     */
    public function generateWithHttpInfo($template_uuid, $mailbox_uuid, $version_uuid = null)
    {
        $returnType = '\DocStudio\Client\Model\DataMap';
        $request = $this->generateRequest($template_uuid, $mailbox_uuid, $version_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\DataMap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation generateAsync
     *
     * Generate envelope XML by template
     *
     * @param  string $template_uuid Template UUID (required)
     * @param  string $mailbox_uuid Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $version_uuid Template version UUID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateAsync($template_uuid, $mailbox_uuid, $version_uuid = null)
    {
        return $this->generateAsyncWithHttpInfo($template_uuid, $mailbox_uuid, $version_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generateAsyncWithHttpInfo
     *
     * Generate envelope XML by template
     *
     * @param  string $template_uuid Template UUID (required)
     * @param  string $mailbox_uuid Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $version_uuid Template version UUID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateAsyncWithHttpInfo($template_uuid, $mailbox_uuid, $version_uuid = null)
    {
        $returnType = '\DocStudio\Client\Model\DataMap';
        $request = $this->generateRequest($template_uuid, $mailbox_uuid, $version_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'generate'
     *
     * @param  string $template_uuid Template UUID (required)
     * @param  string $mailbox_uuid Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $version_uuid Template version UUID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function generateRequest($template_uuid, $mailbox_uuid, $version_uuid = null)
    {
        // verify the required parameter 'template_uuid' is set
        if ($template_uuid === null || (is_array($template_uuid) && count($template_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $template_uuid when calling generate'
            );
        }
        // verify the required parameter 'mailbox_uuid' is set
        if ($mailbox_uuid === null || (is_array($mailbox_uuid) && count($mailbox_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox_uuid when calling generate'
            );
        }

        $resourcePath = '/api/v1/integration/source/{templateUuid}/{mailboxUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($version_uuid !== null) {
            $queryParams['versionUuid'] = ObjectSerializer::toQueryValue($version_uuid, 'uuid');
        }

        // path params
        if ($template_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'templateUuid' . '}',
                ObjectSerializer::toPathValue($template_uuid),
                $resourcePath
            );
        }
        // path params
        if ($mailbox_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'mailboxUuid' . '}',
                ObjectSerializer::toPathValue($mailbox_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMailboxIntegration
     *
     * Get Mailbox integration
     *
     * @param  string $mailbox_uuid Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\IntegrationDTO
     */
    public function getMailboxIntegration($mailbox_uuid)
    {
        list($response) = $this->getMailboxIntegrationWithHttpInfo($mailbox_uuid);
        return $response;
    }

    /**
     * Operation getMailboxIntegrationWithHttpInfo
     *
     * Get Mailbox integration
     *
     * @param  string $mailbox_uuid Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\IntegrationDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMailboxIntegrationWithHttpInfo($mailbox_uuid)
    {
        $returnType = '\DocStudio\Client\Model\IntegrationDTO';
        $request = $this->getMailboxIntegrationRequest($mailbox_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\IntegrationDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMailboxIntegrationAsync
     *
     * Get Mailbox integration
     *
     * @param  string $mailbox_uuid Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMailboxIntegrationAsync($mailbox_uuid)
    {
        return $this->getMailboxIntegrationAsyncWithHttpInfo($mailbox_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMailboxIntegrationAsyncWithHttpInfo
     *
     * Get Mailbox integration
     *
     * @param  string $mailbox_uuid Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMailboxIntegrationAsyncWithHttpInfo($mailbox_uuid)
    {
        $returnType = '\DocStudio\Client\Model\IntegrationDTO';
        $request = $this->getMailboxIntegrationRequest($mailbox_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMailboxIntegration'
     *
     * @param  string $mailbox_uuid Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMailboxIntegrationRequest($mailbox_uuid)
    {
        // verify the required parameter 'mailbox_uuid' is set
        if ($mailbox_uuid === null || (is_array($mailbox_uuid) && count($mailbox_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox_uuid when calling getMailboxIntegration'
            );
        }

        $resourcePath = '/api/v1/integration/{mailboxUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($mailbox_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'mailboxUuid' . '}',
                ObjectSerializer::toPathValue($mailbox_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMailboxIntegrationRule
     *
     * Get Mailbox integration rule
     *
     * @param  string $integration_rule_uuid UUID of integration rule (required)
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\IntegrationRuleDTO
     */
    public function getMailboxIntegrationRule($integration_rule_uuid)
    {
        list($response) = $this->getMailboxIntegrationRuleWithHttpInfo($integration_rule_uuid);
        return $response;
    }

    /**
     * Operation getMailboxIntegrationRuleWithHttpInfo
     *
     * Get Mailbox integration rule
     *
     * @param  string $integration_rule_uuid UUID of integration rule (required)
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\IntegrationRuleDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMailboxIntegrationRuleWithHttpInfo($integration_rule_uuid)
    {
        $returnType = '\DocStudio\Client\Model\IntegrationRuleDTO';
        $request = $this->getMailboxIntegrationRuleRequest($integration_rule_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\IntegrationRuleDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMailboxIntegrationRuleAsync
     *
     * Get Mailbox integration rule
     *
     * @param  string $integration_rule_uuid UUID of integration rule (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMailboxIntegrationRuleAsync($integration_rule_uuid)
    {
        return $this->getMailboxIntegrationRuleAsyncWithHttpInfo($integration_rule_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMailboxIntegrationRuleAsyncWithHttpInfo
     *
     * Get Mailbox integration rule
     *
     * @param  string $integration_rule_uuid UUID of integration rule (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMailboxIntegrationRuleAsyncWithHttpInfo($integration_rule_uuid)
    {
        $returnType = '\DocStudio\Client\Model\IntegrationRuleDTO';
        $request = $this->getMailboxIntegrationRuleRequest($integration_rule_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMailboxIntegrationRule'
     *
     * @param  string $integration_rule_uuid UUID of integration rule (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMailboxIntegrationRuleRequest($integration_rule_uuid)
    {
        // verify the required parameter 'integration_rule_uuid' is set
        if ($integration_rule_uuid === null || (is_array($integration_rule_uuid) && count($integration_rule_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $integration_rule_uuid when calling getMailboxIntegrationRule'
            );
        }

        $resourcePath = '/api/v1/integration/rule/{integrationRuleUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($integration_rule_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'integrationRuleUuid' . '}',
                ObjectSerializer::toPathValue($integration_rule_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMailboxIntegrationRules
     *
     * Get Mailbox integration rules
     *
     * @param  string $mailbox_uuid Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\IntegrationRuleDTO[]
     */
    public function getMailboxIntegrationRules($mailbox_uuid)
    {
        list($response) = $this->getMailboxIntegrationRulesWithHttpInfo($mailbox_uuid);
        return $response;
    }

    /**
     * Operation getMailboxIntegrationRulesWithHttpInfo
     *
     * Get Mailbox integration rules
     *
     * @param  string $mailbox_uuid Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\IntegrationRuleDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getMailboxIntegrationRulesWithHttpInfo($mailbox_uuid)
    {
        $returnType = '\DocStudio\Client\Model\IntegrationRuleDTO[]';
        $request = $this->getMailboxIntegrationRulesRequest($mailbox_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\IntegrationRuleDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMailboxIntegrationRulesAsync
     *
     * Get Mailbox integration rules
     *
     * @param  string $mailbox_uuid Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMailboxIntegrationRulesAsync($mailbox_uuid)
    {
        return $this->getMailboxIntegrationRulesAsyncWithHttpInfo($mailbox_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMailboxIntegrationRulesAsyncWithHttpInfo
     *
     * Get Mailbox integration rules
     *
     * @param  string $mailbox_uuid Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMailboxIntegrationRulesAsyncWithHttpInfo($mailbox_uuid)
    {
        $returnType = '\DocStudio\Client\Model\IntegrationRuleDTO[]';
        $request = $this->getMailboxIntegrationRulesRequest($mailbox_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMailboxIntegrationRules'
     *
     * @param  string $mailbox_uuid Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMailboxIntegrationRulesRequest($mailbox_uuid)
    {
        // verify the required parameter 'mailbox_uuid' is set
        if ($mailbox_uuid === null || (is_array($mailbox_uuid) && count($mailbox_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox_uuid when calling getMailboxIntegrationRules'
            );
        }

        $resourcePath = '/api/v1/integration/rules/{mailboxUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($mailbox_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'mailboxUuid' . '}',
                ObjectSerializer::toPathValue($mailbox_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation newPassword
     *
     * Generate and save new password
     *
     * @param  string $mailbox_uuid Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function newPassword($mailbox_uuid)
    {
        list($response) = $this->newPasswordWithHttpInfo($mailbox_uuid);
        return $response;
    }

    /**
     * Operation newPasswordWithHttpInfo
     *
     * Generate and save new password
     *
     * @param  string $mailbox_uuid Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function newPasswordWithHttpInfo($mailbox_uuid)
    {
        $returnType = 'object';
        $request = $this->newPasswordRequest($mailbox_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation newPasswordAsync
     *
     * Generate and save new password
     *
     * @param  string $mailbox_uuid Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function newPasswordAsync($mailbox_uuid)
    {
        return $this->newPasswordAsyncWithHttpInfo($mailbox_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation newPasswordAsyncWithHttpInfo
     *
     * Generate and save new password
     *
     * @param  string $mailbox_uuid Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function newPasswordAsyncWithHttpInfo($mailbox_uuid)
    {
        $returnType = 'object';
        $request = $this->newPasswordRequest($mailbox_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'newPassword'
     *
     * @param  string $mailbox_uuid Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function newPasswordRequest($mailbox_uuid)
    {
        // verify the required parameter 'mailbox_uuid' is set
        if ($mailbox_uuid === null || (is_array($mailbox_uuid) && count($mailbox_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox_uuid when calling newPassword'
            );
        }

        $resourcePath = '/api/v1/integration/new-password/{mailboxUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($mailbox_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'mailboxUuid' . '}',
                ObjectSerializer::toPathValue($mailbox_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation saveMailboxIntegration
     *
     * Create/update Mailbox integration
     *
     * @param  \DocStudio\Client\Model\IntegrationDTO $body body (required)
     * @param  string $mailbox_uuid Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function saveMailboxIntegration($body, $mailbox_uuid)
    {
        $this->saveMailboxIntegrationWithHttpInfo($body, $mailbox_uuid);
    }

    /**
     * Operation saveMailboxIntegrationWithHttpInfo
     *
     * Create/update Mailbox integration
     *
     * @param  \DocStudio\Client\Model\IntegrationDTO $body (required)
     * @param  string $mailbox_uuid Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function saveMailboxIntegrationWithHttpInfo($body, $mailbox_uuid)
    {
        $returnType = '';
        $request = $this->saveMailboxIntegrationRequest($body, $mailbox_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation saveMailboxIntegrationAsync
     *
     * Create/update Mailbox integration
     *
     * @param  \DocStudio\Client\Model\IntegrationDTO $body (required)
     * @param  string $mailbox_uuid Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saveMailboxIntegrationAsync($body, $mailbox_uuid)
    {
        return $this->saveMailboxIntegrationAsyncWithHttpInfo($body, $mailbox_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation saveMailboxIntegrationAsyncWithHttpInfo
     *
     * Create/update Mailbox integration
     *
     * @param  \DocStudio\Client\Model\IntegrationDTO $body (required)
     * @param  string $mailbox_uuid Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saveMailboxIntegrationAsyncWithHttpInfo($body, $mailbox_uuid)
    {
        $returnType = '';
        $request = $this->saveMailboxIntegrationRequest($body, $mailbox_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'saveMailboxIntegration'
     *
     * @param  \DocStudio\Client\Model\IntegrationDTO $body (required)
     * @param  string $mailbox_uuid Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function saveMailboxIntegrationRequest($body, $mailbox_uuid)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling saveMailboxIntegration'
            );
        }
        // verify the required parameter 'mailbox_uuid' is set
        if ($mailbox_uuid === null || (is_array($mailbox_uuid) && count($mailbox_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox_uuid when calling saveMailboxIntegration'
            );
        }

        $resourcePath = '/api/v1/integration/{mailboxUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($mailbox_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'mailboxUuid' . '}',
                ObjectSerializer::toPathValue($mailbox_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateMailboxIntegrationRule
     *
     * Update Mailbox integration rule
     *
     * @param  \DocStudio\Client\Model\IntegrationRuleDTO $body body (required)
     * @param  string $integration_rule_uuid UUID of integration rule (required)
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\IntegrationRuleDTO
     */
    public function updateMailboxIntegrationRule($body, $integration_rule_uuid)
    {
        list($response) = $this->updateMailboxIntegrationRuleWithHttpInfo($body, $integration_rule_uuid);
        return $response;
    }

    /**
     * Operation updateMailboxIntegrationRuleWithHttpInfo
     *
     * Update Mailbox integration rule
     *
     * @param  \DocStudio\Client\Model\IntegrationRuleDTO $body (required)
     * @param  string $integration_rule_uuid UUID of integration rule (required)
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\IntegrationRuleDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateMailboxIntegrationRuleWithHttpInfo($body, $integration_rule_uuid)
    {
        $returnType = '\DocStudio\Client\Model\IntegrationRuleDTO';
        $request = $this->updateMailboxIntegrationRuleRequest($body, $integration_rule_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\IntegrationRuleDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateMailboxIntegrationRuleAsync
     *
     * Update Mailbox integration rule
     *
     * @param  \DocStudio\Client\Model\IntegrationRuleDTO $body (required)
     * @param  string $integration_rule_uuid UUID of integration rule (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateMailboxIntegrationRuleAsync($body, $integration_rule_uuid)
    {
        return $this->updateMailboxIntegrationRuleAsyncWithHttpInfo($body, $integration_rule_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateMailboxIntegrationRuleAsyncWithHttpInfo
     *
     * Update Mailbox integration rule
     *
     * @param  \DocStudio\Client\Model\IntegrationRuleDTO $body (required)
     * @param  string $integration_rule_uuid UUID of integration rule (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateMailboxIntegrationRuleAsyncWithHttpInfo($body, $integration_rule_uuid)
    {
        $returnType = '\DocStudio\Client\Model\IntegrationRuleDTO';
        $request = $this->updateMailboxIntegrationRuleRequest($body, $integration_rule_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateMailboxIntegrationRule'
     *
     * @param  \DocStudio\Client\Model\IntegrationRuleDTO $body (required)
     * @param  string $integration_rule_uuid UUID of integration rule (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateMailboxIntegrationRuleRequest($body, $integration_rule_uuid)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateMailboxIntegrationRule'
            );
        }
        // verify the required parameter 'integration_rule_uuid' is set
        if ($integration_rule_uuid === null || (is_array($integration_rule_uuid) && count($integration_rule_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $integration_rule_uuid when calling updateMailboxIntegrationRule'
            );
        }

        $resourcePath = '/api/v1/integration/rule/{integrationRuleUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($integration_rule_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'integrationRuleUuid' . '}',
                ObjectSerializer::toPathValue($integration_rule_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
