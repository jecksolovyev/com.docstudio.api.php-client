<?php
/**
 * EnvelopeControllerApi
 * PHP version 5
 *
 * @category Class
 * @package  Docstudio\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocStudio Api Documentation
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R74.25
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Docstudio\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Docstudio\Client\ApiException;
use Docstudio\Client\Configuration;
use Docstudio\Client\HeaderSelector;
use Docstudio\Client\ObjectSerializer;

/**
 * EnvelopeControllerApi Class Doc Comment
 *
 * @category Class
 * @package  Docstudio\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EnvelopeControllerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation acceptUserPendingInvitations
     *
     * Accept user's pending invitations
     *
     * @param  string[] $body body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function acceptUserPendingInvitations($body, $mailbox)
    {
        $this->acceptUserPendingInvitationsWithHttpInfo($body, $mailbox);
    }

    /**
     * Operation acceptUserPendingInvitationsWithHttpInfo
     *
     * Accept user's pending invitations
     *
     * @param  string[] $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function acceptUserPendingInvitationsWithHttpInfo($body, $mailbox)
    {
        $returnType = '';
        $request = $this->acceptUserPendingInvitationsRequest($body, $mailbox);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation acceptUserPendingInvitationsAsync
     *
     * Accept user's pending invitations
     *
     * @param  string[] $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acceptUserPendingInvitationsAsync($body, $mailbox)
    {
        return $this->acceptUserPendingInvitationsAsyncWithHttpInfo($body, $mailbox)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation acceptUserPendingInvitationsAsyncWithHttpInfo
     *
     * Accept user's pending invitations
     *
     * @param  string[] $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acceptUserPendingInvitationsAsyncWithHttpInfo($body, $mailbox)
    {
        $returnType = '';
        $request = $this->acceptUserPendingInvitationsRequest($body, $mailbox);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'acceptUserPendingInvitations'
     *
     * @param  string[] $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function acceptUserPendingInvitationsRequest($body, $mailbox)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling acceptUserPendingInvitations'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling acceptUserPendingInvitations'
            );
        }

        $resourcePath = '/api/v1/envelope/invitations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addEnvelopesIntoChain
     *
     * Add envelopes into chain
     *
     * @param  string[] $body body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $chain_uuid Chain UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addEnvelopesIntoChain($body, $mailbox, $chain_uuid)
    {
        $this->addEnvelopesIntoChainWithHttpInfo($body, $mailbox, $chain_uuid);
    }

    /**
     * Operation addEnvelopesIntoChainWithHttpInfo
     *
     * Add envelopes into chain
     *
     * @param  string[] $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $chain_uuid Chain UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addEnvelopesIntoChainWithHttpInfo($body, $mailbox, $chain_uuid)
    {
        $returnType = '';
        $request = $this->addEnvelopesIntoChainRequest($body, $mailbox, $chain_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addEnvelopesIntoChainAsync
     *
     * Add envelopes into chain
     *
     * @param  string[] $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $chain_uuid Chain UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addEnvelopesIntoChainAsync($body, $mailbox, $chain_uuid)
    {
        return $this->addEnvelopesIntoChainAsyncWithHttpInfo($body, $mailbox, $chain_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addEnvelopesIntoChainAsyncWithHttpInfo
     *
     * Add envelopes into chain
     *
     * @param  string[] $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $chain_uuid Chain UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addEnvelopesIntoChainAsyncWithHttpInfo($body, $mailbox, $chain_uuid)
    {
        $returnType = '';
        $request = $this->addEnvelopesIntoChainRequest($body, $mailbox, $chain_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addEnvelopesIntoChain'
     *
     * @param  string[] $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $chain_uuid Chain UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addEnvelopesIntoChainRequest($body, $mailbox, $chain_uuid)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling addEnvelopesIntoChain'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling addEnvelopesIntoChain'
            );
        }
        // verify the required parameter 'chain_uuid' is set
        if ($chain_uuid === null || (is_array($chain_uuid) && count($chain_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chain_uuid when calling addEnvelopesIntoChain'
            );
        }

        $resourcePath = '/api/v1/envelope/chain/{chainUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($chain_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'chainUuid' . '}',
                ObjectSerializer::toPathValue($chain_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation archive
     *
     * Archive envelopes
     *
     * @param  \Docstudio\Client\Model\BulkEnvelopeActionDTO $body body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  bool $flag flag (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function archive($body, $mailbox, $flag)
    {
        $this->archiveWithHttpInfo($body, $mailbox, $flag);
    }

    /**
     * Operation archiveWithHttpInfo
     *
     * Archive envelopes
     *
     * @param  \Docstudio\Client\Model\BulkEnvelopeActionDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  bool $flag (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function archiveWithHttpInfo($body, $mailbox, $flag)
    {
        $returnType = '';
        $request = $this->archiveRequest($body, $mailbox, $flag);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation archiveAsync
     *
     * Archive envelopes
     *
     * @param  \Docstudio\Client\Model\BulkEnvelopeActionDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  bool $flag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function archiveAsync($body, $mailbox, $flag)
    {
        return $this->archiveAsyncWithHttpInfo($body, $mailbox, $flag)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation archiveAsyncWithHttpInfo
     *
     * Archive envelopes
     *
     * @param  \Docstudio\Client\Model\BulkEnvelopeActionDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  bool $flag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function archiveAsyncWithHttpInfo($body, $mailbox, $flag)
    {
        $returnType = '';
        $request = $this->archiveRequest($body, $mailbox, $flag);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'archive'
     *
     * @param  \Docstudio\Client\Model\BulkEnvelopeActionDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  bool $flag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function archiveRequest($body, $mailbox, $flag)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling archive'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling archive'
            );
        }
        // verify the required parameter 'flag' is set
        if ($flag === null || (is_array($flag) && count($flag) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $flag when calling archive'
            );
        }

        $resourcePath = '/api/v1/envelope/archive/{flag}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($flag !== null) {
            $resourcePath = str_replace(
                '{' . 'flag' . '}',
                ObjectSerializer::toPathValue($flag),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelApprovalFlow
     *
     * Cancel envelope approval
     *
     * @param  string $envelope_uuid Envelope to approve (required)
     * @param  string $flow_uuid Flow to approve (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function cancelApprovalFlow($envelope_uuid, $flow_uuid, $mailbox)
    {
        $this->cancelApprovalFlowWithHttpInfo($envelope_uuid, $flow_uuid, $mailbox);
    }

    /**
     * Operation cancelApprovalFlowWithHttpInfo
     *
     * Cancel envelope approval
     *
     * @param  string $envelope_uuid Envelope to approve (required)
     * @param  string $flow_uuid Flow to approve (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelApprovalFlowWithHttpInfo($envelope_uuid, $flow_uuid, $mailbox)
    {
        $returnType = '';
        $request = $this->cancelApprovalFlowRequest($envelope_uuid, $flow_uuid, $mailbox);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation cancelApprovalFlowAsync
     *
     * Cancel envelope approval
     *
     * @param  string $envelope_uuid Envelope to approve (required)
     * @param  string $flow_uuid Flow to approve (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelApprovalFlowAsync($envelope_uuid, $flow_uuid, $mailbox)
    {
        return $this->cancelApprovalFlowAsyncWithHttpInfo($envelope_uuid, $flow_uuid, $mailbox)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelApprovalFlowAsyncWithHttpInfo
     *
     * Cancel envelope approval
     *
     * @param  string $envelope_uuid Envelope to approve (required)
     * @param  string $flow_uuid Flow to approve (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelApprovalFlowAsyncWithHttpInfo($envelope_uuid, $flow_uuid, $mailbox)
    {
        $returnType = '';
        $request = $this->cancelApprovalFlowRequest($envelope_uuid, $flow_uuid, $mailbox);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelApprovalFlow'
     *
     * @param  string $envelope_uuid Envelope to approve (required)
     * @param  string $flow_uuid Flow to approve (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelApprovalFlowRequest($envelope_uuid, $flow_uuid, $mailbox)
    {
        // verify the required parameter 'envelope_uuid' is set
        if ($envelope_uuid === null || (is_array($envelope_uuid) && count($envelope_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envelope_uuid when calling cancelApprovalFlow'
            );
        }
        // verify the required parameter 'flow_uuid' is set
        if ($flow_uuid === null || (is_array($flow_uuid) && count($flow_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $flow_uuid when calling cancelApprovalFlow'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling cancelApprovalFlow'
            );
        }

        $resourcePath = '/api/v1/envelope/{envelopeUuid}/approval/{flowUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($envelope_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'envelopeUuid' . '}',
                ObjectSerializer::toPathValue($envelope_uuid),
                $resourcePath
            );
        }
        // path params
        if ($flow_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'flowUuid' . '}',
                ObjectSerializer::toPathValue($flow_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelEnvelopeDelegation
     *
     * Cancel envelope delegation
     *
     * @param  \Docstudio\Client\Model\EnvCancelDelegationDTO $body body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function cancelEnvelopeDelegation($body, $mailbox)
    {
        $this->cancelEnvelopeDelegationWithHttpInfo($body, $mailbox);
    }

    /**
     * Operation cancelEnvelopeDelegationWithHttpInfo
     *
     * Cancel envelope delegation
     *
     * @param  \Docstudio\Client\Model\EnvCancelDelegationDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelEnvelopeDelegationWithHttpInfo($body, $mailbox)
    {
        $returnType = '';
        $request = $this->cancelEnvelopeDelegationRequest($body, $mailbox);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation cancelEnvelopeDelegationAsync
     *
     * Cancel envelope delegation
     *
     * @param  \Docstudio\Client\Model\EnvCancelDelegationDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelEnvelopeDelegationAsync($body, $mailbox)
    {
        return $this->cancelEnvelopeDelegationAsyncWithHttpInfo($body, $mailbox)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelEnvelopeDelegationAsyncWithHttpInfo
     *
     * Cancel envelope delegation
     *
     * @param  \Docstudio\Client\Model\EnvCancelDelegationDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelEnvelopeDelegationAsyncWithHttpInfo($body, $mailbox)
    {
        $returnType = '';
        $request = $this->cancelEnvelopeDelegationRequest($body, $mailbox);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelEnvelopeDelegation'
     *
     * @param  \Docstudio\Client\Model\EnvCancelDelegationDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelEnvelopeDelegationRequest($body, $mailbox)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling cancelEnvelopeDelegation'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling cancelEnvelopeDelegation'
            );
        }

        $resourcePath = '/api/v1/envelope/delegate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelEnvelopes
     *
     * Cancel envelopes
     *
     * @param  \Docstudio\Client\Model\EnvCancellationRequestDTO $body body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function cancelEnvelopes($body, $mailbox)
    {
        $this->cancelEnvelopesWithHttpInfo($body, $mailbox);
    }

    /**
     * Operation cancelEnvelopesWithHttpInfo
     *
     * Cancel envelopes
     *
     * @param  \Docstudio\Client\Model\EnvCancellationRequestDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelEnvelopesWithHttpInfo($body, $mailbox)
    {
        $returnType = '';
        $request = $this->cancelEnvelopesRequest($body, $mailbox);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation cancelEnvelopesAsync
     *
     * Cancel envelopes
     *
     * @param  \Docstudio\Client\Model\EnvCancellationRequestDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelEnvelopesAsync($body, $mailbox)
    {
        return $this->cancelEnvelopesAsyncWithHttpInfo($body, $mailbox)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelEnvelopesAsyncWithHttpInfo
     *
     * Cancel envelopes
     *
     * @param  \Docstudio\Client\Model\EnvCancellationRequestDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelEnvelopesAsyncWithHttpInfo($body, $mailbox)
    {
        $returnType = '';
        $request = $this->cancelEnvelopesRequest($body, $mailbox);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelEnvelopes'
     *
     * @param  \Docstudio\Client\Model\EnvCancellationRequestDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelEnvelopesRequest($body, $mailbox)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling cancelEnvelopes'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling cancelEnvelopes'
            );
        }

        $resourcePath = '/api/v1/envelope/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation check
     *
     * Check an envelope
     *
     * @param  \Docstudio\Client\Model\EnvDTO $body body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\ValidationResponseDTO
     */
    public function check($body, $mailbox)
    {
        list($response) = $this->checkWithHttpInfo($body, $mailbox);
        return $response;
    }

    /**
     * Operation checkWithHttpInfo
     *
     * Check an envelope
     *
     * @param  \Docstudio\Client\Model\EnvDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\ValidationResponseDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkWithHttpInfo($body, $mailbox)
    {
        $returnType = '\Swagger\Client\Model\ValidationResponseDTO';
        $request = $this->checkRequest($body, $mailbox);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ValidationResponseDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkAsync
     *
     * Check an envelope
     *
     * @param  \Docstudio\Client\Model\EnvDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkAsync($body, $mailbox)
    {
        return $this->checkAsyncWithHttpInfo($body, $mailbox)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkAsyncWithHttpInfo
     *
     * Check an envelope
     *
     * @param  \Docstudio\Client\Model\EnvDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkAsyncWithHttpInfo($body, $mailbox)
    {
        $returnType = '\Swagger\Client\Model\ValidationResponseDTO';
        $request = $this->checkRequest($body, $mailbox);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'check'
     *
     * @param  \Docstudio\Client\Model\EnvDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function checkRequest($body, $mailbox)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling check'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling check'
            );
        }

        $resourcePath = '/api/v1/envelope/check';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation checkUserHasInvitations
     *
     * Check user has pending invitations
     *
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function checkUserHasInvitations()
    {
        $this->checkUserHasInvitationsWithHttpInfo();
    }

    /**
     * Operation checkUserHasInvitationsWithHttpInfo
     *
     * Check user has pending invitations
     *
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkUserHasInvitationsWithHttpInfo()
    {
        $returnType = '';
        $request = $this->checkUserHasInvitationsRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation checkUserHasInvitationsAsync
     *
     * Check user has pending invitations
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkUserHasInvitationsAsync()
    {
        return $this->checkUserHasInvitationsAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkUserHasInvitationsAsyncWithHttpInfo
     *
     * Check user has pending invitations
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkUserHasInvitationsAsyncWithHttpInfo()
    {
        $returnType = '';
        $request = $this->checkUserHasInvitationsRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkUserHasInvitations'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function checkUserHasInvitationsRequest()
    {

        $resourcePath = '/api/v1/envelope/invitations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'HEAD',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cloneAttachment
     *
     * Clone an existing attachment
     *
     * @param  string $attachment_uuid attachment_uuid (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\UploadedAttachmentDTO
     */
    public function cloneAttachment($attachment_uuid, $mailbox)
    {
        list($response) = $this->cloneAttachmentWithHttpInfo($attachment_uuid, $mailbox);
        return $response;
    }

    /**
     * Operation cloneAttachmentWithHttpInfo
     *
     * Clone an existing attachment
     *
     * @param  string $attachment_uuid (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\UploadedAttachmentDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloneAttachmentWithHttpInfo($attachment_uuid, $mailbox)
    {
        $returnType = '\Swagger\Client\Model\UploadedAttachmentDTO';
        $request = $this->cloneAttachmentRequest($attachment_uuid, $mailbox);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\UploadedAttachmentDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cloneAttachmentAsync
     *
     * Clone an existing attachment
     *
     * @param  string $attachment_uuid (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneAttachmentAsync($attachment_uuid, $mailbox)
    {
        return $this->cloneAttachmentAsyncWithHttpInfo($attachment_uuid, $mailbox)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cloneAttachmentAsyncWithHttpInfo
     *
     * Clone an existing attachment
     *
     * @param  string $attachment_uuid (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cloneAttachmentAsyncWithHttpInfo($attachment_uuid, $mailbox)
    {
        $returnType = '\Swagger\Client\Model\UploadedAttachmentDTO';
        $request = $this->cloneAttachmentRequest($attachment_uuid, $mailbox);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cloneAttachment'
     *
     * @param  string $attachment_uuid (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cloneAttachmentRequest($attachment_uuid, $mailbox)
    {
        // verify the required parameter 'attachment_uuid' is set
        if ($attachment_uuid === null || (is_array($attachment_uuid) && count($attachment_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachment_uuid when calling cloneAttachment'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling cloneAttachment'
            );
        }

        $resourcePath = '/api/v1/envelope/clone-attachment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($attachment_uuid !== null) {
            $queryParams['attachmentUuid'] = ObjectSerializer::toQueryValue($attachment_uuid, 'uuid');
        }
        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation confirmInvite
     *
     * Accept/confirm invitations
     *
     * @param  \Docstudio\Client\Model\EnvelopeConfirmInviteDTO $body body (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function confirmInvite($body)
    {
        $this->confirmInviteWithHttpInfo($body);
    }

    /**
     * Operation confirmInviteWithHttpInfo
     *
     * Accept/confirm invitations
     *
     * @param  \Docstudio\Client\Model\EnvelopeConfirmInviteDTO $body (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function confirmInviteWithHttpInfo($body)
    {
        $returnType = '';
        $request = $this->confirmInviteRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation confirmInviteAsync
     *
     * Accept/confirm invitations
     *
     * @param  \Docstudio\Client\Model\EnvelopeConfirmInviteDTO $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function confirmInviteAsync($body)
    {
        return $this->confirmInviteAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation confirmInviteAsyncWithHttpInfo
     *
     * Accept/confirm invitations
     *
     * @param  \Docstudio\Client\Model\EnvelopeConfirmInviteDTO $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function confirmInviteAsyncWithHttpInfo($body)
    {
        $returnType = '';
        $request = $this->confirmInviteRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'confirmInvite'
     *
     * @param  \Docstudio\Client\Model\EnvelopeConfirmInviteDTO $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function confirmInviteRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling confirmInvite'
            );
        }

        $resourcePath = '/api/v1/envelope/confirm-invite';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation continueScenarioStep
     *
     * Continue scenario flow with step
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $step_id Step id (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\SingleUuidDTO[]
     */
    public function continueScenarioStep($envelope_uuid, $step_id, $mailbox)
    {
        list($response) = $this->continueScenarioStepWithHttpInfo($envelope_uuid, $step_id, $mailbox);
        return $response;
    }

    /**
     * Operation continueScenarioStepWithHttpInfo
     *
     * Continue scenario flow with step
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $step_id Step id (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\SingleUuidDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function continueScenarioStepWithHttpInfo($envelope_uuid, $step_id, $mailbox)
    {
        $returnType = '\Swagger\Client\Model\SingleUuidDTO[]';
        $request = $this->continueScenarioStepRequest($envelope_uuid, $step_id, $mailbox);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SingleUuidDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation continueScenarioStepAsync
     *
     * Continue scenario flow with step
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $step_id Step id (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function continueScenarioStepAsync($envelope_uuid, $step_id, $mailbox)
    {
        return $this->continueScenarioStepAsyncWithHttpInfo($envelope_uuid, $step_id, $mailbox)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation continueScenarioStepAsyncWithHttpInfo
     *
     * Continue scenario flow with step
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $step_id Step id (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function continueScenarioStepAsyncWithHttpInfo($envelope_uuid, $step_id, $mailbox)
    {
        $returnType = '\Swagger\Client\Model\SingleUuidDTO[]';
        $request = $this->continueScenarioStepRequest($envelope_uuid, $step_id, $mailbox);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'continueScenarioStep'
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $step_id Step id (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function continueScenarioStepRequest($envelope_uuid, $step_id, $mailbox)
    {
        // verify the required parameter 'envelope_uuid' is set
        if ($envelope_uuid === null || (is_array($envelope_uuid) && count($envelope_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envelope_uuid when calling continueScenarioStep'
            );
        }
        // verify the required parameter 'step_id' is set
        if ($step_id === null || (is_array($step_id) && count($step_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $step_id when calling continueScenarioStep'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling continueScenarioStep'
            );
        }

        $resourcePath = '/api/v1/envelope/{envelopeUuid}/scenario/{stepId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($envelope_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'envelopeUuid' . '}',
                ObjectSerializer::toPathValue($envelope_uuid),
                $resourcePath
            );
        }
        // path params
        if ($step_id !== null) {
            $resourcePath = str_replace(
                '{' . 'stepId' . '}',
                ObjectSerializer::toPathValue($step_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation convertAttachmentToPdf
     *
     * Convert attachment to PDF
     *
     * @param  string $attachment_uuid Attachment UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function convertAttachmentToPdf($attachment_uuid, $mailbox)
    {
        list($response) = $this->convertAttachmentToPdfWithHttpInfo($attachment_uuid, $mailbox);
        return $response;
    }

    /**
     * Operation convertAttachmentToPdfWithHttpInfo
     *
     * Convert attachment to PDF
     *
     * @param  string $attachment_uuid Attachment UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function convertAttachmentToPdfWithHttpInfo($attachment_uuid, $mailbox)
    {
        $returnType = 'string';
        $request = $this->convertAttachmentToPdfRequest($attachment_uuid, $mailbox);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation convertAttachmentToPdfAsync
     *
     * Convert attachment to PDF
     *
     * @param  string $attachment_uuid Attachment UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertAttachmentToPdfAsync($attachment_uuid, $mailbox)
    {
        return $this->convertAttachmentToPdfAsyncWithHttpInfo($attachment_uuid, $mailbox)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation convertAttachmentToPdfAsyncWithHttpInfo
     *
     * Convert attachment to PDF
     *
     * @param  string $attachment_uuid Attachment UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function convertAttachmentToPdfAsyncWithHttpInfo($attachment_uuid, $mailbox)
    {
        $returnType = 'string';
        $request = $this->convertAttachmentToPdfRequest($attachment_uuid, $mailbox);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'convertAttachmentToPdf'
     *
     * @param  string $attachment_uuid Attachment UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function convertAttachmentToPdfRequest($attachment_uuid, $mailbox)
    {
        // verify the required parameter 'attachment_uuid' is set
        if ($attachment_uuid === null || (is_array($attachment_uuid) && count($attachment_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachment_uuid when calling convertAttachmentToPdf'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling convertAttachmentToPdf'
            );
        }

        $resourcePath = '/api/v1/envelope/attachment-as-pdf/{attachmentUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($attachment_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'attachmentUuid' . '}',
                ObjectSerializer::toPathValue($attachment_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAttachment
     *
     * Create/upload new attachment
     *
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $file file (optional)
     * @param  string $validate validate (optional)
     * @param  string $type type (optional)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\UploadedAttachmentDTO
     */
    public function createAttachment($mailbox, $file = null, $validate = null, $type = null)
    {
        list($response) = $this->createAttachmentWithHttpInfo($mailbox, $file, $validate, $type);
        return $response;
    }

    /**
     * Operation createAttachmentWithHttpInfo
     *
     * Create/upload new attachment
     *
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $file (optional)
     * @param  string $validate (optional)
     * @param  string $type (optional)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\UploadedAttachmentDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAttachmentWithHttpInfo($mailbox, $file = null, $validate = null, $type = null)
    {
        $returnType = '\Swagger\Client\Model\UploadedAttachmentDTO';
        $request = $this->createAttachmentRequest($mailbox, $file, $validate, $type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\UploadedAttachmentDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAttachmentAsync
     *
     * Create/upload new attachment
     *
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $file (optional)
     * @param  string $validate (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAttachmentAsync($mailbox, $file = null, $validate = null, $type = null)
    {
        return $this->createAttachmentAsyncWithHttpInfo($mailbox, $file, $validate, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAttachmentAsyncWithHttpInfo
     *
     * Create/upload new attachment
     *
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $file (optional)
     * @param  string $validate (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAttachmentAsyncWithHttpInfo($mailbox, $file = null, $validate = null, $type = null)
    {
        $returnType = '\Swagger\Client\Model\UploadedAttachmentDTO';
        $request = $this->createAttachmentRequest($mailbox, $file, $validate, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAttachment'
     *
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $file (optional)
     * @param  string $validate (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAttachmentRequest($mailbox, $file = null, $validate = null, $type = null)
    {
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling createAttachment'
            );
        }

        $resourcePath = '/api/v1/envelope/attachment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($validate !== null) {
            $queryParams['validate'] = ObjectSerializer::toQueryValue($validate, null);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type, null);
        }
        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }


        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($file), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createEnvelope
     *
     * Create draft envelope
     *
     * @param  \Docstudio\Client\Model\EnvPostDTO $body body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\SingleUuidDTO
     */
    public function createEnvelope($body, $mailbox)
    {
        list($response) = $this->createEnvelopeWithHttpInfo($body, $mailbox);
        return $response;
    }

    /**
     * Operation createEnvelopeWithHttpInfo
     *
     * Create draft envelope
     *
     * @param  \Docstudio\Client\Model\EnvPostDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\SingleUuidDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createEnvelopeWithHttpInfo($body, $mailbox)
    {
        $returnType = '\Swagger\Client\Model\SingleUuidDTO';
        $request = $this->createEnvelopeRequest($body, $mailbox);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SingleUuidDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createEnvelopeAsync
     *
     * Create draft envelope
     *
     * @param  \Docstudio\Client\Model\EnvPostDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEnvelopeAsync($body, $mailbox)
    {
        return $this->createEnvelopeAsyncWithHttpInfo($body, $mailbox)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createEnvelopeAsyncWithHttpInfo
     *
     * Create draft envelope
     *
     * @param  \Docstudio\Client\Model\EnvPostDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEnvelopeAsyncWithHttpInfo($body, $mailbox)
    {
        $returnType = '\Swagger\Client\Model\SingleUuidDTO';
        $request = $this->createEnvelopeRequest($body, $mailbox);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createEnvelope'
     *
     * @param  \Docstudio\Client\Model\EnvPostDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createEnvelopeRequest($body, $mailbox)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createEnvelope'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling createEnvelope'
            );
        }

        $resourcePath = '/api/v1/envelope';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createEnvelopeComment
     *
     * Create envelope comment thread
     *
     * @param  \Docstudio\Client\Model\CommentPostDTO $body body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $envelope_uuid Envelope UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\CommentThreadDTO
     */
    public function createEnvelopeComment($body, $mailbox, $envelope_uuid)
    {
        list($response) = $this->createEnvelopeCommentWithHttpInfo($body, $mailbox, $envelope_uuid);
        return $response;
    }

    /**
     * Operation createEnvelopeCommentWithHttpInfo
     *
     * Create envelope comment thread
     *
     * @param  \Docstudio\Client\Model\CommentPostDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $envelope_uuid Envelope UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\CommentThreadDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createEnvelopeCommentWithHttpInfo($body, $mailbox, $envelope_uuid)
    {
        $returnType = '\Swagger\Client\Model\CommentThreadDTO';
        $request = $this->createEnvelopeCommentRequest($body, $mailbox, $envelope_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CommentThreadDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createEnvelopeCommentAsync
     *
     * Create envelope comment thread
     *
     * @param  \Docstudio\Client\Model\CommentPostDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $envelope_uuid Envelope UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEnvelopeCommentAsync($body, $mailbox, $envelope_uuid)
    {
        return $this->createEnvelopeCommentAsyncWithHttpInfo($body, $mailbox, $envelope_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createEnvelopeCommentAsyncWithHttpInfo
     *
     * Create envelope comment thread
     *
     * @param  \Docstudio\Client\Model\CommentPostDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $envelope_uuid Envelope UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEnvelopeCommentAsyncWithHttpInfo($body, $mailbox, $envelope_uuid)
    {
        $returnType = '\Swagger\Client\Model\CommentThreadDTO';
        $request = $this->createEnvelopeCommentRequest($body, $mailbox, $envelope_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createEnvelopeComment'
     *
     * @param  \Docstudio\Client\Model\CommentPostDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $envelope_uuid Envelope UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createEnvelopeCommentRequest($body, $mailbox, $envelope_uuid)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createEnvelopeComment'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling createEnvelopeComment'
            );
        }
        // verify the required parameter 'envelope_uuid' is set
        if ($envelope_uuid === null || (is_array($envelope_uuid) && count($envelope_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envelope_uuid when calling createEnvelopeComment'
            );
        }

        $resourcePath = '/api/v1/envelope/{envelopeUuid}/comment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($envelope_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'envelopeUuid' . '}',
                ObjectSerializer::toPathValue($envelope_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation delegateEnvelopes
     *
     * Delegate envelopes
     *
     * @param  \Docstudio\Client\Model\EnvDelegationDTO $body body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function delegateEnvelopes($body, $mailbox)
    {
        $this->delegateEnvelopesWithHttpInfo($body, $mailbox);
    }

    /**
     * Operation delegateEnvelopesWithHttpInfo
     *
     * Delegate envelopes
     *
     * @param  \Docstudio\Client\Model\EnvDelegationDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function delegateEnvelopesWithHttpInfo($body, $mailbox)
    {
        $returnType = '';
        $request = $this->delegateEnvelopesRequest($body, $mailbox);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation delegateEnvelopesAsync
     *
     * Delegate envelopes
     *
     * @param  \Docstudio\Client\Model\EnvDelegationDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function delegateEnvelopesAsync($body, $mailbox)
    {
        return $this->delegateEnvelopesAsyncWithHttpInfo($body, $mailbox)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation delegateEnvelopesAsyncWithHttpInfo
     *
     * Delegate envelopes
     *
     * @param  \Docstudio\Client\Model\EnvDelegationDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function delegateEnvelopesAsyncWithHttpInfo($body, $mailbox)
    {
        $returnType = '';
        $request = $this->delegateEnvelopesRequest($body, $mailbox);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'delegateEnvelopes'
     *
     * @param  \Docstudio\Client\Model\EnvDelegationDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function delegateEnvelopesRequest($body, $mailbox)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling delegateEnvelopes'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling delegateEnvelopes'
            );
        }

        $resourcePath = '/api/v1/envelope/delegate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteDrafts
     *
     * Delete draft envelopes
     *
     * @param  \Docstudio\Client\Model\BulkEnvelopeActionDTO $body body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteDrafts($body, $mailbox)
    {
        $this->deleteDraftsWithHttpInfo($body, $mailbox);
    }

    /**
     * Operation deleteDraftsWithHttpInfo
     *
     * Delete draft envelopes
     *
     * @param  \Docstudio\Client\Model\BulkEnvelopeActionDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDraftsWithHttpInfo($body, $mailbox)
    {
        $returnType = '';
        $request = $this->deleteDraftsRequest($body, $mailbox);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteDraftsAsync
     *
     * Delete draft envelopes
     *
     * @param  \Docstudio\Client\Model\BulkEnvelopeActionDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDraftsAsync($body, $mailbox)
    {
        return $this->deleteDraftsAsyncWithHttpInfo($body, $mailbox)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteDraftsAsyncWithHttpInfo
     *
     * Delete draft envelopes
     *
     * @param  \Docstudio\Client\Model\BulkEnvelopeActionDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDraftsAsyncWithHttpInfo($body, $mailbox)
    {
        $returnType = '';
        $request = $this->deleteDraftsRequest($body, $mailbox);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteDrafts'
     *
     * @param  \Docstudio\Client\Model\BulkEnvelopeActionDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteDraftsRequest($body, $mailbox)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling deleteDrafts'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling deleteDrafts'
            );
        }

        $resourcePath = '/api/v1/envelope';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEnvelopeComment
     *
     * Delete envelope comment in thread or the whole thread
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $thread_uuid Thread UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  int $message_id Message ID (optional) (optional)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\CommentThreadDTO
     */
    public function deleteEnvelopeComment($envelope_uuid, $thread_uuid, $mailbox, $message_id = null)
    {
        list($response) = $this->deleteEnvelopeCommentWithHttpInfo($envelope_uuid, $thread_uuid, $mailbox, $message_id);
        return $response;
    }

    /**
     * Operation deleteEnvelopeCommentWithHttpInfo
     *
     * Delete envelope comment in thread or the whole thread
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $thread_uuid Thread UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  int $message_id Message ID (optional) (optional)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\CommentThreadDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEnvelopeCommentWithHttpInfo($envelope_uuid, $thread_uuid, $mailbox, $message_id = null)
    {
        $returnType = '\Swagger\Client\Model\CommentThreadDTO';
        $request = $this->deleteEnvelopeCommentRequest($envelope_uuid, $thread_uuid, $mailbox, $message_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CommentThreadDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEnvelopeCommentAsync
     *
     * Delete envelope comment in thread or the whole thread
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $thread_uuid Thread UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  int $message_id Message ID (optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnvelopeCommentAsync($envelope_uuid, $thread_uuid, $mailbox, $message_id = null)
    {
        return $this->deleteEnvelopeCommentAsyncWithHttpInfo($envelope_uuid, $thread_uuid, $mailbox, $message_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEnvelopeCommentAsyncWithHttpInfo
     *
     * Delete envelope comment in thread or the whole thread
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $thread_uuid Thread UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  int $message_id Message ID (optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEnvelopeCommentAsyncWithHttpInfo($envelope_uuid, $thread_uuid, $mailbox, $message_id = null)
    {
        $returnType = '\Swagger\Client\Model\CommentThreadDTO';
        $request = $this->deleteEnvelopeCommentRequest($envelope_uuid, $thread_uuid, $mailbox, $message_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEnvelopeComment'
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $thread_uuid Thread UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  int $message_id Message ID (optional) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEnvelopeCommentRequest($envelope_uuid, $thread_uuid, $mailbox, $message_id = null)
    {
        // verify the required parameter 'envelope_uuid' is set
        if ($envelope_uuid === null || (is_array($envelope_uuid) && count($envelope_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envelope_uuid when calling deleteEnvelopeComment'
            );
        }
        // verify the required parameter 'thread_uuid' is set
        if ($thread_uuid === null || (is_array($thread_uuid) && count($thread_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $thread_uuid when calling deleteEnvelopeComment'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling deleteEnvelopeComment'
            );
        }

        $resourcePath = '/api/v1/envelope/{envelopeUuid}/comment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($thread_uuid !== null) {
            $queryParams['threadUuid'] = ObjectSerializer::toQueryValue($thread_uuid, 'uuid');
        }
        // query params
        if ($message_id !== null) {
            $queryParams['messageId'] = ObjectSerializer::toQueryValue($message_id, 'int32');
        }
        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($envelope_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'envelopeUuid' . '}',
                ObjectSerializer::toPathValue($envelope_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation downloadEnvelopeAttachment
     *
     * Download envelope attachment
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $attachment_uuid Attachment UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function downloadEnvelopeAttachment($envelope_uuid, $attachment_uuid, $mailbox)
    {
        list($response) = $this->downloadEnvelopeAttachmentWithHttpInfo($envelope_uuid, $attachment_uuid, $mailbox);
        return $response;
    }

    /**
     * Operation downloadEnvelopeAttachmentWithHttpInfo
     *
     * Download envelope attachment
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $attachment_uuid Attachment UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadEnvelopeAttachmentWithHttpInfo($envelope_uuid, $attachment_uuid, $mailbox)
    {
        $returnType = 'string';
        $request = $this->downloadEnvelopeAttachmentRequest($envelope_uuid, $attachment_uuid, $mailbox);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation downloadEnvelopeAttachmentAsync
     *
     * Download envelope attachment
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $attachment_uuid Attachment UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadEnvelopeAttachmentAsync($envelope_uuid, $attachment_uuid, $mailbox)
    {
        return $this->downloadEnvelopeAttachmentAsyncWithHttpInfo($envelope_uuid, $attachment_uuid, $mailbox)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadEnvelopeAttachmentAsyncWithHttpInfo
     *
     * Download envelope attachment
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $attachment_uuid Attachment UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadEnvelopeAttachmentAsyncWithHttpInfo($envelope_uuid, $attachment_uuid, $mailbox)
    {
        $returnType = 'string';
        $request = $this->downloadEnvelopeAttachmentRequest($envelope_uuid, $attachment_uuid, $mailbox);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'downloadEnvelopeAttachment'
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $attachment_uuid Attachment UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadEnvelopeAttachmentRequest($envelope_uuid, $attachment_uuid, $mailbox)
    {
        // verify the required parameter 'envelope_uuid' is set
        if ($envelope_uuid === null || (is_array($envelope_uuid) && count($envelope_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envelope_uuid when calling downloadEnvelopeAttachment'
            );
        }
        // verify the required parameter 'attachment_uuid' is set
        if ($attachment_uuid === null || (is_array($attachment_uuid) && count($attachment_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachment_uuid when calling downloadEnvelopeAttachment'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling downloadEnvelopeAttachment'
            );
        }

        $resourcePath = '/api/v1/envelope/{envelopeUuid}/attachment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($attachment_uuid !== null) {
            $queryParams['attachmentUuid'] = ObjectSerializer::toQueryValue($attachment_uuid, 'uuid');
        }
        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($envelope_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'envelopeUuid' . '}',
                ObjectSerializer::toPathValue($envelope_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation envelopeApproval
     *
     * Approve or Reject envelope
     *
     * @param  \Docstudio\Client\Model\ApprovalStatusDTO $body body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $envelope_uuid Envelope to approve (required)
     * @param  string $flow_uuid Flow to approve (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function envelopeApproval($body, $mailbox, $envelope_uuid, $flow_uuid)
    {
        $this->envelopeApprovalWithHttpInfo($body, $mailbox, $envelope_uuid, $flow_uuid);
    }

    /**
     * Operation envelopeApprovalWithHttpInfo
     *
     * Approve or Reject envelope
     *
     * @param  \Docstudio\Client\Model\ApprovalStatusDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $envelope_uuid Envelope to approve (required)
     * @param  string $flow_uuid Flow to approve (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function envelopeApprovalWithHttpInfo($body, $mailbox, $envelope_uuid, $flow_uuid)
    {
        $returnType = '';
        $request = $this->envelopeApprovalRequest($body, $mailbox, $envelope_uuid, $flow_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation envelopeApprovalAsync
     *
     * Approve or Reject envelope
     *
     * @param  \Docstudio\Client\Model\ApprovalStatusDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $envelope_uuid Envelope to approve (required)
     * @param  string $flow_uuid Flow to approve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function envelopeApprovalAsync($body, $mailbox, $envelope_uuid, $flow_uuid)
    {
        return $this->envelopeApprovalAsyncWithHttpInfo($body, $mailbox, $envelope_uuid, $flow_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation envelopeApprovalAsyncWithHttpInfo
     *
     * Approve or Reject envelope
     *
     * @param  \Docstudio\Client\Model\ApprovalStatusDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $envelope_uuid Envelope to approve (required)
     * @param  string $flow_uuid Flow to approve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function envelopeApprovalAsyncWithHttpInfo($body, $mailbox, $envelope_uuid, $flow_uuid)
    {
        $returnType = '';
        $request = $this->envelopeApprovalRequest($body, $mailbox, $envelope_uuid, $flow_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'envelopeApproval'
     *
     * @param  \Docstudio\Client\Model\ApprovalStatusDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $envelope_uuid Envelope to approve (required)
     * @param  string $flow_uuid Flow to approve (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function envelopeApprovalRequest($body, $mailbox, $envelope_uuid, $flow_uuid)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling envelopeApproval'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling envelopeApproval'
            );
        }
        // verify the required parameter 'envelope_uuid' is set
        if ($envelope_uuid === null || (is_array($envelope_uuid) && count($envelope_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envelope_uuid when calling envelopeApproval'
            );
        }
        // verify the required parameter 'flow_uuid' is set
        if ($flow_uuid === null || (is_array($flow_uuid) && count($flow_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $flow_uuid when calling envelopeApproval'
            );
        }

        $resourcePath = '/api/v1/envelope/{envelopeUuid}/approval/{flowUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($envelope_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'envelopeUuid' . '}',
                ObjectSerializer::toPathValue($envelope_uuid),
                $resourcePath
            );
        }
        // path params
        if ($flow_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'flowUuid' . '}',
                ObjectSerializer::toPathValue($flow_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation envelopeApprovalHistory
     *
     * Get approval history
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\EnvelopeApprovalHistoryDTO[]
     */
    public function envelopeApprovalHistory($envelope_uuid, $mailbox)
    {
        list($response) = $this->envelopeApprovalHistoryWithHttpInfo($envelope_uuid, $mailbox);
        return $response;
    }

    /**
     * Operation envelopeApprovalHistoryWithHttpInfo
     *
     * Get approval history
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\EnvelopeApprovalHistoryDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function envelopeApprovalHistoryWithHttpInfo($envelope_uuid, $mailbox)
    {
        $returnType = '\Swagger\Client\Model\EnvelopeApprovalHistoryDTO[]';
        $request = $this->envelopeApprovalHistoryRequest($envelope_uuid, $mailbox);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EnvelopeApprovalHistoryDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation envelopeApprovalHistoryAsync
     *
     * Get approval history
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function envelopeApprovalHistoryAsync($envelope_uuid, $mailbox)
    {
        return $this->envelopeApprovalHistoryAsyncWithHttpInfo($envelope_uuid, $mailbox)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation envelopeApprovalHistoryAsyncWithHttpInfo
     *
     * Get approval history
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function envelopeApprovalHistoryAsyncWithHttpInfo($envelope_uuid, $mailbox)
    {
        $returnType = '\Swagger\Client\Model\EnvelopeApprovalHistoryDTO[]';
        $request = $this->envelopeApprovalHistoryRequest($envelope_uuid, $mailbox);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'envelopeApprovalHistory'
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function envelopeApprovalHistoryRequest($envelope_uuid, $mailbox)
    {
        // verify the required parameter 'envelope_uuid' is set
        if ($envelope_uuid === null || (is_array($envelope_uuid) && count($envelope_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envelope_uuid when calling envelopeApprovalHistory'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling envelopeApprovalHistory'
            );
        }

        $resourcePath = '/api/v1/envelope/{envelopeUuid}/approval-history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($envelope_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'envelopeUuid' . '}',
                ObjectSerializer::toPathValue($envelope_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fill
     *
     * Fill envelope
     *
     * @param  \Docstudio\Client\Model\EnvPostDTO $body body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function fill($body, $mailbox)
    {
        $this->fillWithHttpInfo($body, $mailbox);
    }

    /**
     * Operation fillWithHttpInfo
     *
     * Fill envelope
     *
     * @param  \Docstudio\Client\Model\EnvPostDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function fillWithHttpInfo($body, $mailbox)
    {
        $returnType = '';
        $request = $this->fillRequest($body, $mailbox);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation fillAsync
     *
     * Fill envelope
     *
     * @param  \Docstudio\Client\Model\EnvPostDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fillAsync($body, $mailbox)
    {
        return $this->fillAsyncWithHttpInfo($body, $mailbox)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fillAsyncWithHttpInfo
     *
     * Fill envelope
     *
     * @param  \Docstudio\Client\Model\EnvPostDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fillAsyncWithHttpInfo($body, $mailbox)
    {
        $returnType = '';
        $request = $this->fillRequest($body, $mailbox);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fill'
     *
     * @param  \Docstudio\Client\Model\EnvPostDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fillRequest($body, $mailbox)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling fill'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling fill'
            );
        }

        $resourcePath = '/api/v1/envelope/fill';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getActiveRoles
     *
     * Get active roles by Envelope UUID
     *
     * @param  string $uuid UUID of envelope to get active roles from (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\SingleUuidDTO[]
     */
    public function getActiveRoles($uuid, $mailbox)
    {
        list($response) = $this->getActiveRolesWithHttpInfo($uuid, $mailbox);
        return $response;
    }

    /**
     * Operation getActiveRolesWithHttpInfo
     *
     * Get active roles by Envelope UUID
     *
     * @param  string $uuid UUID of envelope to get active roles from (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\SingleUuidDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getActiveRolesWithHttpInfo($uuid, $mailbox)
    {
        $returnType = '\Swagger\Client\Model\SingleUuidDTO[]';
        $request = $this->getActiveRolesRequest($uuid, $mailbox);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SingleUuidDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getActiveRolesAsync
     *
     * Get active roles by Envelope UUID
     *
     * @param  string $uuid UUID of envelope to get active roles from (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getActiveRolesAsync($uuid, $mailbox)
    {
        return $this->getActiveRolesAsyncWithHttpInfo($uuid, $mailbox)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getActiveRolesAsyncWithHttpInfo
     *
     * Get active roles by Envelope UUID
     *
     * @param  string $uuid UUID of envelope to get active roles from (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getActiveRolesAsyncWithHttpInfo($uuid, $mailbox)
    {
        $returnType = '\Swagger\Client\Model\SingleUuidDTO[]';
        $request = $this->getActiveRolesRequest($uuid, $mailbox);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getActiveRoles'
     *
     * @param  string $uuid UUID of envelope to get active roles from (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getActiveRolesRequest($uuid, $mailbox)
    {
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling getActiveRoles'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling getActiveRoles'
            );
        }

        $resourcePath = '/api/v1/envelope/{uuid}/activeRoles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApprovalFlow
     *
     * Get envelope approval
     *
     * @param  string $envelope_uuid Envelope to approve (required)
     * @param  string $flow_uuid Flow to approve (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\EnvelopeApprovalHistoryDTO
     */
    public function getApprovalFlow($envelope_uuid, $flow_uuid, $mailbox)
    {
        list($response) = $this->getApprovalFlowWithHttpInfo($envelope_uuid, $flow_uuid, $mailbox);
        return $response;
    }

    /**
     * Operation getApprovalFlowWithHttpInfo
     *
     * Get envelope approval
     *
     * @param  string $envelope_uuid Envelope to approve (required)
     * @param  string $flow_uuid Flow to approve (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\EnvelopeApprovalHistoryDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApprovalFlowWithHttpInfo($envelope_uuid, $flow_uuid, $mailbox)
    {
        $returnType = '\Swagger\Client\Model\EnvelopeApprovalHistoryDTO';
        $request = $this->getApprovalFlowRequest($envelope_uuid, $flow_uuid, $mailbox);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EnvelopeApprovalHistoryDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApprovalFlowAsync
     *
     * Get envelope approval
     *
     * @param  string $envelope_uuid Envelope to approve (required)
     * @param  string $flow_uuid Flow to approve (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApprovalFlowAsync($envelope_uuid, $flow_uuid, $mailbox)
    {
        return $this->getApprovalFlowAsyncWithHttpInfo($envelope_uuid, $flow_uuid, $mailbox)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApprovalFlowAsyncWithHttpInfo
     *
     * Get envelope approval
     *
     * @param  string $envelope_uuid Envelope to approve (required)
     * @param  string $flow_uuid Flow to approve (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApprovalFlowAsyncWithHttpInfo($envelope_uuid, $flow_uuid, $mailbox)
    {
        $returnType = '\Swagger\Client\Model\EnvelopeApprovalHistoryDTO';
        $request = $this->getApprovalFlowRequest($envelope_uuid, $flow_uuid, $mailbox);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApprovalFlow'
     *
     * @param  string $envelope_uuid Envelope to approve (required)
     * @param  string $flow_uuid Flow to approve (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getApprovalFlowRequest($envelope_uuid, $flow_uuid, $mailbox)
    {
        // verify the required parameter 'envelope_uuid' is set
        if ($envelope_uuid === null || (is_array($envelope_uuid) && count($envelope_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envelope_uuid when calling getApprovalFlow'
            );
        }
        // verify the required parameter 'flow_uuid' is set
        if ($flow_uuid === null || (is_array($flow_uuid) && count($flow_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $flow_uuid when calling getApprovalFlow'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling getApprovalFlow'
            );
        }

        $resourcePath = '/api/v1/envelope/{envelopeUuid}/approval/{flowUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($envelope_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'envelopeUuid' . '}',
                ObjectSerializer::toPathValue($envelope_uuid),
                $resourcePath
            );
        }
        // path params
        if ($flow_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'flowUuid' . '}',
                ObjectSerializer::toPathValue($flow_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getChainEnvelopes
     *
     * Get chain envelopes list
     *
     * @param  string $chain_uuid Chain UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\ChainEnvelopeDTO[]
     */
    public function getChainEnvelopes($chain_uuid, $mailbox)
    {
        list($response) = $this->getChainEnvelopesWithHttpInfo($chain_uuid, $mailbox);
        return $response;
    }

    /**
     * Operation getChainEnvelopesWithHttpInfo
     *
     * Get chain envelopes list
     *
     * @param  string $chain_uuid Chain UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\ChainEnvelopeDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getChainEnvelopesWithHttpInfo($chain_uuid, $mailbox)
    {
        $returnType = '\Swagger\Client\Model\ChainEnvelopeDTO[]';
        $request = $this->getChainEnvelopesRequest($chain_uuid, $mailbox);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ChainEnvelopeDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getChainEnvelopesAsync
     *
     * Get chain envelopes list
     *
     * @param  string $chain_uuid Chain UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChainEnvelopesAsync($chain_uuid, $mailbox)
    {
        return $this->getChainEnvelopesAsyncWithHttpInfo($chain_uuid, $mailbox)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getChainEnvelopesAsyncWithHttpInfo
     *
     * Get chain envelopes list
     *
     * @param  string $chain_uuid Chain UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChainEnvelopesAsyncWithHttpInfo($chain_uuid, $mailbox)
    {
        $returnType = '\Swagger\Client\Model\ChainEnvelopeDTO[]';
        $request = $this->getChainEnvelopesRequest($chain_uuid, $mailbox);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getChainEnvelopes'
     *
     * @param  string $chain_uuid Chain UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getChainEnvelopesRequest($chain_uuid, $mailbox)
    {
        // verify the required parameter 'chain_uuid' is set
        if ($chain_uuid === null || (is_array($chain_uuid) && count($chain_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chain_uuid when calling getChainEnvelopes'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling getChainEnvelopes'
            );
        }

        $resourcePath = '/api/v1/envelope/chain/{chainUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($chain_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'chainUuid' . '}',
                ObjectSerializer::toPathValue($chain_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDocumentPrintVersion
     *
     * Get document PDF for printing
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $document_id Document id (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getDocumentPrintVersion($envelope_uuid, $document_id, $mailbox)
    {
        list($response) = $this->getDocumentPrintVersionWithHttpInfo($envelope_uuid, $document_id, $mailbox);
        return $response;
    }

    /**
     * Operation getDocumentPrintVersionWithHttpInfo
     *
     * Get document PDF for printing
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $document_id Document id (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDocumentPrintVersionWithHttpInfo($envelope_uuid, $document_id, $mailbox)
    {
        $returnType = 'string';
        $request = $this->getDocumentPrintVersionRequest($envelope_uuid, $document_id, $mailbox);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDocumentPrintVersionAsync
     *
     * Get document PDF for printing
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $document_id Document id (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDocumentPrintVersionAsync($envelope_uuid, $document_id, $mailbox)
    {
        return $this->getDocumentPrintVersionAsyncWithHttpInfo($envelope_uuid, $document_id, $mailbox)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDocumentPrintVersionAsyncWithHttpInfo
     *
     * Get document PDF for printing
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $document_id Document id (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDocumentPrintVersionAsyncWithHttpInfo($envelope_uuid, $document_id, $mailbox)
    {
        $returnType = 'string';
        $request = $this->getDocumentPrintVersionRequest($envelope_uuid, $document_id, $mailbox);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDocumentPrintVersion'
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $document_id Document id (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDocumentPrintVersionRequest($envelope_uuid, $document_id, $mailbox)
    {
        // verify the required parameter 'envelope_uuid' is set
        if ($envelope_uuid === null || (is_array($envelope_uuid) && count($envelope_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envelope_uuid when calling getDocumentPrintVersion'
            );
        }
        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling getDocumentPrintVersion'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling getDocumentPrintVersion'
            );
        }

        $resourcePath = '/api/v1/envelope/{envelopeUuid}/for-print';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($document_id !== null) {
            $queryParams['documentId'] = ObjectSerializer::toQueryValue($document_id, null);
        }
        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($envelope_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'envelopeUuid' . '}',
                ObjectSerializer::toPathValue($envelope_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDocumentsForSign
     *
     * PDFs and XMLs for signing
     *
     * @param  \Docstudio\Client\Model\DocumentsForSignRequestDTO $body body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $envelope_uuid Envelope UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\DocumentForSigningDTO[]
     */
    public function getDocumentsForSign($body, $mailbox, $envelope_uuid)
    {
        list($response) = $this->getDocumentsForSignWithHttpInfo($body, $mailbox, $envelope_uuid);
        return $response;
    }

    /**
     * Operation getDocumentsForSignWithHttpInfo
     *
     * PDFs and XMLs for signing
     *
     * @param  \Docstudio\Client\Model\DocumentsForSignRequestDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $envelope_uuid Envelope UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\DocumentForSigningDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getDocumentsForSignWithHttpInfo($body, $mailbox, $envelope_uuid)
    {
        $returnType = '\Swagger\Client\Model\DocumentForSigningDTO[]';
        $request = $this->getDocumentsForSignRequest($body, $mailbox, $envelope_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DocumentForSigningDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDocumentsForSignAsync
     *
     * PDFs and XMLs for signing
     *
     * @param  \Docstudio\Client\Model\DocumentsForSignRequestDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $envelope_uuid Envelope UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDocumentsForSignAsync($body, $mailbox, $envelope_uuid)
    {
        return $this->getDocumentsForSignAsyncWithHttpInfo($body, $mailbox, $envelope_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDocumentsForSignAsyncWithHttpInfo
     *
     * PDFs and XMLs for signing
     *
     * @param  \Docstudio\Client\Model\DocumentsForSignRequestDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $envelope_uuid Envelope UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDocumentsForSignAsyncWithHttpInfo($body, $mailbox, $envelope_uuid)
    {
        $returnType = '\Swagger\Client\Model\DocumentForSigningDTO[]';
        $request = $this->getDocumentsForSignRequest($body, $mailbox, $envelope_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDocumentsForSign'
     *
     * @param  \Docstudio\Client\Model\DocumentsForSignRequestDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $envelope_uuid Envelope UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDocumentsForSignRequest($body, $mailbox, $envelope_uuid)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling getDocumentsForSign'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling getDocumentsForSign'
            );
        }
        // verify the required parameter 'envelope_uuid' is set
        if ($envelope_uuid === null || (is_array($envelope_uuid) && count($envelope_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envelope_uuid when calling getDocumentsForSign'
            );
        }

        $resourcePath = '/api/v1/envelope/{envelopeUuid}/for-sign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($envelope_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'envelopeUuid' . '}',
                ObjectSerializer::toPathValue($envelope_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvelopeByUuid
     *
     * Retrieve envelope by UUID
     *
     * @param  string $uuid UUID of envelope to retrieve (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\EnvelopeWithTemplateDTO
     */
    public function getEnvelopeByUuid($uuid, $mailbox)
    {
        list($response) = $this->getEnvelopeByUuidWithHttpInfo($uuid, $mailbox);
        return $response;
    }

    /**
     * Operation getEnvelopeByUuidWithHttpInfo
     *
     * Retrieve envelope by UUID
     *
     * @param  string $uuid UUID of envelope to retrieve (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\EnvelopeWithTemplateDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvelopeByUuidWithHttpInfo($uuid, $mailbox)
    {
        $returnType = '\Swagger\Client\Model\EnvelopeWithTemplateDTO';
        $request = $this->getEnvelopeByUuidRequest($uuid, $mailbox);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EnvelopeWithTemplateDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvelopeByUuidAsync
     *
     * Retrieve envelope by UUID
     *
     * @param  string $uuid UUID of envelope to retrieve (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvelopeByUuidAsync($uuid, $mailbox)
    {
        return $this->getEnvelopeByUuidAsyncWithHttpInfo($uuid, $mailbox)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvelopeByUuidAsyncWithHttpInfo
     *
     * Retrieve envelope by UUID
     *
     * @param  string $uuid UUID of envelope to retrieve (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvelopeByUuidAsyncWithHttpInfo($uuid, $mailbox)
    {
        $returnType = '\Swagger\Client\Model\EnvelopeWithTemplateDTO';
        $request = $this->getEnvelopeByUuidRequest($uuid, $mailbox);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvelopeByUuid'
     *
     * @param  string $uuid UUID of envelope to retrieve (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnvelopeByUuidRequest($uuid, $mailbox)
    {
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling getEnvelopeByUuid'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling getEnvelopeByUuid'
            );
        }

        $resourcePath = '/api/v1/envelope/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvelopeComments
     *
     * Get envelope comments for each document
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\DocumentCommentsDTO[]
     */
    public function getEnvelopeComments($envelope_uuid, $mailbox)
    {
        list($response) = $this->getEnvelopeCommentsWithHttpInfo($envelope_uuid, $mailbox);
        return $response;
    }

    /**
     * Operation getEnvelopeCommentsWithHttpInfo
     *
     * Get envelope comments for each document
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\DocumentCommentsDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvelopeCommentsWithHttpInfo($envelope_uuid, $mailbox)
    {
        $returnType = '\Swagger\Client\Model\DocumentCommentsDTO[]';
        $request = $this->getEnvelopeCommentsRequest($envelope_uuid, $mailbox);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DocumentCommentsDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvelopeCommentsAsync
     *
     * Get envelope comments for each document
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvelopeCommentsAsync($envelope_uuid, $mailbox)
    {
        return $this->getEnvelopeCommentsAsyncWithHttpInfo($envelope_uuid, $mailbox)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvelopeCommentsAsyncWithHttpInfo
     *
     * Get envelope comments for each document
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvelopeCommentsAsyncWithHttpInfo($envelope_uuid, $mailbox)
    {
        $returnType = '\Swagger\Client\Model\DocumentCommentsDTO[]';
        $request = $this->getEnvelopeCommentsRequest($envelope_uuid, $mailbox);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvelopeComments'
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnvelopeCommentsRequest($envelope_uuid, $mailbox)
    {
        // verify the required parameter 'envelope_uuid' is set
        if ($envelope_uuid === null || (is_array($envelope_uuid) && count($envelope_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envelope_uuid when calling getEnvelopeComments'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling getEnvelopeComments'
            );
        }

        $resourcePath = '/api/v1/envelope/{envelopeUuid}/comment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($envelope_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'envelopeUuid' . '}',
                ObjectSerializer::toPathValue($envelope_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvelopeInviteAuthorized
     *
     * Get information about envelope by the invitation code (by already registered user)
     *
     * @param  string $code Invitation code from email (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\InvitedEnvelopeInfoDTO
     */
    public function getEnvelopeInviteAuthorized($code)
    {
        list($response) = $this->getEnvelopeInviteAuthorizedWithHttpInfo($code);
        return $response;
    }

    /**
     * Operation getEnvelopeInviteAuthorizedWithHttpInfo
     *
     * Get information about envelope by the invitation code (by already registered user)
     *
     * @param  string $code Invitation code from email (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\InvitedEnvelopeInfoDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvelopeInviteAuthorizedWithHttpInfo($code)
    {
        $returnType = '\Swagger\Client\Model\InvitedEnvelopeInfoDTO';
        $request = $this->getEnvelopeInviteAuthorizedRequest($code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InvitedEnvelopeInfoDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvelopeInviteAuthorizedAsync
     *
     * Get information about envelope by the invitation code (by already registered user)
     *
     * @param  string $code Invitation code from email (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvelopeInviteAuthorizedAsync($code)
    {
        return $this->getEnvelopeInviteAuthorizedAsyncWithHttpInfo($code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvelopeInviteAuthorizedAsyncWithHttpInfo
     *
     * Get information about envelope by the invitation code (by already registered user)
     *
     * @param  string $code Invitation code from email (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvelopeInviteAuthorizedAsyncWithHttpInfo($code)
    {
        $returnType = '\Swagger\Client\Model\InvitedEnvelopeInfoDTO';
        $request = $this->getEnvelopeInviteAuthorizedRequest($code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvelopeInviteAuthorized'
     *
     * @param  string $code Invitation code from email (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnvelopeInviteAuthorizedRequest($code)
    {
        // verify the required parameter 'code' is set
        if ($code === null || (is_array($code) && count($code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $code when calling getEnvelopeInviteAuthorized'
            );
        }

        $resourcePath = '/api/v1/envelope/invite-authorized-info';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($code !== null) {
            $queryParams['code'] = ObjectSerializer::toQueryValue($code, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvelopeInviteUnauthorized
     *
     * Get information about envelope by the invitation code (by unauthenticated user)
     *
     * @param  string $code Invitation code from email (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\InvitedEnvelopeInfoDTO
     */
    public function getEnvelopeInviteUnauthorized($code)
    {
        list($response) = $this->getEnvelopeInviteUnauthorizedWithHttpInfo($code);
        return $response;
    }

    /**
     * Operation getEnvelopeInviteUnauthorizedWithHttpInfo
     *
     * Get information about envelope by the invitation code (by unauthenticated user)
     *
     * @param  string $code Invitation code from email (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\InvitedEnvelopeInfoDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvelopeInviteUnauthorizedWithHttpInfo($code)
    {
        $returnType = '\Swagger\Client\Model\InvitedEnvelopeInfoDTO';
        $request = $this->getEnvelopeInviteUnauthorizedRequest($code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InvitedEnvelopeInfoDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvelopeInviteUnauthorizedAsync
     *
     * Get information about envelope by the invitation code (by unauthenticated user)
     *
     * @param  string $code Invitation code from email (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvelopeInviteUnauthorizedAsync($code)
    {
        return $this->getEnvelopeInviteUnauthorizedAsyncWithHttpInfo($code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvelopeInviteUnauthorizedAsyncWithHttpInfo
     *
     * Get information about envelope by the invitation code (by unauthenticated user)
     *
     * @param  string $code Invitation code from email (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvelopeInviteUnauthorizedAsyncWithHttpInfo($code)
    {
        $returnType = '\Swagger\Client\Model\InvitedEnvelopeInfoDTO';
        $request = $this->getEnvelopeInviteUnauthorizedRequest($code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvelopeInviteUnauthorized'
     *
     * @param  string $code Invitation code from email (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnvelopeInviteUnauthorizedRequest($code)
    {
        // verify the required parameter 'code' is set
        if ($code === null || (is_array($code) && count($code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $code when calling getEnvelopeInviteUnauthorized'
            );
        }

        $resourcePath = '/api/v1/envelope/invite-info';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($code !== null) {
            $queryParams['code'] = ObjectSerializer::toQueryValue($code, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvelopeSharedZip
     *
     * Get shared zip archive
     *
     * @param  string $code Code for downloading (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getEnvelopeSharedZip($code)
    {
        list($response) = $this->getEnvelopeSharedZipWithHttpInfo($code);
        return $response;
    }

    /**
     * Operation getEnvelopeSharedZipWithHttpInfo
     *
     * Get shared zip archive
     *
     * @param  string $code Code for downloading (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvelopeSharedZipWithHttpInfo($code)
    {
        $returnType = 'string';
        $request = $this->getEnvelopeSharedZipRequest($code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvelopeSharedZipAsync
     *
     * Get shared zip archive
     *
     * @param  string $code Code for downloading (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvelopeSharedZipAsync($code)
    {
        return $this->getEnvelopeSharedZipAsyncWithHttpInfo($code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvelopeSharedZipAsyncWithHttpInfo
     *
     * Get shared zip archive
     *
     * @param  string $code Code for downloading (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvelopeSharedZipAsyncWithHttpInfo($code)
    {
        $returnType = 'string';
        $request = $this->getEnvelopeSharedZipRequest($code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvelopeSharedZip'
     *
     * @param  string $code Code for downloading (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnvelopeSharedZipRequest($code)
    {
        // verify the required parameter 'code' is set
        if ($code === null || (is_array($code) && count($code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $code when calling getEnvelopeSharedZip'
            );
        }

        $resourcePath = '/api/v1/envelope/download-shared';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($code !== null) {
            $queryParams['code'] = ObjectSerializer::toQueryValue($code, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvelopeZip
     *
     * Get envelope or document zip archive
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $document_id Document id (optional)
     * @param  string $exclude_files Mask to exclude some files. c - for signature/processing Certificate, p - for Printable version, a - for Audit trail (optional)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getEnvelopeZip($envelope_uuid, $mailbox, $document_id = null, $exclude_files = null)
    {
        list($response) = $this->getEnvelopeZipWithHttpInfo($envelope_uuid, $mailbox, $document_id, $exclude_files);
        return $response;
    }

    /**
     * Operation getEnvelopeZipWithHttpInfo
     *
     * Get envelope or document zip archive
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $document_id Document id (optional)
     * @param  string $exclude_files Mask to exclude some files. c - for signature/processing Certificate, p - for Printable version, a - for Audit trail (optional)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvelopeZipWithHttpInfo($envelope_uuid, $mailbox, $document_id = null, $exclude_files = null)
    {
        $returnType = 'string';
        $request = $this->getEnvelopeZipRequest($envelope_uuid, $mailbox, $document_id, $exclude_files);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvelopeZipAsync
     *
     * Get envelope or document zip archive
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $document_id Document id (optional)
     * @param  string $exclude_files Mask to exclude some files. c - for signature/processing Certificate, p - for Printable version, a - for Audit trail (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvelopeZipAsync($envelope_uuid, $mailbox, $document_id = null, $exclude_files = null)
    {
        return $this->getEnvelopeZipAsyncWithHttpInfo($envelope_uuid, $mailbox, $document_id, $exclude_files)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvelopeZipAsyncWithHttpInfo
     *
     * Get envelope or document zip archive
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $document_id Document id (optional)
     * @param  string $exclude_files Mask to exclude some files. c - for signature/processing Certificate, p - for Printable version, a - for Audit trail (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvelopeZipAsyncWithHttpInfo($envelope_uuid, $mailbox, $document_id = null, $exclude_files = null)
    {
        $returnType = 'string';
        $request = $this->getEnvelopeZipRequest($envelope_uuid, $mailbox, $document_id, $exclude_files);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvelopeZip'
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $document_id Document id (optional)
     * @param  string $exclude_files Mask to exclude some files. c - for signature/processing Certificate, p - for Printable version, a - for Audit trail (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnvelopeZipRequest($envelope_uuid, $mailbox, $document_id = null, $exclude_files = null)
    {
        // verify the required parameter 'envelope_uuid' is set
        if ($envelope_uuid === null || (is_array($envelope_uuid) && count($envelope_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envelope_uuid when calling getEnvelopeZip'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling getEnvelopeZip'
            );
        }

        $resourcePath = '/api/v1/envelope/{envelopeUuid}/zip';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($document_id !== null) {
            $queryParams['documentId'] = ObjectSerializer::toQueryValue($document_id, null);
        }
        // query params
        if ($exclude_files !== null) {
            $queryParams['excludeFiles'] = ObjectSerializer::toQueryValue($exclude_files, null);
        }
        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($envelope_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'envelopeUuid' . '}',
                ObjectSerializer::toPathValue($envelope_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUserPendingInvitations
     *
     * Get user's pending invitations
     *
     * @param  int $offset Offset, how much envelopes to skip (optional, default to 0)
     * @param  int $limit Limit, how much envelopes to retrieve (optional, default to 25)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\PageDTOEnvelopeToMailboxDTO
     */
    public function getUserPendingInvitations($offset = '0', $limit = '25')
    {
        list($response) = $this->getUserPendingInvitationsWithHttpInfo($offset, $limit);
        return $response;
    }

    /**
     * Operation getUserPendingInvitationsWithHttpInfo
     *
     * Get user's pending invitations
     *
     * @param  int $offset Offset, how much envelopes to skip (optional, default to 0)
     * @param  int $limit Limit, how much envelopes to retrieve (optional, default to 25)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\PageDTOEnvelopeToMailboxDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserPendingInvitationsWithHttpInfo($offset = '0', $limit = '25')
    {
        $returnType = '\Swagger\Client\Model\PageDTOEnvelopeToMailboxDTO';
        $request = $this->getUserPendingInvitationsRequest($offset, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PageDTOEnvelopeToMailboxDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUserPendingInvitationsAsync
     *
     * Get user's pending invitations
     *
     * @param  int $offset Offset, how much envelopes to skip (optional, default to 0)
     * @param  int $limit Limit, how much envelopes to retrieve (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserPendingInvitationsAsync($offset = '0', $limit = '25')
    {
        return $this->getUserPendingInvitationsAsyncWithHttpInfo($offset, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUserPendingInvitationsAsyncWithHttpInfo
     *
     * Get user's pending invitations
     *
     * @param  int $offset Offset, how much envelopes to skip (optional, default to 0)
     * @param  int $limit Limit, how much envelopes to retrieve (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserPendingInvitationsAsyncWithHttpInfo($offset = '0', $limit = '25')
    {
        $returnType = '\Swagger\Client\Model\PageDTOEnvelopeToMailboxDTO';
        $request = $this->getUserPendingInvitationsRequest($offset, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUserPendingInvitations'
     *
     * @param  int $offset Offset, how much envelopes to skip (optional, default to 0)
     * @param  int $limit Limit, how much envelopes to retrieve (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getUserPendingInvitationsRequest($offset = '0', $limit = '25')
    {

        $resourcePath = '/api/v1/envelope/invitations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, 'int32');
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, 'int32');
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mergeEnvelopesIntoChain
     *
     * Merge envelopes into chain
     *
     * @param  string[] $body body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\SingleUuidDTO
     */
    public function mergeEnvelopesIntoChain($body, $mailbox)
    {
        list($response) = $this->mergeEnvelopesIntoChainWithHttpInfo($body, $mailbox);
        return $response;
    }

    /**
     * Operation mergeEnvelopesIntoChainWithHttpInfo
     *
     * Merge envelopes into chain
     *
     * @param  string[] $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\SingleUuidDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function mergeEnvelopesIntoChainWithHttpInfo($body, $mailbox)
    {
        $returnType = '\Swagger\Client\Model\SingleUuidDTO';
        $request = $this->mergeEnvelopesIntoChainRequest($body, $mailbox);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SingleUuidDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mergeEnvelopesIntoChainAsync
     *
     * Merge envelopes into chain
     *
     * @param  string[] $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeEnvelopesIntoChainAsync($body, $mailbox)
    {
        return $this->mergeEnvelopesIntoChainAsyncWithHttpInfo($body, $mailbox)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mergeEnvelopesIntoChainAsyncWithHttpInfo
     *
     * Merge envelopes into chain
     *
     * @param  string[] $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeEnvelopesIntoChainAsyncWithHttpInfo($body, $mailbox)
    {
        $returnType = '\Swagger\Client\Model\SingleUuidDTO';
        $request = $this->mergeEnvelopesIntoChainRequest($body, $mailbox);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mergeEnvelopesIntoChain'
     *
     * @param  string[] $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mergeEnvelopesIntoChainRequest($body, $mailbox)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling mergeEnvelopesIntoChain'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling mergeEnvelopesIntoChain'
            );
        }

        $resourcePath = '/api/v1/envelope/chain';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation quickSendExternalDocuments
     *
     * Quick send envelope with external documents only
     *
     * @param  string[] $files files (required)
     * @param  \Docstudio\Client\Model\QuickSendDTO $data data (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\SingleUuidDTO
     */
    public function quickSendExternalDocuments($files, $data, $mailbox)
    {
        list($response) = $this->quickSendExternalDocumentsWithHttpInfo($files, $data, $mailbox);
        return $response;
    }

    /**
     * Operation quickSendExternalDocumentsWithHttpInfo
     *
     * Quick send envelope with external documents only
     *
     * @param  string[] $files (required)
     * @param  \Docstudio\Client\Model\QuickSendDTO $data (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\SingleUuidDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function quickSendExternalDocumentsWithHttpInfo($files, $data, $mailbox)
    {
        $returnType = '\Swagger\Client\Model\SingleUuidDTO';
        $request = $this->quickSendExternalDocumentsRequest($files, $data, $mailbox);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SingleUuidDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation quickSendExternalDocumentsAsync
     *
     * Quick send envelope with external documents only
     *
     * @param  string[] $files (required)
     * @param  \Docstudio\Client\Model\QuickSendDTO $data (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function quickSendExternalDocumentsAsync($files, $data, $mailbox)
    {
        return $this->quickSendExternalDocumentsAsyncWithHttpInfo($files, $data, $mailbox)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation quickSendExternalDocumentsAsyncWithHttpInfo
     *
     * Quick send envelope with external documents only
     *
     * @param  string[] $files (required)
     * @param  \Docstudio\Client\Model\QuickSendDTO $data (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function quickSendExternalDocumentsAsyncWithHttpInfo($files, $data, $mailbox)
    {
        $returnType = '\Swagger\Client\Model\SingleUuidDTO';
        $request = $this->quickSendExternalDocumentsRequest($files, $data, $mailbox);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'quickSendExternalDocuments'
     *
     * @param  string[] $files (required)
     * @param  \Docstudio\Client\Model\QuickSendDTO $data (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function quickSendExternalDocumentsRequest($files, $data, $mailbox)
    {
        // verify the required parameter 'files' is set
        if ($files === null || (is_array($files) && count($files) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $files when calling quickSendExternalDocuments'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling quickSendExternalDocuments'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling quickSendExternalDocuments'
            );
        }

        $resourcePath = '/api/v1/envelope/quick-send';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }


        // form params
        if ($files !== null) {
            $formParams['files'] = ObjectSerializer::toFormValue($files);
        }
        // form params
        if ($data !== null) {
            $formParams['data'] = ObjectSerializer::toFormValue($data);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeEnvelopeFromChain
     *
     * Remove envelope from chain
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeEnvelopeFromChain($envelope_uuid, $mailbox)
    {
        $this->removeEnvelopeFromChainWithHttpInfo($envelope_uuid, $mailbox);
    }

    /**
     * Operation removeEnvelopeFromChainWithHttpInfo
     *
     * Remove envelope from chain
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeEnvelopeFromChainWithHttpInfo($envelope_uuid, $mailbox)
    {
        $returnType = '';
        $request = $this->removeEnvelopeFromChainRequest($envelope_uuid, $mailbox);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeEnvelopeFromChainAsync
     *
     * Remove envelope from chain
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeEnvelopeFromChainAsync($envelope_uuid, $mailbox)
    {
        return $this->removeEnvelopeFromChainAsyncWithHttpInfo($envelope_uuid, $mailbox)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeEnvelopeFromChainAsyncWithHttpInfo
     *
     * Remove envelope from chain
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeEnvelopeFromChainAsyncWithHttpInfo($envelope_uuid, $mailbox)
    {
        $returnType = '';
        $request = $this->removeEnvelopeFromChainRequest($envelope_uuid, $mailbox);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeEnvelopeFromChain'
     *
     * @param  string $envelope_uuid Envelope UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function removeEnvelopeFromChainRequest($envelope_uuid, $mailbox)
    {
        // verify the required parameter 'envelope_uuid' is set
        if ($envelope_uuid === null || (is_array($envelope_uuid) && count($envelope_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envelope_uuid when calling removeEnvelopeFromChain'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling removeEnvelopeFromChain'
            );
        }

        $resourcePath = '/api/v1/envelope/{envelopeUuid}/chain';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($envelope_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'envelopeUuid' . '}',
                ObjectSerializer::toPathValue($envelope_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation resendNotifications
     *
     * Resend notifications for active roles
     *
     * @param  \Docstudio\Client\Model\ReportEnvelopeRequestDTO $body body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function resendNotifications($body, $mailbox)
    {
        $this->resendNotificationsWithHttpInfo($body, $mailbox);
    }

    /**
     * Operation resendNotificationsWithHttpInfo
     *
     * Resend notifications for active roles
     *
     * @param  \Docstudio\Client\Model\ReportEnvelopeRequestDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function resendNotificationsWithHttpInfo($body, $mailbox)
    {
        $returnType = '';
        $request = $this->resendNotificationsRequest($body, $mailbox);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation resendNotificationsAsync
     *
     * Resend notifications for active roles
     *
     * @param  \Docstudio\Client\Model\ReportEnvelopeRequestDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resendNotificationsAsync($body, $mailbox)
    {
        return $this->resendNotificationsAsyncWithHttpInfo($body, $mailbox)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation resendNotificationsAsyncWithHttpInfo
     *
     * Resend notifications for active roles
     *
     * @param  \Docstudio\Client\Model\ReportEnvelopeRequestDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resendNotificationsAsyncWithHttpInfo($body, $mailbox)
    {
        $returnType = '';
        $request = $this->resendNotificationsRequest($body, $mailbox);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'resendNotifications'
     *
     * @param  \Docstudio\Client\Model\ReportEnvelopeRequestDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function resendNotificationsRequest($body, $mailbox)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling resendNotifications'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling resendNotifications'
            );
        }

        $resourcePath = '/api/v1/envelope/notify';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation resolvedEnvelopeComment
     *
     * Set Resolved Flag for comment thread
     *
     * @param  \Docstudio\Client\Model\ResolveCommentThreadDTO $body body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $envelope_uuid Envelope UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function resolvedEnvelopeComment($body, $mailbox, $envelope_uuid)
    {
        $this->resolvedEnvelopeCommentWithHttpInfo($body, $mailbox, $envelope_uuid);
    }

    /**
     * Operation resolvedEnvelopeCommentWithHttpInfo
     *
     * Set Resolved Flag for comment thread
     *
     * @param  \Docstudio\Client\Model\ResolveCommentThreadDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $envelope_uuid Envelope UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function resolvedEnvelopeCommentWithHttpInfo($body, $mailbox, $envelope_uuid)
    {
        $returnType = '';
        $request = $this->resolvedEnvelopeCommentRequest($body, $mailbox, $envelope_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation resolvedEnvelopeCommentAsync
     *
     * Set Resolved Flag for comment thread
     *
     * @param  \Docstudio\Client\Model\ResolveCommentThreadDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $envelope_uuid Envelope UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resolvedEnvelopeCommentAsync($body, $mailbox, $envelope_uuid)
    {
        return $this->resolvedEnvelopeCommentAsyncWithHttpInfo($body, $mailbox, $envelope_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation resolvedEnvelopeCommentAsyncWithHttpInfo
     *
     * Set Resolved Flag for comment thread
     *
     * @param  \Docstudio\Client\Model\ResolveCommentThreadDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $envelope_uuid Envelope UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resolvedEnvelopeCommentAsyncWithHttpInfo($body, $mailbox, $envelope_uuid)
    {
        $returnType = '';
        $request = $this->resolvedEnvelopeCommentRequest($body, $mailbox, $envelope_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'resolvedEnvelopeComment'
     *
     * @param  \Docstudio\Client\Model\ResolveCommentThreadDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $envelope_uuid Envelope UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function resolvedEnvelopeCommentRequest($body, $mailbox, $envelope_uuid)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling resolvedEnvelopeComment'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling resolvedEnvelopeComment'
            );
        }
        // verify the required parameter 'envelope_uuid' is set
        if ($envelope_uuid === null || (is_array($envelope_uuid) && count($envelope_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envelope_uuid when calling resolvedEnvelopeComment'
            );
        }

        $resourcePath = '/api/v1/envelope/{envelopeUuid}/resolve-comment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($envelope_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'envelopeUuid' . '}',
                ObjectSerializer::toPathValue($envelope_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation send
     *
     * Send envelope
     *
     * @param  \Docstudio\Client\Model\EnvPostDTO $body body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\SingleUuidDTO
     */
    public function send($body, $mailbox)
    {
        list($response) = $this->sendWithHttpInfo($body, $mailbox);
        return $response;
    }

    /**
     * Operation sendWithHttpInfo
     *
     * Send envelope
     *
     * @param  \Docstudio\Client\Model\EnvPostDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\SingleUuidDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendWithHttpInfo($body, $mailbox)
    {
        $returnType = '\Swagger\Client\Model\SingleUuidDTO';
        $request = $this->sendRequest($body, $mailbox);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SingleUuidDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendAsync
     *
     * Send envelope
     *
     * @param  \Docstudio\Client\Model\EnvPostDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendAsync($body, $mailbox)
    {
        return $this->sendAsyncWithHttpInfo($body, $mailbox)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendAsyncWithHttpInfo
     *
     * Send envelope
     *
     * @param  \Docstudio\Client\Model\EnvPostDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendAsyncWithHttpInfo($body, $mailbox)
    {
        $returnType = '\Swagger\Client\Model\SingleUuidDTO';
        $request = $this->sendRequest($body, $mailbox);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'send'
     *
     * @param  \Docstudio\Client\Model\EnvPostDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendRequest($body, $mailbox)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling send'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling send'
            );
        }

        $resourcePath = '/api/v1/envelope/send';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendByTemplateCode
     *
     * Send envelope by template code
     *
     * @param  \Docstudio\Client\Model\SendEnvByCodeDTO $body body (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\SingleUuidDTO
     */
    public function sendByTemplateCode($body)
    {
        list($response) = $this->sendByTemplateCodeWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation sendByTemplateCodeWithHttpInfo
     *
     * Send envelope by template code
     *
     * @param  \Docstudio\Client\Model\SendEnvByCodeDTO $body (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\SingleUuidDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendByTemplateCodeWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\SingleUuidDTO';
        $request = $this->sendByTemplateCodeRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SingleUuidDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendByTemplateCodeAsync
     *
     * Send envelope by template code
     *
     * @param  \Docstudio\Client\Model\SendEnvByCodeDTO $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendByTemplateCodeAsync($body)
    {
        return $this->sendByTemplateCodeAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendByTemplateCodeAsyncWithHttpInfo
     *
     * Send envelope by template code
     *
     * @param  \Docstudio\Client\Model\SendEnvByCodeDTO $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendByTemplateCodeAsyncWithHttpInfo($body)
    {
        $returnType = '\Swagger\Client\Model\SingleUuidDTO';
        $request = $this->sendByTemplateCodeRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendByTemplateCode'
     *
     * @param  \Docstudio\Client\Model\SendEnvByCodeDTO $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendByTemplateCodeRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling sendByTemplateCode'
            );
        }

        $resourcePath = '/api/v1/envelope/send-by-share-code';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendForApproval
     *
     * Send envelope for approval
     *
     * @param  \Docstudio\Client\Model\EnvelopeApprovalRequestDTO $body body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sendForApproval($body, $mailbox)
    {
        $this->sendForApprovalWithHttpInfo($body, $mailbox);
    }

    /**
     * Operation sendForApprovalWithHttpInfo
     *
     * Send envelope for approval
     *
     * @param  \Docstudio\Client\Model\EnvelopeApprovalRequestDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendForApprovalWithHttpInfo($body, $mailbox)
    {
        $returnType = '';
        $request = $this->sendForApprovalRequest($body, $mailbox);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation sendForApprovalAsync
     *
     * Send envelope for approval
     *
     * @param  \Docstudio\Client\Model\EnvelopeApprovalRequestDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendForApprovalAsync($body, $mailbox)
    {
        return $this->sendForApprovalAsyncWithHttpInfo($body, $mailbox)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendForApprovalAsyncWithHttpInfo
     *
     * Send envelope for approval
     *
     * @param  \Docstudio\Client\Model\EnvelopeApprovalRequestDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendForApprovalAsyncWithHttpInfo($body, $mailbox)
    {
        $returnType = '';
        $request = $this->sendForApprovalRequest($body, $mailbox);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendForApproval'
     *
     * @param  \Docstudio\Client\Model\EnvelopeApprovalRequestDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendForApprovalRequest($body, $mailbox)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling sendForApproval'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling sendForApproval'
            );
        }

        $resourcePath = '/api/v1/envelope/send-for-approval';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shareEnvelopesByEmail
     *
     * Share envelopes by email
     *
     * @param  \Docstudio\Client\Model\EnvelopeSharedArchiveRequestDTO $body body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shareEnvelopesByEmail($body, $mailbox)
    {
        $this->shareEnvelopesByEmailWithHttpInfo($body, $mailbox);
    }

    /**
     * Operation shareEnvelopesByEmailWithHttpInfo
     *
     * Share envelopes by email
     *
     * @param  \Docstudio\Client\Model\EnvelopeSharedArchiveRequestDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shareEnvelopesByEmailWithHttpInfo($body, $mailbox)
    {
        $returnType = '';
        $request = $this->shareEnvelopesByEmailRequest($body, $mailbox);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shareEnvelopesByEmailAsync
     *
     * Share envelopes by email
     *
     * @param  \Docstudio\Client\Model\EnvelopeSharedArchiveRequestDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shareEnvelopesByEmailAsync($body, $mailbox)
    {
        return $this->shareEnvelopesByEmailAsyncWithHttpInfo($body, $mailbox)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shareEnvelopesByEmailAsyncWithHttpInfo
     *
     * Share envelopes by email
     *
     * @param  \Docstudio\Client\Model\EnvelopeSharedArchiveRequestDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shareEnvelopesByEmailAsyncWithHttpInfo($body, $mailbox)
    {
        $returnType = '';
        $request = $this->shareEnvelopesByEmailRequest($body, $mailbox);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shareEnvelopesByEmail'
     *
     * @param  \Docstudio\Client\Model\EnvelopeSharedArchiveRequestDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shareEnvelopesByEmailRequest($body, $mailbox)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling shareEnvelopesByEmail'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling shareEnvelopesByEmail'
            );
        }

        $resourcePath = '/api/v1/envelope/share';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sign
     *
     * Sign envelope documents
     *
     * @param  \Docstudio\Client\Model\EnvelopeDocumentSignaturesDTO[] $body body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $envelope_uuid Envelope to update (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sign($body, $mailbox, $envelope_uuid)
    {
        $this->signWithHttpInfo($body, $mailbox, $envelope_uuid);
    }

    /**
     * Operation signWithHttpInfo
     *
     * Sign envelope documents
     *
     * @param  \Docstudio\Client\Model\EnvelopeDocumentSignaturesDTO[] $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $envelope_uuid Envelope to update (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function signWithHttpInfo($body, $mailbox, $envelope_uuid)
    {
        $returnType = '';
        $request = $this->signRequest($body, $mailbox, $envelope_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation signAsync
     *
     * Sign envelope documents
     *
     * @param  \Docstudio\Client\Model\EnvelopeDocumentSignaturesDTO[] $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $envelope_uuid Envelope to update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function signAsync($body, $mailbox, $envelope_uuid)
    {
        return $this->signAsyncWithHttpInfo($body, $mailbox, $envelope_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation signAsyncWithHttpInfo
     *
     * Sign envelope documents
     *
     * @param  \Docstudio\Client\Model\EnvelopeDocumentSignaturesDTO[] $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $envelope_uuid Envelope to update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function signAsyncWithHttpInfo($body, $mailbox, $envelope_uuid)
    {
        $returnType = '';
        $request = $this->signRequest($body, $mailbox, $envelope_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sign'
     *
     * @param  \Docstudio\Client\Model\EnvelopeDocumentSignaturesDTO[] $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $envelope_uuid Envelope to update (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function signRequest($body, $mailbox, $envelope_uuid)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling sign'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling sign'
            );
        }
        // verify the required parameter 'envelope_uuid' is set
        if ($envelope_uuid === null || (is_array($envelope_uuid) && count($envelope_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envelope_uuid when calling sign'
            );
        }

        $resourcePath = '/api/v1/envelope/{envelopeUuid}/sign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($envelope_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'envelopeUuid' . '}',
                ObjectSerializer::toPathValue($envelope_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEnvelope
     *
     * Update draft envelope
     *
     * @param  \Docstudio\Client\Model\EnvPostDTO $body body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateEnvelope($body, $mailbox)
    {
        $this->updateEnvelopeWithHttpInfo($body, $mailbox);
    }

    /**
     * Operation updateEnvelopeWithHttpInfo
     *
     * Update draft envelope
     *
     * @param  \Docstudio\Client\Model\EnvPostDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEnvelopeWithHttpInfo($body, $mailbox)
    {
        $returnType = '';
        $request = $this->updateEnvelopeRequest($body, $mailbox);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateEnvelopeAsync
     *
     * Update draft envelope
     *
     * @param  \Docstudio\Client\Model\EnvPostDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEnvelopeAsync($body, $mailbox)
    {
        return $this->updateEnvelopeAsyncWithHttpInfo($body, $mailbox)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEnvelopeAsyncWithHttpInfo
     *
     * Update draft envelope
     *
     * @param  \Docstudio\Client\Model\EnvPostDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEnvelopeAsyncWithHttpInfo($body, $mailbox)
    {
        $returnType = '';
        $request = $this->updateEnvelopeRequest($body, $mailbox);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEnvelope'
     *
     * @param  \Docstudio\Client\Model\EnvPostDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateEnvelopeRequest($body, $mailbox)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateEnvelope'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling updateEnvelope'
            );
        }

        $resourcePath = '/api/v1/envelope';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEnvelopeComment
     *
     * Add/Update envelope comment in thread
     *
     * @param  \Docstudio\Client\Model\CommentPutDTO $body body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $envelope_uuid Envelope UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\CommentThreadDTO
     */
    public function updateEnvelopeComment($body, $mailbox, $envelope_uuid)
    {
        list($response) = $this->updateEnvelopeCommentWithHttpInfo($body, $mailbox, $envelope_uuid);
        return $response;
    }

    /**
     * Operation updateEnvelopeCommentWithHttpInfo
     *
     * Add/Update envelope comment in thread
     *
     * @param  \Docstudio\Client\Model\CommentPutDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $envelope_uuid Envelope UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\CommentThreadDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEnvelopeCommentWithHttpInfo($body, $mailbox, $envelope_uuid)
    {
        $returnType = '\Swagger\Client\Model\CommentThreadDTO';
        $request = $this->updateEnvelopeCommentRequest($body, $mailbox, $envelope_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CommentThreadDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEnvelopeCommentAsync
     *
     * Add/Update envelope comment in thread
     *
     * @param  \Docstudio\Client\Model\CommentPutDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $envelope_uuid Envelope UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEnvelopeCommentAsync($body, $mailbox, $envelope_uuid)
    {
        return $this->updateEnvelopeCommentAsyncWithHttpInfo($body, $mailbox, $envelope_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEnvelopeCommentAsyncWithHttpInfo
     *
     * Add/Update envelope comment in thread
     *
     * @param  \Docstudio\Client\Model\CommentPutDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $envelope_uuid Envelope UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEnvelopeCommentAsyncWithHttpInfo($body, $mailbox, $envelope_uuid)
    {
        $returnType = '\Swagger\Client\Model\CommentThreadDTO';
        $request = $this->updateEnvelopeCommentRequest($body, $mailbox, $envelope_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEnvelopeComment'
     *
     * @param  \Docstudio\Client\Model\CommentPutDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $envelope_uuid Envelope UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateEnvelopeCommentRequest($body, $mailbox, $envelope_uuid)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateEnvelopeComment'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling updateEnvelopeComment'
            );
        }
        // verify the required parameter 'envelope_uuid' is set
        if ($envelope_uuid === null || (is_array($envelope_uuid) && count($envelope_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envelope_uuid when calling updateEnvelopeComment'
            );
        }

        $resourcePath = '/api/v1/envelope/{envelopeUuid}/comment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($envelope_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'envelopeUuid' . '}',
                ObjectSerializer::toPathValue($envelope_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEnvelopeCommentAccess
     *
     * Update envelope comment thread access level
     *
     * @param  \Docstudio\Client\Model\CommentAccessDTO $body body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $envelope_uuid Envelope UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Docstudio\Client\Model\CommentThreadDTO
     */
    public function updateEnvelopeCommentAccess($body, $mailbox, $envelope_uuid)
    {
        list($response) = $this->updateEnvelopeCommentAccessWithHttpInfo($body, $mailbox, $envelope_uuid);
        return $response;
    }

    /**
     * Operation updateEnvelopeCommentAccessWithHttpInfo
     *
     * Update envelope comment thread access level
     *
     * @param  \Docstudio\Client\Model\CommentAccessDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $envelope_uuid Envelope UUID (required)
     *
     * @throws \Docstudio\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Docstudio\Client\Model\CommentThreadDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEnvelopeCommentAccessWithHttpInfo($body, $mailbox, $envelope_uuid)
    {
        $returnType = '\Swagger\Client\Model\CommentThreadDTO';
        $request = $this->updateEnvelopeCommentAccessRequest($body, $mailbox, $envelope_uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CommentThreadDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEnvelopeCommentAccessAsync
     *
     * Update envelope comment thread access level
     *
     * @param  \Docstudio\Client\Model\CommentAccessDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $envelope_uuid Envelope UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEnvelopeCommentAccessAsync($body, $mailbox, $envelope_uuid)
    {
        return $this->updateEnvelopeCommentAccessAsyncWithHttpInfo($body, $mailbox, $envelope_uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEnvelopeCommentAccessAsyncWithHttpInfo
     *
     * Update envelope comment thread access level
     *
     * @param  \Docstudio\Client\Model\CommentAccessDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $envelope_uuid Envelope UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEnvelopeCommentAccessAsyncWithHttpInfo($body, $mailbox, $envelope_uuid)
    {
        $returnType = '\Swagger\Client\Model\CommentThreadDTO';
        $request = $this->updateEnvelopeCommentAccessRequest($body, $mailbox, $envelope_uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEnvelopeCommentAccess'
     *
     * @param  \Docstudio\Client\Model\CommentAccessDTO $body (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (required)
     * @param  string $envelope_uuid Envelope UUID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateEnvelopeCommentAccessRequest($body, $mailbox, $envelope_uuid)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateEnvelopeCommentAccess'
            );
        }
        // verify the required parameter 'mailbox' is set
        if ($mailbox === null || (is_array($mailbox) && count($mailbox) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mailbox when calling updateEnvelopeCommentAccess'
            );
        }
        // verify the required parameter 'envelope_uuid' is set
        if ($envelope_uuid === null || (is_array($envelope_uuid) && count($envelope_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envelope_uuid when calling updateEnvelopeCommentAccess'
            );
        }

        $resourcePath = '/api/v1/envelope/{envelopeUuid}/comment-access';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($envelope_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'envelopeUuid' . '}',
                ObjectSerializer::toPathValue($envelope_uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
