<?php
/**
 * PermissionAccountControllerApi
 * PHP version 7.4
 *
 * @category Class
 * @package  DocStudio\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DocStudio Api Documentation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R110.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DocStudio\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use DocStudio\Client\ApiException;
use DocStudio\Client\Configuration;
use DocStudio\Client\HeaderSelector;
use DocStudio\Client\ObjectSerializer;

/**
 * PermissionAccountControllerApi Class Doc Comment
 *
 * @category Class
 * @package  DocStudio\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PermissionAccountControllerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'deleteAccAllPermissions' => [
            'application/json',
        ],
        'deleteAccPermission' => [
            'application/json',
        ],
        'deleteAccRole' => [
            'application/json',
        ],
        'getUserAccountPermissions' => [
            'application/json',
        ],
        'patchMbPermissionsPermissionAccount' => [
            'application/json',
        ],
        'replaceAllPermissionsPermissionAccount' => [
            'application/json',
        ],
        'setUserAccountPermissions' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteAccAllPermissions
     *
     * Delete user from account totally
     *
     * @param  string $user_uuid UUID of User (required)
     * @param  string $account_uuid UUID of account (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccAllPermissions'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAccAllPermissions($user_uuid, $account_uuid, string $contentType = self::contentTypes['deleteAccAllPermissions'][0])
    {
        $this->deleteAccAllPermissionsWithHttpInfo($user_uuid, $account_uuid, $contentType);
    }

    /**
     * Operation deleteAccAllPermissionsWithHttpInfo
     *
     * Delete user from account totally
     *
     * @param  string $user_uuid UUID of User (required)
     * @param  string $account_uuid UUID of account (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccAllPermissions'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAccAllPermissionsWithHttpInfo($user_uuid, $account_uuid, string $contentType = self::contentTypes['deleteAccAllPermissions'][0])
    {
        $request = $this->deleteAccAllPermissionsRequest($user_uuid, $account_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAccAllPermissionsAsync
     *
     * Delete user from account totally
     *
     * @param  string $user_uuid UUID of User (required)
     * @param  string $account_uuid UUID of account (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccAllPermissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAccAllPermissionsAsync($user_uuid, $account_uuid, string $contentType = self::contentTypes['deleteAccAllPermissions'][0])
    {
        return $this->deleteAccAllPermissionsAsyncWithHttpInfo($user_uuid, $account_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAccAllPermissionsAsyncWithHttpInfo
     *
     * Delete user from account totally
     *
     * @param  string $user_uuid UUID of User (required)
     * @param  string $account_uuid UUID of account (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccAllPermissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAccAllPermissionsAsyncWithHttpInfo($user_uuid, $account_uuid, string $contentType = self::contentTypes['deleteAccAllPermissions'][0])
    {
        $returnType = '';
        $request = $this->deleteAccAllPermissionsRequest($user_uuid, $account_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAccAllPermissions'
     *
     * @param  string $user_uuid UUID of User (required)
     * @param  string $account_uuid UUID of account (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccAllPermissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAccAllPermissionsRequest($user_uuid, $account_uuid, string $contentType = self::contentTypes['deleteAccAllPermissions'][0])
    {

        // verify the required parameter 'user_uuid' is set
        if ($user_uuid === null || (is_array($user_uuid) && count($user_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_uuid when calling deleteAccAllPermissions'
            );
        }

        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling deleteAccAllPermissions'
            );
        }


        $resourcePath = '/api/v1/permission/{userUuid}/account/{accountUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'userUuid' . '}',
                ObjectSerializer::toPathValue($user_uuid),
                $resourcePath
            );
        }
        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAccPermission
     *
     * Delete permission for specific &#39;user-to-account&#39; relation
     *
     * @param  string $user_uuid UUID of User (required)
     * @param  string $account_uuid UUID of account (required)
     * @param  int $permission_id Permission Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccPermission'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAccPermission($user_uuid, $account_uuid, $permission_id, string $contentType = self::contentTypes['deleteAccPermission'][0])
    {
        $this->deleteAccPermissionWithHttpInfo($user_uuid, $account_uuid, $permission_id, $contentType);
    }

    /**
     * Operation deleteAccPermissionWithHttpInfo
     *
     * Delete permission for specific &#39;user-to-account&#39; relation
     *
     * @param  string $user_uuid UUID of User (required)
     * @param  string $account_uuid UUID of account (required)
     * @param  int $permission_id Permission Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccPermission'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAccPermissionWithHttpInfo($user_uuid, $account_uuid, $permission_id, string $contentType = self::contentTypes['deleteAccPermission'][0])
    {
        $request = $this->deleteAccPermissionRequest($user_uuid, $account_uuid, $permission_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAccPermissionAsync
     *
     * Delete permission for specific &#39;user-to-account&#39; relation
     *
     * @param  string $user_uuid UUID of User (required)
     * @param  string $account_uuid UUID of account (required)
     * @param  int $permission_id Permission Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccPermission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAccPermissionAsync($user_uuid, $account_uuid, $permission_id, string $contentType = self::contentTypes['deleteAccPermission'][0])
    {
        return $this->deleteAccPermissionAsyncWithHttpInfo($user_uuid, $account_uuid, $permission_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAccPermissionAsyncWithHttpInfo
     *
     * Delete permission for specific &#39;user-to-account&#39; relation
     *
     * @param  string $user_uuid UUID of User (required)
     * @param  string $account_uuid UUID of account (required)
     * @param  int $permission_id Permission Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccPermission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAccPermissionAsyncWithHttpInfo($user_uuid, $account_uuid, $permission_id, string $contentType = self::contentTypes['deleteAccPermission'][0])
    {
        $returnType = '';
        $request = $this->deleteAccPermissionRequest($user_uuid, $account_uuid, $permission_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAccPermission'
     *
     * @param  string $user_uuid UUID of User (required)
     * @param  string $account_uuid UUID of account (required)
     * @param  int $permission_id Permission Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccPermission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAccPermissionRequest($user_uuid, $account_uuid, $permission_id, string $contentType = self::contentTypes['deleteAccPermission'][0])
    {

        // verify the required parameter 'user_uuid' is set
        if ($user_uuid === null || (is_array($user_uuid) && count($user_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_uuid when calling deleteAccPermission'
            );
        }

        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling deleteAccPermission'
            );
        }

        // verify the required parameter 'permission_id' is set
        if ($permission_id === null || (is_array($permission_id) && count($permission_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $permission_id when calling deleteAccPermission'
            );
        }


        $resourcePath = '/api/v1/permission/{userUuid}/account/{accountUuid}/{permissionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'userUuid' . '}',
                ObjectSerializer::toPathValue($user_uuid),
                $resourcePath
            );
        }
        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }
        // path params
        if ($permission_id !== null) {
            $resourcePath = str_replace(
                '{' . 'permissionId' . '}',
                ObjectSerializer::toPathValue($permission_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAccRole
     *
     * Delete role
     *
     * @param  string $user_uuid UUID of User (required)
     * @param  string $account_uuid UUID of account (required)
     * @param  string $role_uuid UUID of role (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccRole'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAccRole($user_uuid, $account_uuid, $role_uuid, string $contentType = self::contentTypes['deleteAccRole'][0])
    {
        $this->deleteAccRoleWithHttpInfo($user_uuid, $account_uuid, $role_uuid, $contentType);
    }

    /**
     * Operation deleteAccRoleWithHttpInfo
     *
     * Delete role
     *
     * @param  string $user_uuid UUID of User (required)
     * @param  string $account_uuid UUID of account (required)
     * @param  string $role_uuid UUID of role (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccRole'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAccRoleWithHttpInfo($user_uuid, $account_uuid, $role_uuid, string $contentType = self::contentTypes['deleteAccRole'][0])
    {
        $request = $this->deleteAccRoleRequest($user_uuid, $account_uuid, $role_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAccRoleAsync
     *
     * Delete role
     *
     * @param  string $user_uuid UUID of User (required)
     * @param  string $account_uuid UUID of account (required)
     * @param  string $role_uuid UUID of role (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccRole'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAccRoleAsync($user_uuid, $account_uuid, $role_uuid, string $contentType = self::contentTypes['deleteAccRole'][0])
    {
        return $this->deleteAccRoleAsyncWithHttpInfo($user_uuid, $account_uuid, $role_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAccRoleAsyncWithHttpInfo
     *
     * Delete role
     *
     * @param  string $user_uuid UUID of User (required)
     * @param  string $account_uuid UUID of account (required)
     * @param  string $role_uuid UUID of role (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccRole'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAccRoleAsyncWithHttpInfo($user_uuid, $account_uuid, $role_uuid, string $contentType = self::contentTypes['deleteAccRole'][0])
    {
        $returnType = '';
        $request = $this->deleteAccRoleRequest($user_uuid, $account_uuid, $role_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAccRole'
     *
     * @param  string $user_uuid UUID of User (required)
     * @param  string $account_uuid UUID of account (required)
     * @param  string $role_uuid UUID of role (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccRole'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAccRoleRequest($user_uuid, $account_uuid, $role_uuid, string $contentType = self::contentTypes['deleteAccRole'][0])
    {

        // verify the required parameter 'user_uuid' is set
        if ($user_uuid === null || (is_array($user_uuid) && count($user_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_uuid when calling deleteAccRole'
            );
        }

        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling deleteAccRole'
            );
        }

        // verify the required parameter 'role_uuid' is set
        if ($role_uuid === null || (is_array($role_uuid) && count($role_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_uuid when calling deleteAccRole'
            );
        }


        $resourcePath = '/api/v1/permission/{userUuid}/account/{accountUuid}/role/{roleUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'userUuid' . '}',
                ObjectSerializer::toPathValue($user_uuid),
                $resourcePath
            );
        }
        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }
        // path params
        if ($role_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'roleUuid' . '}',
                ObjectSerializer::toPathValue($role_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUserAccountPermissions
     *
     * Read all user permissions
     *
     * @param  string $user_uuid UUID of User (required)
     * @param  string $account_uuid UUID of account (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserAccountPermissions'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\AccountPermissionsDTO
     */
    public function getUserAccountPermissions($user_uuid, $account_uuid, string $contentType = self::contentTypes['getUserAccountPermissions'][0])
    {
        list($response) = $this->getUserAccountPermissionsWithHttpInfo($user_uuid, $account_uuid, $contentType);
        return $response;
    }

    /**
     * Operation getUserAccountPermissionsWithHttpInfo
     *
     * Read all user permissions
     *
     * @param  string $user_uuid UUID of User (required)
     * @param  string $account_uuid UUID of account (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserAccountPermissions'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\AccountPermissionsDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserAccountPermissionsWithHttpInfo($user_uuid, $account_uuid, string $contentType = self::contentTypes['getUserAccountPermissions'][0])
    {
        $request = $this->getUserAccountPermissionsRequest($user_uuid, $account_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DocStudio\Client\Model\AccountPermissionsDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\AccountPermissionsDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\AccountPermissionsDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\AccountPermissionsDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\AccountPermissionsDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUserAccountPermissionsAsync
     *
     * Read all user permissions
     *
     * @param  string $user_uuid UUID of User (required)
     * @param  string $account_uuid UUID of account (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserAccountPermissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserAccountPermissionsAsync($user_uuid, $account_uuid, string $contentType = self::contentTypes['getUserAccountPermissions'][0])
    {
        return $this->getUserAccountPermissionsAsyncWithHttpInfo($user_uuid, $account_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUserAccountPermissionsAsyncWithHttpInfo
     *
     * Read all user permissions
     *
     * @param  string $user_uuid UUID of User (required)
     * @param  string $account_uuid UUID of account (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserAccountPermissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserAccountPermissionsAsyncWithHttpInfo($user_uuid, $account_uuid, string $contentType = self::contentTypes['getUserAccountPermissions'][0])
    {
        $returnType = '\DocStudio\Client\Model\AccountPermissionsDTO';
        $request = $this->getUserAccountPermissionsRequest($user_uuid, $account_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUserAccountPermissions'
     *
     * @param  string $user_uuid UUID of User (required)
     * @param  string $account_uuid UUID of account (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserAccountPermissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUserAccountPermissionsRequest($user_uuid, $account_uuid, string $contentType = self::contentTypes['getUserAccountPermissions'][0])
    {

        // verify the required parameter 'user_uuid' is set
        if ($user_uuid === null || (is_array($user_uuid) && count($user_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_uuid when calling getUserAccountPermissions'
            );
        }

        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling getUserAccountPermissions'
            );
        }


        $resourcePath = '/api/v1/permission/{userUuid}/account/{accountUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'userUuid' . '}',
                ObjectSerializer::toPathValue($user_uuid),
                $resourcePath
            );
        }
        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchMbPermissionsPermissionAccount
     *
     * Add exact permission for selected user-to-account relation. Add if absent or ignore if already present.
     *
     * @param  string $user_uuid UUID of User (required)
     * @param  string $account_uuid UUID of account (required)
     * @param  \DocStudio\Client\Model\PermissionsDTO $permissions_dto permissions_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchMbPermissionsPermissionAccount'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function patchMbPermissionsPermissionAccount($user_uuid, $account_uuid, $permissions_dto, string $contentType = self::contentTypes['patchMbPermissionsPermissionAccount'][0])
    {
        $this->patchMbPermissionsPermissionAccountWithHttpInfo($user_uuid, $account_uuid, $permissions_dto, $contentType);
    }

    /**
     * Operation patchMbPermissionsPermissionAccountWithHttpInfo
     *
     * Add exact permission for selected user-to-account relation. Add if absent or ignore if already present.
     *
     * @param  string $user_uuid UUID of User (required)
     * @param  string $account_uuid UUID of account (required)
     * @param  \DocStudio\Client\Model\PermissionsDTO $permissions_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchMbPermissionsPermissionAccount'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchMbPermissionsPermissionAccountWithHttpInfo($user_uuid, $account_uuid, $permissions_dto, string $contentType = self::contentTypes['patchMbPermissionsPermissionAccount'][0])
    {
        $request = $this->patchMbPermissionsPermissionAccountRequest($user_uuid, $account_uuid, $permissions_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation patchMbPermissionsPermissionAccountAsync
     *
     * Add exact permission for selected user-to-account relation. Add if absent or ignore if already present.
     *
     * @param  string $user_uuid UUID of User (required)
     * @param  string $account_uuid UUID of account (required)
     * @param  \DocStudio\Client\Model\PermissionsDTO $permissions_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchMbPermissionsPermissionAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchMbPermissionsPermissionAccountAsync($user_uuid, $account_uuid, $permissions_dto, string $contentType = self::contentTypes['patchMbPermissionsPermissionAccount'][0])
    {
        return $this->patchMbPermissionsPermissionAccountAsyncWithHttpInfo($user_uuid, $account_uuid, $permissions_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchMbPermissionsPermissionAccountAsyncWithHttpInfo
     *
     * Add exact permission for selected user-to-account relation. Add if absent or ignore if already present.
     *
     * @param  string $user_uuid UUID of User (required)
     * @param  string $account_uuid UUID of account (required)
     * @param  \DocStudio\Client\Model\PermissionsDTO $permissions_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchMbPermissionsPermissionAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchMbPermissionsPermissionAccountAsyncWithHttpInfo($user_uuid, $account_uuid, $permissions_dto, string $contentType = self::contentTypes['patchMbPermissionsPermissionAccount'][0])
    {
        $returnType = '';
        $request = $this->patchMbPermissionsPermissionAccountRequest($user_uuid, $account_uuid, $permissions_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchMbPermissionsPermissionAccount'
     *
     * @param  string $user_uuid UUID of User (required)
     * @param  string $account_uuid UUID of account (required)
     * @param  \DocStudio\Client\Model\PermissionsDTO $permissions_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchMbPermissionsPermissionAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchMbPermissionsPermissionAccountRequest($user_uuid, $account_uuid, $permissions_dto, string $contentType = self::contentTypes['patchMbPermissionsPermissionAccount'][0])
    {

        // verify the required parameter 'user_uuid' is set
        if ($user_uuid === null || (is_array($user_uuid) && count($user_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_uuid when calling patchMbPermissionsPermissionAccount'
            );
        }

        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling patchMbPermissionsPermissionAccount'
            );
        }

        // verify the required parameter 'permissions_dto' is set
        if ($permissions_dto === null || (is_array($permissions_dto) && count($permissions_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $permissions_dto when calling patchMbPermissionsPermissionAccount'
            );
        }


        $resourcePath = '/api/v1/permission/{userUuid}/account/{accountUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'userUuid' . '}',
                ObjectSerializer::toPathValue($user_uuid),
                $resourcePath
            );
        }
        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($permissions_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($permissions_dto));
            } else {
                $httpBody = $permissions_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation replaceAllPermissionsPermissionAccount
     *
     * Replace all permissions for selected user-to-account relation
     *
     * @param  string $user_uuid UUID of User (required)
     * @param  string $account_uuid UUID of account (required)
     * @param  \DocStudio\Client\Model\PermissionsDTO $permissions_dto permissions_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['replaceAllPermissionsPermissionAccount'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function replaceAllPermissionsPermissionAccount($user_uuid, $account_uuid, $permissions_dto, string $contentType = self::contentTypes['replaceAllPermissionsPermissionAccount'][0])
    {
        $this->replaceAllPermissionsPermissionAccountWithHttpInfo($user_uuid, $account_uuid, $permissions_dto, $contentType);
    }

    /**
     * Operation replaceAllPermissionsPermissionAccountWithHttpInfo
     *
     * Replace all permissions for selected user-to-account relation
     *
     * @param  string $user_uuid UUID of User (required)
     * @param  string $account_uuid UUID of account (required)
     * @param  \DocStudio\Client\Model\PermissionsDTO $permissions_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['replaceAllPermissionsPermissionAccount'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function replaceAllPermissionsPermissionAccountWithHttpInfo($user_uuid, $account_uuid, $permissions_dto, string $contentType = self::contentTypes['replaceAllPermissionsPermissionAccount'][0])
    {
        $request = $this->replaceAllPermissionsPermissionAccountRequest($user_uuid, $account_uuid, $permissions_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation replaceAllPermissionsPermissionAccountAsync
     *
     * Replace all permissions for selected user-to-account relation
     *
     * @param  string $user_uuid UUID of User (required)
     * @param  string $account_uuid UUID of account (required)
     * @param  \DocStudio\Client\Model\PermissionsDTO $permissions_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['replaceAllPermissionsPermissionAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function replaceAllPermissionsPermissionAccountAsync($user_uuid, $account_uuid, $permissions_dto, string $contentType = self::contentTypes['replaceAllPermissionsPermissionAccount'][0])
    {
        return $this->replaceAllPermissionsPermissionAccountAsyncWithHttpInfo($user_uuid, $account_uuid, $permissions_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation replaceAllPermissionsPermissionAccountAsyncWithHttpInfo
     *
     * Replace all permissions for selected user-to-account relation
     *
     * @param  string $user_uuid UUID of User (required)
     * @param  string $account_uuid UUID of account (required)
     * @param  \DocStudio\Client\Model\PermissionsDTO $permissions_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['replaceAllPermissionsPermissionAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function replaceAllPermissionsPermissionAccountAsyncWithHttpInfo($user_uuid, $account_uuid, $permissions_dto, string $contentType = self::contentTypes['replaceAllPermissionsPermissionAccount'][0])
    {
        $returnType = '';
        $request = $this->replaceAllPermissionsPermissionAccountRequest($user_uuid, $account_uuid, $permissions_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'replaceAllPermissionsPermissionAccount'
     *
     * @param  string $user_uuid UUID of User (required)
     * @param  string $account_uuid UUID of account (required)
     * @param  \DocStudio\Client\Model\PermissionsDTO $permissions_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['replaceAllPermissionsPermissionAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function replaceAllPermissionsPermissionAccountRequest($user_uuid, $account_uuid, $permissions_dto, string $contentType = self::contentTypes['replaceAllPermissionsPermissionAccount'][0])
    {

        // verify the required parameter 'user_uuid' is set
        if ($user_uuid === null || (is_array($user_uuid) && count($user_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_uuid when calling replaceAllPermissionsPermissionAccount'
            );
        }

        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling replaceAllPermissionsPermissionAccount'
            );
        }

        // verify the required parameter 'permissions_dto' is set
        if ($permissions_dto === null || (is_array($permissions_dto) && count($permissions_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $permissions_dto when calling replaceAllPermissionsPermissionAccount'
            );
        }


        $resourcePath = '/api/v1/permission/{userUuid}/account/{accountUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'userUuid' . '}',
                ObjectSerializer::toPathValue($user_uuid),
                $resourcePath
            );
        }
        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($permissions_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($permissions_dto));
            } else {
                $httpBody = $permissions_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setUserAccountPermissions
     *
     * Write user permissions
     *
     * @param  string $user_uuid UUID of User (required)
     * @param  string $account_uuid UUID of account (required)
     * @param  \DocStudio\Client\Model\BasePermissionsDTO $base_permissions_dto base_permissions_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setUserAccountPermissions'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function setUserAccountPermissions($user_uuid, $account_uuid, $base_permissions_dto, string $contentType = self::contentTypes['setUserAccountPermissions'][0])
    {
        $this->setUserAccountPermissionsWithHttpInfo($user_uuid, $account_uuid, $base_permissions_dto, $contentType);
    }

    /**
     * Operation setUserAccountPermissionsWithHttpInfo
     *
     * Write user permissions
     *
     * @param  string $user_uuid UUID of User (required)
     * @param  string $account_uuid UUID of account (required)
     * @param  \DocStudio\Client\Model\BasePermissionsDTO $base_permissions_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setUserAccountPermissions'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setUserAccountPermissionsWithHttpInfo($user_uuid, $account_uuid, $base_permissions_dto, string $contentType = self::contentTypes['setUserAccountPermissions'][0])
    {
        $request = $this->setUserAccountPermissionsRequest($user_uuid, $account_uuid, $base_permissions_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation setUserAccountPermissionsAsync
     *
     * Write user permissions
     *
     * @param  string $user_uuid UUID of User (required)
     * @param  string $account_uuid UUID of account (required)
     * @param  \DocStudio\Client\Model\BasePermissionsDTO $base_permissions_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setUserAccountPermissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setUserAccountPermissionsAsync($user_uuid, $account_uuid, $base_permissions_dto, string $contentType = self::contentTypes['setUserAccountPermissions'][0])
    {
        return $this->setUserAccountPermissionsAsyncWithHttpInfo($user_uuid, $account_uuid, $base_permissions_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setUserAccountPermissionsAsyncWithHttpInfo
     *
     * Write user permissions
     *
     * @param  string $user_uuid UUID of User (required)
     * @param  string $account_uuid UUID of account (required)
     * @param  \DocStudio\Client\Model\BasePermissionsDTO $base_permissions_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setUserAccountPermissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setUserAccountPermissionsAsyncWithHttpInfo($user_uuid, $account_uuid, $base_permissions_dto, string $contentType = self::contentTypes['setUserAccountPermissions'][0])
    {
        $returnType = '';
        $request = $this->setUserAccountPermissionsRequest($user_uuid, $account_uuid, $base_permissions_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setUserAccountPermissions'
     *
     * @param  string $user_uuid UUID of User (required)
     * @param  string $account_uuid UUID of account (required)
     * @param  \DocStudio\Client\Model\BasePermissionsDTO $base_permissions_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setUserAccountPermissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setUserAccountPermissionsRequest($user_uuid, $account_uuid, $base_permissions_dto, string $contentType = self::contentTypes['setUserAccountPermissions'][0])
    {

        // verify the required parameter 'user_uuid' is set
        if ($user_uuid === null || (is_array($user_uuid) && count($user_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_uuid when calling setUserAccountPermissions'
            );
        }

        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling setUserAccountPermissions'
            );
        }

        // verify the required parameter 'base_permissions_dto' is set
        if ($base_permissions_dto === null || (is_array($base_permissions_dto) && count($base_permissions_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $base_permissions_dto when calling setUserAccountPermissions'
            );
        }


        $resourcePath = '/api/v1/permission/{userUuid}/account/{accountUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'userUuid' . '}',
                ObjectSerializer::toPathValue($user_uuid),
                $resourcePath
            );
        }
        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($base_permissions_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($base_permissions_dto));
            } else {
                $httpBody = $base_permissions_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
