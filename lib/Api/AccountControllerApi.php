<?php
/**
 * AccountControllerApi
 * PHP version 7.4
 *
 * @category Class
 * @package  DocStudio\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DocStudio Api Documentation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R110.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DocStudio\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use DocStudio\Client\ApiException;
use DocStudio\Client\Configuration;
use DocStudio\Client\HeaderSelector;
use DocStudio\Client\ObjectSerializer;

/**
 * AccountControllerApi Class Doc Comment
 *
 * @category Class
 * @package  DocStudio\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AccountControllerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addNewCryptoConfigs' => [
            'application/json',
        ],
        'blockUsers' => [
            'application/json',
        ],
        'createAccount' => [
            'application/json',
        ],
        'createCorporateUser' => [
            'application/json',
        ],
        'createMassAccountUsers' => [
            'multipart/form-data',
        ],
        'deleteAccount' => [
            'application/json',
        ],
        'deleteCorporateUsers' => [
            'application/json',
        ],
        'deleteCryptoConfigs' => [
            'application/json',
        ],
        'getAccountBillingAddress' => [
            'application/json',
        ],
        'getAccountBrandLogo' => [
            'application/json',
        ],
        'getAccountDetails' => [
            'application/json',
        ],
        'getAccountLogoAccount' => [
            'application/json',
        ],
        'getAccountUsersImportFileExample' => [
            'application/json',
        ],
        'getCryptoConfigs' => [
            'application/json',
        ],
        'getMailbox' => [
            'application/json',
        ],
        'getUserPolicies' => [
            'application/json',
        ],
        'getUsersPermissions' => [
            'application/json',
        ],
        'mailboxesReport' => [
            'application/json',
        ],
        'resendCorporateUserWelcomeMessage' => [
            'application/json',
        ],
        'saveUserPolicies' => [
            'application/json',
        ],
        'searchMailboxesAccount' => [
            'application/json',
        ],
        'updateAccountBillingAddress' => [
            'application/json',
        ],
        'updateAccountDetails' => [
            'application/json',
        ],
        'usersReport' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addNewCryptoConfigs
     *
     * Add crypto configs
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \DocStudio\Client\Model\CryptoConfigDTO[] $crypto_config_dto crypto_config_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewCryptoConfigs'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addNewCryptoConfigs($account_uuid, $crypto_config_dto, string $contentType = self::contentTypes['addNewCryptoConfigs'][0])
    {
        $this->addNewCryptoConfigsWithHttpInfo($account_uuid, $crypto_config_dto, $contentType);
    }

    /**
     * Operation addNewCryptoConfigsWithHttpInfo
     *
     * Add crypto configs
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \DocStudio\Client\Model\CryptoConfigDTO[] $crypto_config_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewCryptoConfigs'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addNewCryptoConfigsWithHttpInfo($account_uuid, $crypto_config_dto, string $contentType = self::contentTypes['addNewCryptoConfigs'][0])
    {
        $request = $this->addNewCryptoConfigsRequest($account_uuid, $crypto_config_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addNewCryptoConfigsAsync
     *
     * Add crypto configs
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \DocStudio\Client\Model\CryptoConfigDTO[] $crypto_config_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewCryptoConfigs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addNewCryptoConfigsAsync($account_uuid, $crypto_config_dto, string $contentType = self::contentTypes['addNewCryptoConfigs'][0])
    {
        return $this->addNewCryptoConfigsAsyncWithHttpInfo($account_uuid, $crypto_config_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addNewCryptoConfigsAsyncWithHttpInfo
     *
     * Add crypto configs
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \DocStudio\Client\Model\CryptoConfigDTO[] $crypto_config_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewCryptoConfigs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addNewCryptoConfigsAsyncWithHttpInfo($account_uuid, $crypto_config_dto, string $contentType = self::contentTypes['addNewCryptoConfigs'][0])
    {
        $returnType = '';
        $request = $this->addNewCryptoConfigsRequest($account_uuid, $crypto_config_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addNewCryptoConfigs'
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \DocStudio\Client\Model\CryptoConfigDTO[] $crypto_config_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewCryptoConfigs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addNewCryptoConfigsRequest($account_uuid, $crypto_config_dto, string $contentType = self::contentTypes['addNewCryptoConfigs'][0])
    {

        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling addNewCryptoConfigs'
            );
        }

        // verify the required parameter 'crypto_config_dto' is set
        if ($crypto_config_dto === null || (is_array($crypto_config_dto) && count($crypto_config_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $crypto_config_dto when calling addNewCryptoConfigs'
            );
        }


        $resourcePath = '/api/v1/account/{accountUuid}/crypto-configs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($crypto_config_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($crypto_config_dto));
            } else {
                $httpBody = $crypto_config_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation blockUsers
     *
     * Block/Unblock corporate users
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  bool $flag Block/Unblock flag (required)
     * @param  \DocStudio\Client\Model\SingleUuidDTO[] $single_uuid_dto single_uuid_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockUsers'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function blockUsers($account_uuid, $flag, $single_uuid_dto, string $contentType = self::contentTypes['blockUsers'][0])
    {
        $this->blockUsersWithHttpInfo($account_uuid, $flag, $single_uuid_dto, $contentType);
    }

    /**
     * Operation blockUsersWithHttpInfo
     *
     * Block/Unblock corporate users
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  bool $flag Block/Unblock flag (required)
     * @param  \DocStudio\Client\Model\SingleUuidDTO[] $single_uuid_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockUsers'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function blockUsersWithHttpInfo($account_uuid, $flag, $single_uuid_dto, string $contentType = self::contentTypes['blockUsers'][0])
    {
        $request = $this->blockUsersRequest($account_uuid, $flag, $single_uuid_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation blockUsersAsync
     *
     * Block/Unblock corporate users
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  bool $flag Block/Unblock flag (required)
     * @param  \DocStudio\Client\Model\SingleUuidDTO[] $single_uuid_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockUsersAsync($account_uuid, $flag, $single_uuid_dto, string $contentType = self::contentTypes['blockUsers'][0])
    {
        return $this->blockUsersAsyncWithHttpInfo($account_uuid, $flag, $single_uuid_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blockUsersAsyncWithHttpInfo
     *
     * Block/Unblock corporate users
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  bool $flag Block/Unblock flag (required)
     * @param  \DocStudio\Client\Model\SingleUuidDTO[] $single_uuid_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blockUsersAsyncWithHttpInfo($account_uuid, $flag, $single_uuid_dto, string $contentType = self::contentTypes['blockUsers'][0])
    {
        $returnType = '';
        $request = $this->blockUsersRequest($account_uuid, $flag, $single_uuid_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blockUsers'
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  bool $flag Block/Unblock flag (required)
     * @param  \DocStudio\Client\Model\SingleUuidDTO[] $single_uuid_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['blockUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function blockUsersRequest($account_uuid, $flag, $single_uuid_dto, string $contentType = self::contentTypes['blockUsers'][0])
    {

        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling blockUsers'
            );
        }

        // verify the required parameter 'flag' is set
        if ($flag === null || (is_array($flag) && count($flag) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $flag when calling blockUsers'
            );
        }

        // verify the required parameter 'single_uuid_dto' is set
        if ($single_uuid_dto === null || (is_array($single_uuid_dto) && count($single_uuid_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $single_uuid_dto when calling blockUsers'
            );
        }


        $resourcePath = '/api/v1/account/{accountUuid}/block-users/{flag}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }
        // path params
        if ($flag !== null) {
            $resourcePath = str_replace(
                '{' . 'flag' . '}',
                ObjectSerializer::toPathValue($flag),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($single_uuid_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($single_uuid_dto));
            } else {
                $httpBody = $single_uuid_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAccount
     *
     * Create account and mailbox(es) under this account. User will be assigned with default system roles for this account and mailbox(es).
     *
     * @param  \DocStudio\Client\Model\AccountCreateDTO $account_create_dto account_create_dto (required)
     * @param  string $code Invitation code from email (optional)
     * @param  string $code_type Type of code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAccount'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\User2AccountWithMailboxesDTO
     */
    public function createAccount($account_create_dto, $code = null, $code_type = null, string $contentType = self::contentTypes['createAccount'][0])
    {
        list($response) = $this->createAccountWithHttpInfo($account_create_dto, $code, $code_type, $contentType);
        return $response;
    }

    /**
     * Operation createAccountWithHttpInfo
     *
     * Create account and mailbox(es) under this account. User will be assigned with default system roles for this account and mailbox(es).
     *
     * @param  \DocStudio\Client\Model\AccountCreateDTO $account_create_dto (required)
     * @param  string $code Invitation code from email (optional)
     * @param  string $code_type Type of code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAccount'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\User2AccountWithMailboxesDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAccountWithHttpInfo($account_create_dto, $code = null, $code_type = null, string $contentType = self::contentTypes['createAccount'][0])
    {
        $request = $this->createAccountRequest($account_create_dto, $code, $code_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\DocStudio\Client\Model\User2AccountWithMailboxesDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\User2AccountWithMailboxesDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\User2AccountWithMailboxesDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\User2AccountWithMailboxesDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\User2AccountWithMailboxesDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAccountAsync
     *
     * Create account and mailbox(es) under this account. User will be assigned with default system roles for this account and mailbox(es).
     *
     * @param  \DocStudio\Client\Model\AccountCreateDTO $account_create_dto (required)
     * @param  string $code Invitation code from email (optional)
     * @param  string $code_type Type of code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAccountAsync($account_create_dto, $code = null, $code_type = null, string $contentType = self::contentTypes['createAccount'][0])
    {
        return $this->createAccountAsyncWithHttpInfo($account_create_dto, $code, $code_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAccountAsyncWithHttpInfo
     *
     * Create account and mailbox(es) under this account. User will be assigned with default system roles for this account and mailbox(es).
     *
     * @param  \DocStudio\Client\Model\AccountCreateDTO $account_create_dto (required)
     * @param  string $code Invitation code from email (optional)
     * @param  string $code_type Type of code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAccountAsyncWithHttpInfo($account_create_dto, $code = null, $code_type = null, string $contentType = self::contentTypes['createAccount'][0])
    {
        $returnType = '\DocStudio\Client\Model\User2AccountWithMailboxesDTO';
        $request = $this->createAccountRequest($account_create_dto, $code, $code_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAccount'
     *
     * @param  \DocStudio\Client\Model\AccountCreateDTO $account_create_dto (required)
     * @param  string $code Invitation code from email (optional)
     * @param  string $code_type Type of code (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createAccountRequest($account_create_dto, $code = null, $code_type = null, string $contentType = self::contentTypes['createAccount'][0])
    {

        // verify the required parameter 'account_create_dto' is set
        if ($account_create_dto === null || (is_array($account_create_dto) && count($account_create_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_create_dto when calling createAccount'
            );
        }




        $resourcePath = '/api/v1/account';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $code,
            'code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $code_type,
            'codeType', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($account_create_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($account_create_dto));
            } else {
                $httpBody = $account_create_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createCorporateUser
     *
     * Create corporate user
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \DocStudio\Client\Model\CorporateUserCreateDTO $corporate_user_create_dto corporate_user_create_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCorporateUser'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\UserDTO
     */
    public function createCorporateUser($account_uuid, $corporate_user_create_dto, string $contentType = self::contentTypes['createCorporateUser'][0])
    {
        list($response) = $this->createCorporateUserWithHttpInfo($account_uuid, $corporate_user_create_dto, $contentType);
        return $response;
    }

    /**
     * Operation createCorporateUserWithHttpInfo
     *
     * Create corporate user
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \DocStudio\Client\Model\CorporateUserCreateDTO $corporate_user_create_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCorporateUser'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\UserDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCorporateUserWithHttpInfo($account_uuid, $corporate_user_create_dto, string $contentType = self::contentTypes['createCorporateUser'][0])
    {
        $request = $this->createCorporateUserRequest($account_uuid, $corporate_user_create_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DocStudio\Client\Model\UserDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\UserDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\UserDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\UserDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\UserDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCorporateUserAsync
     *
     * Create corporate user
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \DocStudio\Client\Model\CorporateUserCreateDTO $corporate_user_create_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCorporateUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCorporateUserAsync($account_uuid, $corporate_user_create_dto, string $contentType = self::contentTypes['createCorporateUser'][0])
    {
        return $this->createCorporateUserAsyncWithHttpInfo($account_uuid, $corporate_user_create_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCorporateUserAsyncWithHttpInfo
     *
     * Create corporate user
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \DocStudio\Client\Model\CorporateUserCreateDTO $corporate_user_create_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCorporateUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCorporateUserAsyncWithHttpInfo($account_uuid, $corporate_user_create_dto, string $contentType = self::contentTypes['createCorporateUser'][0])
    {
        $returnType = '\DocStudio\Client\Model\UserDTO';
        $request = $this->createCorporateUserRequest($account_uuid, $corporate_user_create_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCorporateUser'
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \DocStudio\Client\Model\CorporateUserCreateDTO $corporate_user_create_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCorporateUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCorporateUserRequest($account_uuid, $corporate_user_create_dto, string $contentType = self::contentTypes['createCorporateUser'][0])
    {

        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling createCorporateUser'
            );
        }

        // verify the required parameter 'corporate_user_create_dto' is set
        if ($corporate_user_create_dto === null || (is_array($corporate_user_create_dto) && count($corporate_user_create_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $corporate_user_create_dto when calling createCorporateUser'
            );
        }


        $resourcePath = '/api/v1/account/{accountUuid}/user';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($corporate_user_create_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($corporate_user_create_dto));
            } else {
                $httpBody = $corporate_user_create_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createMassAccountUsers
     *
     * Mass create corporate users
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \SplFileObject $file file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMassAccountUsers'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\SingleUuidDTO
     */
    public function createMassAccountUsers($account_uuid, $file, string $contentType = self::contentTypes['createMassAccountUsers'][0])
    {
        list($response) = $this->createMassAccountUsersWithHttpInfo($account_uuid, $file, $contentType);
        return $response;
    }

    /**
     * Operation createMassAccountUsersWithHttpInfo
     *
     * Mass create corporate users
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \SplFileObject $file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMassAccountUsers'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\SingleUuidDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createMassAccountUsersWithHttpInfo($account_uuid, $file, string $contentType = self::contentTypes['createMassAccountUsers'][0])
    {
        $request = $this->createMassAccountUsersRequest($account_uuid, $file, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\DocStudio\Client\Model\SingleUuidDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\SingleUuidDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\SingleUuidDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\SingleUuidDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\SingleUuidDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createMassAccountUsersAsync
     *
     * Mass create corporate users
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \SplFileObject $file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMassAccountUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMassAccountUsersAsync($account_uuid, $file, string $contentType = self::contentTypes['createMassAccountUsers'][0])
    {
        return $this->createMassAccountUsersAsyncWithHttpInfo($account_uuid, $file, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createMassAccountUsersAsyncWithHttpInfo
     *
     * Mass create corporate users
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \SplFileObject $file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMassAccountUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMassAccountUsersAsyncWithHttpInfo($account_uuid, $file, string $contentType = self::contentTypes['createMassAccountUsers'][0])
    {
        $returnType = '\DocStudio\Client\Model\SingleUuidDTO';
        $request = $this->createMassAccountUsersRequest($account_uuid, $file, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createMassAccountUsers'
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \SplFileObject $file (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMassAccountUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createMassAccountUsersRequest($account_uuid, $file, string $contentType = self::contentTypes['createMassAccountUsers'][0])
    {

        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling createMassAccountUsers'
            );
        }

        // verify the required parameter 'file' is set
        if ($file === null || (is_array($file) && count($file) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file when calling createMassAccountUsers'
            );
        }


        $resourcePath = '/api/v1/account/{accountUuid}/create-users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }

        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = [];
            $paramFiles = is_array($file) ? $file : [$file];
            foreach ($paramFiles as $paramFile) {
                $formParams['file'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAccount
     *
     * Delete account
     *
     * @param  string $check_message Proof message (required)
     * @param  string $uuid UUID of account to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccount'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAccount($check_message, $uuid, string $contentType = self::contentTypes['deleteAccount'][0])
    {
        $this->deleteAccountWithHttpInfo($check_message, $uuid, $contentType);
    }

    /**
     * Operation deleteAccountWithHttpInfo
     *
     * Delete account
     *
     * @param  string $check_message Proof message (required)
     * @param  string $uuid UUID of account to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccount'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAccountWithHttpInfo($check_message, $uuid, string $contentType = self::contentTypes['deleteAccount'][0])
    {
        $request = $this->deleteAccountRequest($check_message, $uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAccountAsync
     *
     * Delete account
     *
     * @param  string $check_message Proof message (required)
     * @param  string $uuid UUID of account to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAccountAsync($check_message, $uuid, string $contentType = self::contentTypes['deleteAccount'][0])
    {
        return $this->deleteAccountAsyncWithHttpInfo($check_message, $uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAccountAsyncWithHttpInfo
     *
     * Delete account
     *
     * @param  string $check_message Proof message (required)
     * @param  string $uuid UUID of account to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAccountAsyncWithHttpInfo($check_message, $uuid, string $contentType = self::contentTypes['deleteAccount'][0])
    {
        $returnType = '';
        $request = $this->deleteAccountRequest($check_message, $uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAccount'
     *
     * @param  string $check_message Proof message (required)
     * @param  string $uuid UUID of account to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAccountRequest($check_message, $uuid, string $contentType = self::contentTypes['deleteAccount'][0])
    {

        // verify the required parameter 'check_message' is set
        if ($check_message === null || (is_array($check_message) && count($check_message) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_message when calling deleteAccount'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling deleteAccount'
            );
        }


        $resourcePath = '/api/v1/account/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $check_message,
            'checkMessage', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCorporateUsers
     *
     * Delete corporate users
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $check_message Proof message (required)
     * @param  \DocStudio\Client\Model\SingleUuidDTO[] $single_uuid_dto single_uuid_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCorporateUsers'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCorporateUsers($account_uuid, $check_message, $single_uuid_dto, string $contentType = self::contentTypes['deleteCorporateUsers'][0])
    {
        $this->deleteCorporateUsersWithHttpInfo($account_uuid, $check_message, $single_uuid_dto, $contentType);
    }

    /**
     * Operation deleteCorporateUsersWithHttpInfo
     *
     * Delete corporate users
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $check_message Proof message (required)
     * @param  \DocStudio\Client\Model\SingleUuidDTO[] $single_uuid_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCorporateUsers'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCorporateUsersWithHttpInfo($account_uuid, $check_message, $single_uuid_dto, string $contentType = self::contentTypes['deleteCorporateUsers'][0])
    {
        $request = $this->deleteCorporateUsersRequest($account_uuid, $check_message, $single_uuid_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCorporateUsersAsync
     *
     * Delete corporate users
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $check_message Proof message (required)
     * @param  \DocStudio\Client\Model\SingleUuidDTO[] $single_uuid_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCorporateUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCorporateUsersAsync($account_uuid, $check_message, $single_uuid_dto, string $contentType = self::contentTypes['deleteCorporateUsers'][0])
    {
        return $this->deleteCorporateUsersAsyncWithHttpInfo($account_uuid, $check_message, $single_uuid_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCorporateUsersAsyncWithHttpInfo
     *
     * Delete corporate users
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $check_message Proof message (required)
     * @param  \DocStudio\Client\Model\SingleUuidDTO[] $single_uuid_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCorporateUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCorporateUsersAsyncWithHttpInfo($account_uuid, $check_message, $single_uuid_dto, string $contentType = self::contentTypes['deleteCorporateUsers'][0])
    {
        $returnType = '';
        $request = $this->deleteCorporateUsersRequest($account_uuid, $check_message, $single_uuid_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCorporateUsers'
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $check_message Proof message (required)
     * @param  \DocStudio\Client\Model\SingleUuidDTO[] $single_uuid_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCorporateUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCorporateUsersRequest($account_uuid, $check_message, $single_uuid_dto, string $contentType = self::contentTypes['deleteCorporateUsers'][0])
    {

        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling deleteCorporateUsers'
            );
        }

        // verify the required parameter 'check_message' is set
        if ($check_message === null || (is_array($check_message) && count($check_message) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_message when calling deleteCorporateUsers'
            );
        }

        // verify the required parameter 'single_uuid_dto' is set
        if ($single_uuid_dto === null || (is_array($single_uuid_dto) && count($single_uuid_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $single_uuid_dto when calling deleteCorporateUsers'
            );
        }


        $resourcePath = '/api/v1/account/{accountUuid}/user';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $check_message,
            'checkMessage', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($single_uuid_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($single_uuid_dto));
            } else {
                $httpBody = $single_uuid_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCryptoConfigs
     *
     * Delete crypto configs
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string[] $request_body request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCryptoConfigs'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCryptoConfigs($account_uuid, $request_body, string $contentType = self::contentTypes['deleteCryptoConfigs'][0])
    {
        $this->deleteCryptoConfigsWithHttpInfo($account_uuid, $request_body, $contentType);
    }

    /**
     * Operation deleteCryptoConfigsWithHttpInfo
     *
     * Delete crypto configs
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCryptoConfigs'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCryptoConfigsWithHttpInfo($account_uuid, $request_body, string $contentType = self::contentTypes['deleteCryptoConfigs'][0])
    {
        $request = $this->deleteCryptoConfigsRequest($account_uuid, $request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCryptoConfigsAsync
     *
     * Delete crypto configs
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCryptoConfigs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCryptoConfigsAsync($account_uuid, $request_body, string $contentType = self::contentTypes['deleteCryptoConfigs'][0])
    {
        return $this->deleteCryptoConfigsAsyncWithHttpInfo($account_uuid, $request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCryptoConfigsAsyncWithHttpInfo
     *
     * Delete crypto configs
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCryptoConfigs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCryptoConfigsAsyncWithHttpInfo($account_uuid, $request_body, string $contentType = self::contentTypes['deleteCryptoConfigs'][0])
    {
        $returnType = '';
        $request = $this->deleteCryptoConfigsRequest($account_uuid, $request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCryptoConfigs'
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCryptoConfigs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCryptoConfigsRequest($account_uuid, $request_body, string $contentType = self::contentTypes['deleteCryptoConfigs'][0])
    {

        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling deleteCryptoConfigs'
            );
        }

        // verify the required parameter 'request_body' is set
        if ($request_body === null || (is_array($request_body) && count($request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_body when calling deleteCryptoConfigs'
            );
        }
        

        $resourcePath = '/api/v1/account/{accountUuid}/crypto-configs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountBillingAddress
     *
     * Get account billing address
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountBillingAddress'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\AccountAddressDTO
     */
    public function getAccountBillingAddress($account_uuid, string $contentType = self::contentTypes['getAccountBillingAddress'][0])
    {
        list($response) = $this->getAccountBillingAddressWithHttpInfo($account_uuid, $contentType);
        return $response;
    }

    /**
     * Operation getAccountBillingAddressWithHttpInfo
     *
     * Get account billing address
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountBillingAddress'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\AccountAddressDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountBillingAddressWithHttpInfo($account_uuid, string $contentType = self::contentTypes['getAccountBillingAddress'][0])
    {
        $request = $this->getAccountBillingAddressRequest($account_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DocStudio\Client\Model\AccountAddressDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\AccountAddressDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\AccountAddressDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\AccountAddressDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\AccountAddressDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountBillingAddressAsync
     *
     * Get account billing address
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountBillingAddress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountBillingAddressAsync($account_uuid, string $contentType = self::contentTypes['getAccountBillingAddress'][0])
    {
        return $this->getAccountBillingAddressAsyncWithHttpInfo($account_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountBillingAddressAsyncWithHttpInfo
     *
     * Get account billing address
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountBillingAddress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountBillingAddressAsyncWithHttpInfo($account_uuid, string $contentType = self::contentTypes['getAccountBillingAddress'][0])
    {
        $returnType = '\DocStudio\Client\Model\AccountAddressDTO';
        $request = $this->getAccountBillingAddressRequest($account_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountBillingAddress'
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountBillingAddress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAccountBillingAddressRequest($account_uuid, string $contentType = self::contentTypes['getAccountBillingAddress'][0])
    {

        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling getAccountBillingAddress'
            );
        }


        $resourcePath = '/api/v1/account/{accountUuid}/billing/address';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountBrandLogo
     *
     * Retrieve account brand logo
     *
     * @param  string $account_uuid account_uuid (required)
     * @param  bool $initials Get default avatar (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountBrandLogo'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function getAccountBrandLogo($account_uuid, $initials = null, string $contentType = self::contentTypes['getAccountBrandLogo'][0])
    {
        list($response) = $this->getAccountBrandLogoWithHttpInfo($account_uuid, $initials, $contentType);
        return $response;
    }

    /**
     * Operation getAccountBrandLogoWithHttpInfo
     *
     * Retrieve account brand logo
     *
     * @param  string $account_uuid (required)
     * @param  bool $initials Get default avatar (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountBrandLogo'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountBrandLogoWithHttpInfo($account_uuid, $initials = null, string $contentType = self::contentTypes['getAccountBrandLogo'][0])
    {
        $request = $this->getAccountBrandLogoRequest($account_uuid, $initials, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountBrandLogoAsync
     *
     * Retrieve account brand logo
     *
     * @param  string $account_uuid (required)
     * @param  bool $initials Get default avatar (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountBrandLogo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountBrandLogoAsync($account_uuid, $initials = null, string $contentType = self::contentTypes['getAccountBrandLogo'][0])
    {
        return $this->getAccountBrandLogoAsyncWithHttpInfo($account_uuid, $initials, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountBrandLogoAsyncWithHttpInfo
     *
     * Retrieve account brand logo
     *
     * @param  string $account_uuid (required)
     * @param  bool $initials Get default avatar (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountBrandLogo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountBrandLogoAsyncWithHttpInfo($account_uuid, $initials = null, string $contentType = self::contentTypes['getAccountBrandLogo'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->getAccountBrandLogoRequest($account_uuid, $initials, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountBrandLogo'
     *
     * @param  string $account_uuid (required)
     * @param  bool $initials Get default avatar (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountBrandLogo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAccountBrandLogoRequest($account_uuid, $initials = null, string $contentType = self::contentTypes['getAccountBrandLogo'][0])
    {

        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling getAccountBrandLogo'
            );
        }



        $resourcePath = '/api/v1/account/brand-logo/{accountUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $initials,
            'initials', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountDetails
     *
     * @param  string $uuid uuid (required)
     * @param  bool $with_users with_users (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountDetails'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\AccountDTO
     */
    public function getAccountDetails($uuid, $with_users = false, string $contentType = self::contentTypes['getAccountDetails'][0])
    {
        list($response) = $this->getAccountDetailsWithHttpInfo($uuid, $with_users, $contentType);
        return $response;
    }

    /**
     * Operation getAccountDetailsWithHttpInfo
     *
     * @param  string $uuid (required)
     * @param  bool $with_users (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountDetails'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\AccountDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountDetailsWithHttpInfo($uuid, $with_users = false, string $contentType = self::contentTypes['getAccountDetails'][0])
    {
        $request = $this->getAccountDetailsRequest($uuid, $with_users, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DocStudio\Client\Model\AccountDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\AccountDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\AccountDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\AccountDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\AccountDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountDetailsAsync
     *
     * @param  string $uuid (required)
     * @param  bool $with_users (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountDetailsAsync($uuid, $with_users = false, string $contentType = self::contentTypes['getAccountDetails'][0])
    {
        return $this->getAccountDetailsAsyncWithHttpInfo($uuid, $with_users, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountDetailsAsyncWithHttpInfo
     *
     * @param  string $uuid (required)
     * @param  bool $with_users (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountDetailsAsyncWithHttpInfo($uuid, $with_users = false, string $contentType = self::contentTypes['getAccountDetails'][0])
    {
        $returnType = '\DocStudio\Client\Model\AccountDTO';
        $request = $this->getAccountDetailsRequest($uuid, $with_users, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountDetails'
     *
     * @param  string $uuid (required)
     * @param  bool $with_users (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAccountDetailsRequest($uuid, $with_users = false, string $contentType = self::contentTypes['getAccountDetails'][0])
    {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling getAccountDetails'
            );
        }



        $resourcePath = '/api/v1/account/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_users,
            'withUsers', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountLogoAccount
     *
     * Retrieve account logo
     *
     * @param  string $account_uuid account_uuid (required)
     * @param  bool $initials Get default avatar (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountLogoAccount'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function getAccountLogoAccount($account_uuid, $initials = null, string $contentType = self::contentTypes['getAccountLogoAccount'][0])
    {
        list($response) = $this->getAccountLogoAccountWithHttpInfo($account_uuid, $initials, $contentType);
        return $response;
    }

    /**
     * Operation getAccountLogoAccountWithHttpInfo
     *
     * Retrieve account logo
     *
     * @param  string $account_uuid (required)
     * @param  bool $initials Get default avatar (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountLogoAccount'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountLogoAccountWithHttpInfo($account_uuid, $initials = null, string $contentType = self::contentTypes['getAccountLogoAccount'][0])
    {
        $request = $this->getAccountLogoAccountRequest($account_uuid, $initials, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountLogoAccountAsync
     *
     * Retrieve account logo
     *
     * @param  string $account_uuid (required)
     * @param  bool $initials Get default avatar (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountLogoAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountLogoAccountAsync($account_uuid, $initials = null, string $contentType = self::contentTypes['getAccountLogoAccount'][0])
    {
        return $this->getAccountLogoAccountAsyncWithHttpInfo($account_uuid, $initials, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountLogoAccountAsyncWithHttpInfo
     *
     * Retrieve account logo
     *
     * @param  string $account_uuid (required)
     * @param  bool $initials Get default avatar (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountLogoAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountLogoAccountAsyncWithHttpInfo($account_uuid, $initials = null, string $contentType = self::contentTypes['getAccountLogoAccount'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->getAccountLogoAccountRequest($account_uuid, $initials, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountLogoAccount'
     *
     * @param  string $account_uuid (required)
     * @param  bool $initials Get default avatar (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountLogoAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAccountLogoAccountRequest($account_uuid, $initials = null, string $contentType = self::contentTypes['getAccountLogoAccount'][0])
    {

        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling getAccountLogoAccount'
            );
        }



        $resourcePath = '/api/v1/account/logo/{accountUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $initials,
            'initials', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountUsersImportFileExample
     *
     * Get account users import file example
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountUsersImportFileExample'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function getAccountUsersImportFileExample($account_uuid, string $contentType = self::contentTypes['getAccountUsersImportFileExample'][0])
    {
        list($response) = $this->getAccountUsersImportFileExampleWithHttpInfo($account_uuid, $contentType);
        return $response;
    }

    /**
     * Operation getAccountUsersImportFileExampleWithHttpInfo
     *
     * Get account users import file example
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountUsersImportFileExample'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountUsersImportFileExampleWithHttpInfo($account_uuid, string $contentType = self::contentTypes['getAccountUsersImportFileExample'][0])
    {
        $request = $this->getAccountUsersImportFileExampleRequest($account_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountUsersImportFileExampleAsync
     *
     * Get account users import file example
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountUsersImportFileExample'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountUsersImportFileExampleAsync($account_uuid, string $contentType = self::contentTypes['getAccountUsersImportFileExample'][0])
    {
        return $this->getAccountUsersImportFileExampleAsyncWithHttpInfo($account_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountUsersImportFileExampleAsyncWithHttpInfo
     *
     * Get account users import file example
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountUsersImportFileExample'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountUsersImportFileExampleAsyncWithHttpInfo($account_uuid, string $contentType = self::contentTypes['getAccountUsersImportFileExample'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->getAccountUsersImportFileExampleRequest($account_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountUsersImportFileExample'
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountUsersImportFileExample'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAccountUsersImportFileExampleRequest($account_uuid, string $contentType = self::contentTypes['getAccountUsersImportFileExample'][0])
    {

        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling getAccountUsersImportFileExample'
            );
        }


        $resourcePath = '/api/v1/account/{accountUuid}/users/example';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/octet-stream', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCryptoConfigs
     *
     * Get crypto configs
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCryptoConfigs'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\CryptoConfigDTO[]
     */
    public function getCryptoConfigs($account_uuid, $mailbox = null, string $contentType = self::contentTypes['getCryptoConfigs'][0])
    {
        list($response) = $this->getCryptoConfigsWithHttpInfo($account_uuid, $mailbox, $contentType);
        return $response;
    }

    /**
     * Operation getCryptoConfigsWithHttpInfo
     *
     * Get crypto configs
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCryptoConfigs'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\CryptoConfigDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCryptoConfigsWithHttpInfo($account_uuid, $mailbox = null, string $contentType = self::contentTypes['getCryptoConfigs'][0])
    {
        $request = $this->getCryptoConfigsRequest($account_uuid, $mailbox, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DocStudio\Client\Model\CryptoConfigDTO[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\CryptoConfigDTO[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\CryptoConfigDTO[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\CryptoConfigDTO[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\CryptoConfigDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCryptoConfigsAsync
     *
     * Get crypto configs
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCryptoConfigs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCryptoConfigsAsync($account_uuid, $mailbox = null, string $contentType = self::contentTypes['getCryptoConfigs'][0])
    {
        return $this->getCryptoConfigsAsyncWithHttpInfo($account_uuid, $mailbox, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCryptoConfigsAsyncWithHttpInfo
     *
     * Get crypto configs
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCryptoConfigs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCryptoConfigsAsyncWithHttpInfo($account_uuid, $mailbox = null, string $contentType = self::contentTypes['getCryptoConfigs'][0])
    {
        $returnType = '\DocStudio\Client\Model\CryptoConfigDTO[]';
        $request = $this->getCryptoConfigsRequest($account_uuid, $mailbox, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCryptoConfigs'
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $mailbox Mailbox context, HTTP Header with current mailbox UUID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCryptoConfigs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCryptoConfigsRequest($account_uuid, $mailbox = null, string $contentType = self::contentTypes['getCryptoConfigs'][0])
    {

        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling getCryptoConfigs'
            );
        }



        $resourcePath = '/api/v1/account/{accountUuid}/crypto-configs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($mailbox !== null) {
            $headerParams['Mailbox'] = ObjectSerializer::toHeaderValue($mailbox);
        }

        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMailbox
     *
     * Users and their permissions by mailbox
     *
     * @param  string $uuid uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMailbox'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\MailboxAccountSimpleDTO
     */
    public function getMailbox($uuid, string $contentType = self::contentTypes['getMailbox'][0])
    {
        list($response) = $this->getMailboxWithHttpInfo($uuid, $contentType);
        return $response;
    }

    /**
     * Operation getMailboxWithHttpInfo
     *
     * Users and their permissions by mailbox
     *
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMailbox'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\MailboxAccountSimpleDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMailboxWithHttpInfo($uuid, string $contentType = self::contentTypes['getMailbox'][0])
    {
        $request = $this->getMailboxRequest($uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DocStudio\Client\Model\MailboxAccountSimpleDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\MailboxAccountSimpleDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\MailboxAccountSimpleDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\MailboxAccountSimpleDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\MailboxAccountSimpleDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMailboxAsync
     *
     * Users and their permissions by mailbox
     *
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMailbox'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMailboxAsync($uuid, string $contentType = self::contentTypes['getMailbox'][0])
    {
        return $this->getMailboxAsyncWithHttpInfo($uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMailboxAsyncWithHttpInfo
     *
     * Users and their permissions by mailbox
     *
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMailbox'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMailboxAsyncWithHttpInfo($uuid, string $contentType = self::contentTypes['getMailbox'][0])
    {
        $returnType = '\DocStudio\Client\Model\MailboxAccountSimpleDTO';
        $request = $this->getMailboxRequest($uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMailbox'
     *
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMailbox'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMailboxRequest($uuid, string $contentType = self::contentTypes['getMailbox'][0])
    {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling getMailbox'
            );
        }


        $resourcePath = '/api/v1/account/mailbox/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUserPolicies
     *
     * Get user password/session policies
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserPolicies'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\AccountPoliciesDTO
     */
    public function getUserPolicies($account_uuid, string $contentType = self::contentTypes['getUserPolicies'][0])
    {
        list($response) = $this->getUserPoliciesWithHttpInfo($account_uuid, $contentType);
        return $response;
    }

    /**
     * Operation getUserPoliciesWithHttpInfo
     *
     * Get user password/session policies
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserPolicies'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\AccountPoliciesDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserPoliciesWithHttpInfo($account_uuid, string $contentType = self::contentTypes['getUserPolicies'][0])
    {
        $request = $this->getUserPoliciesRequest($account_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DocStudio\Client\Model\AccountPoliciesDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\AccountPoliciesDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\AccountPoliciesDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\AccountPoliciesDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\AccountPoliciesDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUserPoliciesAsync
     *
     * Get user password/session policies
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserPolicies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserPoliciesAsync($account_uuid, string $contentType = self::contentTypes['getUserPolicies'][0])
    {
        return $this->getUserPoliciesAsyncWithHttpInfo($account_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUserPoliciesAsyncWithHttpInfo
     *
     * Get user password/session policies
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserPolicies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserPoliciesAsyncWithHttpInfo($account_uuid, string $contentType = self::contentTypes['getUserPolicies'][0])
    {
        $returnType = '\DocStudio\Client\Model\AccountPoliciesDTO';
        $request = $this->getUserPoliciesRequest($account_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUserPolicies'
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserPolicies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUserPoliciesRequest($account_uuid, string $contentType = self::contentTypes['getUserPolicies'][0])
    {

        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling getUserPolicies'
            );
        }


        $resourcePath = '/api/v1/account/{accountUuid}/user-policies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUsersPermissions
     *
     * Get users with permissions per account and mailboxes
     *
     * @param  string $account_uuid UUID of Account (required)
     * @param  \DocStudio\Client\Model\UsersSearchFilterDTO $users_search_filter_dto users_search_filter_dto (required)
     * @param  int $offset Offset, how much envelopes to skip (optional, default to 0)
     * @param  int $limit Limit, how much envelopes to retrieve (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUsersPermissions'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\PageDTOUserMailboxPermissionsDTO
     */
    public function getUsersPermissions($account_uuid, $users_search_filter_dto, $offset = 0, $limit = 25, string $contentType = self::contentTypes['getUsersPermissions'][0])
    {
        list($response) = $this->getUsersPermissionsWithHttpInfo($account_uuid, $users_search_filter_dto, $offset, $limit, $contentType);
        return $response;
    }

    /**
     * Operation getUsersPermissionsWithHttpInfo
     *
     * Get users with permissions per account and mailboxes
     *
     * @param  string $account_uuid UUID of Account (required)
     * @param  \DocStudio\Client\Model\UsersSearchFilterDTO $users_search_filter_dto (required)
     * @param  int $offset Offset, how much envelopes to skip (optional, default to 0)
     * @param  int $limit Limit, how much envelopes to retrieve (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUsersPermissions'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\PageDTOUserMailboxPermissionsDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUsersPermissionsWithHttpInfo($account_uuid, $users_search_filter_dto, $offset = 0, $limit = 25, string $contentType = self::contentTypes['getUsersPermissions'][0])
    {
        $request = $this->getUsersPermissionsRequest($account_uuid, $users_search_filter_dto, $offset, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DocStudio\Client\Model\PageDTOUserMailboxPermissionsDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\PageDTOUserMailboxPermissionsDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\PageDTOUserMailboxPermissionsDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\PageDTOUserMailboxPermissionsDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\PageDTOUserMailboxPermissionsDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUsersPermissionsAsync
     *
     * Get users with permissions per account and mailboxes
     *
     * @param  string $account_uuid UUID of Account (required)
     * @param  \DocStudio\Client\Model\UsersSearchFilterDTO $users_search_filter_dto (required)
     * @param  int $offset Offset, how much envelopes to skip (optional, default to 0)
     * @param  int $limit Limit, how much envelopes to retrieve (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUsersPermissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUsersPermissionsAsync($account_uuid, $users_search_filter_dto, $offset = 0, $limit = 25, string $contentType = self::contentTypes['getUsersPermissions'][0])
    {
        return $this->getUsersPermissionsAsyncWithHttpInfo($account_uuid, $users_search_filter_dto, $offset, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUsersPermissionsAsyncWithHttpInfo
     *
     * Get users with permissions per account and mailboxes
     *
     * @param  string $account_uuid UUID of Account (required)
     * @param  \DocStudio\Client\Model\UsersSearchFilterDTO $users_search_filter_dto (required)
     * @param  int $offset Offset, how much envelopes to skip (optional, default to 0)
     * @param  int $limit Limit, how much envelopes to retrieve (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUsersPermissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUsersPermissionsAsyncWithHttpInfo($account_uuid, $users_search_filter_dto, $offset = 0, $limit = 25, string $contentType = self::contentTypes['getUsersPermissions'][0])
    {
        $returnType = '\DocStudio\Client\Model\PageDTOUserMailboxPermissionsDTO';
        $request = $this->getUsersPermissionsRequest($account_uuid, $users_search_filter_dto, $offset, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUsersPermissions'
     *
     * @param  string $account_uuid UUID of Account (required)
     * @param  \DocStudio\Client\Model\UsersSearchFilterDTO $users_search_filter_dto (required)
     * @param  int $offset Offset, how much envelopes to skip (optional, default to 0)
     * @param  int $limit Limit, how much envelopes to retrieve (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUsersPermissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUsersPermissionsRequest($account_uuid, $users_search_filter_dto, $offset = 0, $limit = 25, string $contentType = self::contentTypes['getUsersPermissions'][0])
    {

        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling getUsersPermissions'
            );
        }

        // verify the required parameter 'users_search_filter_dto' is set
        if ($users_search_filter_dto === null || (is_array($users_search_filter_dto) && count($users_search_filter_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $users_search_filter_dto when calling getUsersPermissions'
            );
        }




        $resourcePath = '/api/v1/account/{accountUuid}/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($users_search_filter_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($users_search_filter_dto));
            } else {
                $httpBody = $users_search_filter_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mailboxesReport
     *
     * Generate account mailboxes report
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \DocStudio\Client\Model\ReportMailboxesRequestDTO $report_mailboxes_request_dto report_mailboxes_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mailboxesReport'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function mailboxesReport($account_uuid, $report_mailboxes_request_dto, string $contentType = self::contentTypes['mailboxesReport'][0])
    {
        $this->mailboxesReportWithHttpInfo($account_uuid, $report_mailboxes_request_dto, $contentType);
    }

    /**
     * Operation mailboxesReportWithHttpInfo
     *
     * Generate account mailboxes report
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \DocStudio\Client\Model\ReportMailboxesRequestDTO $report_mailboxes_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mailboxesReport'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function mailboxesReportWithHttpInfo($account_uuid, $report_mailboxes_request_dto, string $contentType = self::contentTypes['mailboxesReport'][0])
    {
        $request = $this->mailboxesReportRequest($account_uuid, $report_mailboxes_request_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation mailboxesReportAsync
     *
     * Generate account mailboxes report
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \DocStudio\Client\Model\ReportMailboxesRequestDTO $report_mailboxes_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mailboxesReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mailboxesReportAsync($account_uuid, $report_mailboxes_request_dto, string $contentType = self::contentTypes['mailboxesReport'][0])
    {
        return $this->mailboxesReportAsyncWithHttpInfo($account_uuid, $report_mailboxes_request_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mailboxesReportAsyncWithHttpInfo
     *
     * Generate account mailboxes report
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \DocStudio\Client\Model\ReportMailboxesRequestDTO $report_mailboxes_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mailboxesReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mailboxesReportAsyncWithHttpInfo($account_uuid, $report_mailboxes_request_dto, string $contentType = self::contentTypes['mailboxesReport'][0])
    {
        $returnType = '';
        $request = $this->mailboxesReportRequest($account_uuid, $report_mailboxes_request_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mailboxesReport'
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \DocStudio\Client\Model\ReportMailboxesRequestDTO $report_mailboxes_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mailboxesReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mailboxesReportRequest($account_uuid, $report_mailboxes_request_dto, string $contentType = self::contentTypes['mailboxesReport'][0])
    {

        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling mailboxesReport'
            );
        }

        // verify the required parameter 'report_mailboxes_request_dto' is set
        if ($report_mailboxes_request_dto === null || (is_array($report_mailboxes_request_dto) && count($report_mailboxes_request_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $report_mailboxes_request_dto when calling mailboxesReport'
            );
        }


        $resourcePath = '/api/v1/account/{accountUuid}/mailbox/report';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($report_mailboxes_request_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($report_mailboxes_request_dto));
            } else {
                $httpBody = $report_mailboxes_request_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation resendCorporateUserWelcomeMessage
     *
     * Resend corporate user welcome message
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $user_uuid User UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resendCorporateUserWelcomeMessage'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function resendCorporateUserWelcomeMessage($account_uuid, $user_uuid, string $contentType = self::contentTypes['resendCorporateUserWelcomeMessage'][0])
    {
        $this->resendCorporateUserWelcomeMessageWithHttpInfo($account_uuid, $user_uuid, $contentType);
    }

    /**
     * Operation resendCorporateUserWelcomeMessageWithHttpInfo
     *
     * Resend corporate user welcome message
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $user_uuid User UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resendCorporateUserWelcomeMessage'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function resendCorporateUserWelcomeMessageWithHttpInfo($account_uuid, $user_uuid, string $contentType = self::contentTypes['resendCorporateUserWelcomeMessage'][0])
    {
        $request = $this->resendCorporateUserWelcomeMessageRequest($account_uuid, $user_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation resendCorporateUserWelcomeMessageAsync
     *
     * Resend corporate user welcome message
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $user_uuid User UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resendCorporateUserWelcomeMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resendCorporateUserWelcomeMessageAsync($account_uuid, $user_uuid, string $contentType = self::contentTypes['resendCorporateUserWelcomeMessage'][0])
    {
        return $this->resendCorporateUserWelcomeMessageAsyncWithHttpInfo($account_uuid, $user_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation resendCorporateUserWelcomeMessageAsyncWithHttpInfo
     *
     * Resend corporate user welcome message
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $user_uuid User UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resendCorporateUserWelcomeMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resendCorporateUserWelcomeMessageAsyncWithHttpInfo($account_uuid, $user_uuid, string $contentType = self::contentTypes['resendCorporateUserWelcomeMessage'][0])
    {
        $returnType = '';
        $request = $this->resendCorporateUserWelcomeMessageRequest($account_uuid, $user_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'resendCorporateUserWelcomeMessage'
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $user_uuid User UUID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resendCorporateUserWelcomeMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function resendCorporateUserWelcomeMessageRequest($account_uuid, $user_uuid, string $contentType = self::contentTypes['resendCorporateUserWelcomeMessage'][0])
    {

        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling resendCorporateUserWelcomeMessage'
            );
        }

        // verify the required parameter 'user_uuid' is set
        if ($user_uuid === null || (is_array($user_uuid) && count($user_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_uuid when calling resendCorporateUserWelcomeMessage'
            );
        }


        $resourcePath = '/api/v1/account/{accountUuid}/user/{userUuid}/welcome';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }
        // path params
        if ($user_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'userUuid' . '}',
                ObjectSerializer::toPathValue($user_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation saveUserPolicies
     *
     * Save user password/session policies
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \DocStudio\Client\Model\AccountPoliciesDTO $account_policies_dto account_policies_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['saveUserPolicies'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function saveUserPolicies($account_uuid, $account_policies_dto, string $contentType = self::contentTypes['saveUserPolicies'][0])
    {
        $this->saveUserPoliciesWithHttpInfo($account_uuid, $account_policies_dto, $contentType);
    }

    /**
     * Operation saveUserPoliciesWithHttpInfo
     *
     * Save user password/session policies
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \DocStudio\Client\Model\AccountPoliciesDTO $account_policies_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['saveUserPolicies'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function saveUserPoliciesWithHttpInfo($account_uuid, $account_policies_dto, string $contentType = self::contentTypes['saveUserPolicies'][0])
    {
        $request = $this->saveUserPoliciesRequest($account_uuid, $account_policies_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation saveUserPoliciesAsync
     *
     * Save user password/session policies
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \DocStudio\Client\Model\AccountPoliciesDTO $account_policies_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['saveUserPolicies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saveUserPoliciesAsync($account_uuid, $account_policies_dto, string $contentType = self::contentTypes['saveUserPolicies'][0])
    {
        return $this->saveUserPoliciesAsyncWithHttpInfo($account_uuid, $account_policies_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation saveUserPoliciesAsyncWithHttpInfo
     *
     * Save user password/session policies
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \DocStudio\Client\Model\AccountPoliciesDTO $account_policies_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['saveUserPolicies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saveUserPoliciesAsyncWithHttpInfo($account_uuid, $account_policies_dto, string $contentType = self::contentTypes['saveUserPolicies'][0])
    {
        $returnType = '';
        $request = $this->saveUserPoliciesRequest($account_uuid, $account_policies_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'saveUserPolicies'
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \DocStudio\Client\Model\AccountPoliciesDTO $account_policies_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['saveUserPolicies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function saveUserPoliciesRequest($account_uuid, $account_policies_dto, string $contentType = self::contentTypes['saveUserPolicies'][0])
    {

        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling saveUserPolicies'
            );
        }

        // verify the required parameter 'account_policies_dto' is set
        if ($account_policies_dto === null || (is_array($account_policies_dto) && count($account_policies_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_policies_dto when calling saveUserPolicies'
            );
        }


        $resourcePath = '/api/v1/account/{accountUuid}/user-policies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($account_policies_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($account_policies_dto));
            } else {
                $httpBody = $account_policies_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchMailboxesAccount
     *
     * Get paged account mailboxes list
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $keyword Keyword to search mailbox by or mailbox UUID (optional)
     * @param  bool $with_groups Include groups info into response (optional)
     * @param  string[] $group Include groups info into response (optional)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchMailboxesAccount'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\PageDTOAccountMailboxInfoDTO
     */
    public function searchMailboxesAccount($account_uuid, $keyword = null, $with_groups = null, $group = null, $offset = 0, $limit = 25, string $contentType = self::contentTypes['searchMailboxesAccount'][0])
    {
        list($response) = $this->searchMailboxesAccountWithHttpInfo($account_uuid, $keyword, $with_groups, $group, $offset, $limit, $contentType);
        return $response;
    }

    /**
     * Operation searchMailboxesAccountWithHttpInfo
     *
     * Get paged account mailboxes list
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $keyword Keyword to search mailbox by or mailbox UUID (optional)
     * @param  bool $with_groups Include groups info into response (optional)
     * @param  string[] $group Include groups info into response (optional)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchMailboxesAccount'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\PageDTOAccountMailboxInfoDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchMailboxesAccountWithHttpInfo($account_uuid, $keyword = null, $with_groups = null, $group = null, $offset = 0, $limit = 25, string $contentType = self::contentTypes['searchMailboxesAccount'][0])
    {
        $request = $this->searchMailboxesAccountRequest($account_uuid, $keyword, $with_groups, $group, $offset, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DocStudio\Client\Model\PageDTOAccountMailboxInfoDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\PageDTOAccountMailboxInfoDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\PageDTOAccountMailboxInfoDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\PageDTOAccountMailboxInfoDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\PageDTOAccountMailboxInfoDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchMailboxesAccountAsync
     *
     * Get paged account mailboxes list
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $keyword Keyword to search mailbox by or mailbox UUID (optional)
     * @param  bool $with_groups Include groups info into response (optional)
     * @param  string[] $group Include groups info into response (optional)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchMailboxesAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchMailboxesAccountAsync($account_uuid, $keyword = null, $with_groups = null, $group = null, $offset = 0, $limit = 25, string $contentType = self::contentTypes['searchMailboxesAccount'][0])
    {
        return $this->searchMailboxesAccountAsyncWithHttpInfo($account_uuid, $keyword, $with_groups, $group, $offset, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchMailboxesAccountAsyncWithHttpInfo
     *
     * Get paged account mailboxes list
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $keyword Keyword to search mailbox by or mailbox UUID (optional)
     * @param  bool $with_groups Include groups info into response (optional)
     * @param  string[] $group Include groups info into response (optional)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchMailboxesAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchMailboxesAccountAsyncWithHttpInfo($account_uuid, $keyword = null, $with_groups = null, $group = null, $offset = 0, $limit = 25, string $contentType = self::contentTypes['searchMailboxesAccount'][0])
    {
        $returnType = '\DocStudio\Client\Model\PageDTOAccountMailboxInfoDTO';
        $request = $this->searchMailboxesAccountRequest($account_uuid, $keyword, $with_groups, $group, $offset, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchMailboxesAccount'
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  string $keyword Keyword to search mailbox by or mailbox UUID (optional)
     * @param  bool $with_groups Include groups info into response (optional)
     * @param  string[] $group Include groups info into response (optional)
     * @param  int $offset Offset records (optional, default to 0)
     * @param  int $limit Limit records, max is 1000 (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchMailboxesAccount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchMailboxesAccountRequest($account_uuid, $keyword = null, $with_groups = null, $group = null, $offset = 0, $limit = 25, string $contentType = self::contentTypes['searchMailboxesAccount'][0])
    {

        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling searchMailboxesAccount'
            );
        }



        



        $resourcePath = '/api/v1/account/{accountUuid}/mailbox';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $keyword,
            'keyword', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_groups,
            'withGroups', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $group,
            'group', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAccountBillingAddress
     *
     * Create/update account billing address
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \DocStudio\Client\Model\AccountAddressDTO $account_address_dto account_address_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccountBillingAddress'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\AccountAddressDTO
     */
    public function updateAccountBillingAddress($account_uuid, $account_address_dto, string $contentType = self::contentTypes['updateAccountBillingAddress'][0])
    {
        list($response) = $this->updateAccountBillingAddressWithHttpInfo($account_uuid, $account_address_dto, $contentType);
        return $response;
    }

    /**
     * Operation updateAccountBillingAddressWithHttpInfo
     *
     * Create/update account billing address
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \DocStudio\Client\Model\AccountAddressDTO $account_address_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccountBillingAddress'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\AccountAddressDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAccountBillingAddressWithHttpInfo($account_uuid, $account_address_dto, string $contentType = self::contentTypes['updateAccountBillingAddress'][0])
    {
        $request = $this->updateAccountBillingAddressRequest($account_uuid, $account_address_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DocStudio\Client\Model\AccountAddressDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\AccountAddressDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\AccountAddressDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\AccountAddressDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\AccountAddressDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAccountBillingAddressAsync
     *
     * Create/update account billing address
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \DocStudio\Client\Model\AccountAddressDTO $account_address_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccountBillingAddress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAccountBillingAddressAsync($account_uuid, $account_address_dto, string $contentType = self::contentTypes['updateAccountBillingAddress'][0])
    {
        return $this->updateAccountBillingAddressAsyncWithHttpInfo($account_uuid, $account_address_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAccountBillingAddressAsyncWithHttpInfo
     *
     * Create/update account billing address
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \DocStudio\Client\Model\AccountAddressDTO $account_address_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccountBillingAddress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAccountBillingAddressAsyncWithHttpInfo($account_uuid, $account_address_dto, string $contentType = self::contentTypes['updateAccountBillingAddress'][0])
    {
        $returnType = '\DocStudio\Client\Model\AccountAddressDTO';
        $request = $this->updateAccountBillingAddressRequest($account_uuid, $account_address_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAccountBillingAddress'
     *
     * @param  string $account_uuid Account UUID (required)
     * @param  \DocStudio\Client\Model\AccountAddressDTO $account_address_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccountBillingAddress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateAccountBillingAddressRequest($account_uuid, $account_address_dto, string $contentType = self::contentTypes['updateAccountBillingAddress'][0])
    {

        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling updateAccountBillingAddress'
            );
        }

        // verify the required parameter 'account_address_dto' is set
        if ($account_address_dto === null || (is_array($account_address_dto) && count($account_address_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_address_dto when calling updateAccountBillingAddress'
            );
        }


        $resourcePath = '/api/v1/account/{accountUuid}/billing/address';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($account_address_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($account_address_dto));
            } else {
                $httpBody = $account_address_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAccountDetails
     *
     * @param  string $uuid uuid (required)
     * @param  \DocStudio\Client\Model\AccountDTO $account_dto account_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccountDetails'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DocStudio\Client\Model\AccountDTO
     */
    public function updateAccountDetails($uuid, $account_dto, string $contentType = self::contentTypes['updateAccountDetails'][0])
    {
        list($response) = $this->updateAccountDetailsWithHttpInfo($uuid, $account_dto, $contentType);
        return $response;
    }

    /**
     * Operation updateAccountDetailsWithHttpInfo
     *
     * @param  string $uuid (required)
     * @param  \DocStudio\Client\Model\AccountDTO $account_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccountDetails'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DocStudio\Client\Model\AccountDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAccountDetailsWithHttpInfo($uuid, $account_dto, string $contentType = self::contentTypes['updateAccountDetails'][0])
    {
        $request = $this->updateAccountDetailsRequest($uuid, $account_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\DocStudio\Client\Model\AccountDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\DocStudio\Client\Model\AccountDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\DocStudio\Client\Model\AccountDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\DocStudio\Client\Model\AccountDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocStudio\Client\Model\AccountDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAccountDetailsAsync
     *
     * @param  string $uuid (required)
     * @param  \DocStudio\Client\Model\AccountDTO $account_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccountDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAccountDetailsAsync($uuid, $account_dto, string $contentType = self::contentTypes['updateAccountDetails'][0])
    {
        return $this->updateAccountDetailsAsyncWithHttpInfo($uuid, $account_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAccountDetailsAsyncWithHttpInfo
     *
     * @param  string $uuid (required)
     * @param  \DocStudio\Client\Model\AccountDTO $account_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccountDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAccountDetailsAsyncWithHttpInfo($uuid, $account_dto, string $contentType = self::contentTypes['updateAccountDetails'][0])
    {
        $returnType = '\DocStudio\Client\Model\AccountDTO';
        $request = $this->updateAccountDetailsRequest($uuid, $account_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAccountDetails'
     *
     * @param  string $uuid (required)
     * @param  \DocStudio\Client\Model\AccountDTO $account_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccountDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateAccountDetailsRequest($uuid, $account_dto, string $contentType = self::contentTypes['updateAccountDetails'][0])
    {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling updateAccountDetails'
            );
        }

        // verify the required parameter 'account_dto' is set
        if ($account_dto === null || (is_array($account_dto) && count($account_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_dto when calling updateAccountDetails'
            );
        }


        $resourcePath = '/api/v1/account/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($account_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($account_dto));
            } else {
                $httpBody = $account_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usersReport
     *
     * Generate account users report
     *
     * @param  string $account_uuid UUID of Account (required)
     * @param  \DocStudio\Client\Model\ReportUsersRequestDTO $report_users_request_dto report_users_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersReport'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function usersReport($account_uuid, $report_users_request_dto, string $contentType = self::contentTypes['usersReport'][0])
    {
        $this->usersReportWithHttpInfo($account_uuid, $report_users_request_dto, $contentType);
    }

    /**
     * Operation usersReportWithHttpInfo
     *
     * Generate account users report
     *
     * @param  string $account_uuid UUID of Account (required)
     * @param  \DocStudio\Client\Model\ReportUsersRequestDTO $report_users_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersReport'] to see the possible values for this operation
     *
     * @throws \DocStudio\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersReportWithHttpInfo($account_uuid, $report_users_request_dto, string $contentType = self::contentTypes['usersReport'][0])
    {
        $request = $this->usersReportRequest($account_uuid, $report_users_request_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation usersReportAsync
     *
     * Generate account users report
     *
     * @param  string $account_uuid UUID of Account (required)
     * @param  \DocStudio\Client\Model\ReportUsersRequestDTO $report_users_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersReportAsync($account_uuid, $report_users_request_dto, string $contentType = self::contentTypes['usersReport'][0])
    {
        return $this->usersReportAsyncWithHttpInfo($account_uuid, $report_users_request_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersReportAsyncWithHttpInfo
     *
     * Generate account users report
     *
     * @param  string $account_uuid UUID of Account (required)
     * @param  \DocStudio\Client\Model\ReportUsersRequestDTO $report_users_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersReportAsyncWithHttpInfo($account_uuid, $report_users_request_dto, string $contentType = self::contentTypes['usersReport'][0])
    {
        $returnType = '';
        $request = $this->usersReportRequest($account_uuid, $report_users_request_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usersReport'
     *
     * @param  string $account_uuid UUID of Account (required)
     * @param  \DocStudio\Client\Model\ReportUsersRequestDTO $report_users_request_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usersReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersReportRequest($account_uuid, $report_users_request_dto, string $contentType = self::contentTypes['usersReport'][0])
    {

        // verify the required parameter 'account_uuid' is set
        if ($account_uuid === null || (is_array($account_uuid) && count($account_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_uuid when calling usersReport'
            );
        }

        // verify the required parameter 'report_users_request_dto' is set
        if ($report_users_request_dto === null || (is_array($report_users_request_dto) && count($report_users_request_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $report_users_request_dto when calling usersReport'
            );
        }


        $resourcePath = '/api/v1/account/{accountUuid}/users/report';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'accountUuid' . '}',
                ObjectSerializer::toPathValue($account_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($report_users_request_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($report_users_request_dto));
            } else {
                $httpBody = $report_users_request_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
