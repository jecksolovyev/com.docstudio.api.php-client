<?php
/**
 * CallbackEnvelopeFilterDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  DocStudio\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocStudio Api Documentation
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R75.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocStudio\Client\Model;

use \ArrayAccess;
use \DocStudio\Client\ObjectSerializer;

/**
 * CallbackEnvelopeFilterDTO Class Doc Comment
 *
 * @category Class
 * @description Search parameters for callback envelopes
 * @package  DocStudio\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CallbackEnvelopeFilterDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CallbackEnvelopeFilterDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'label' => 'string[]',
'status' => 'string[]',
'subject' => 'string',
'receive_date_from' => '\DateTime',
'receive_date_to' => '\DateTime',
'expire_date_from' => '\DateTime',
'expire_date_to' => '\DateTime',
'template' => 'string[]',
'sender' => 'string[]',
'scope' => 'string[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'label' => null,
'status' => null,
'subject' => null,
'receive_date_from' => 'date-time',
'receive_date_to' => 'date-time',
'expire_date_from' => 'date-time',
'expire_date_to' => 'date-time',
'template' => 'uuid',
'sender' => 'uuid',
'scope' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'label' => 'label',
'status' => 'status',
'subject' => 'subject',
'receive_date_from' => 'receiveDateFrom',
'receive_date_to' => 'receiveDateTo',
'expire_date_from' => 'expireDateFrom',
'expire_date_to' => 'expireDateTo',
'template' => 'template',
'sender' => 'sender',
'scope' => 'scope'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'label' => 'setLabel',
'status' => 'setStatus',
'subject' => 'setSubject',
'receive_date_from' => 'setReceiveDateFrom',
'receive_date_to' => 'setReceiveDateTo',
'expire_date_from' => 'setExpireDateFrom',
'expire_date_to' => 'setExpireDateTo',
'template' => 'setTemplate',
'sender' => 'setSender',
'scope' => 'setScope'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'label' => 'getLabel',
'status' => 'getStatus',
'subject' => 'getSubject',
'receive_date_from' => 'getReceiveDateFrom',
'receive_date_to' => 'getReceiveDateTo',
'expire_date_from' => 'getExpireDateFrom',
'expire_date_to' => 'getExpireDateTo',
'template' => 'getTemplate',
'sender' => 'getSender',
'scope' => 'getScope'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_DRAFT = 'DRAFT';
const STATUS_SENT = 'SENT';
const STATUS_WAITING = 'WAITING';
const STATUS_COMPLETED = 'COMPLETED';
const STATUS_CANCELLED = 'CANCELLED';
const STATUS_EXPIRED = 'EXPIRED';
const STATUS_ON_APPROVAL = 'ON_APPROVAL';
const SCOPE_INBOX = 'inbox';
const SCOPE_OUTBOX = 'outbox';
const SCOPE_DRAFT = 'draft';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_DRAFT,
self::STATUS_SENT,
self::STATUS_WAITING,
self::STATUS_COMPLETED,
self::STATUS_CANCELLED,
self::STATUS_EXPIRED,
self::STATUS_ON_APPROVAL,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScopeAllowableValues()
    {
        return [
            self::SCOPE_INBOX,
self::SCOPE_OUTBOX,
self::SCOPE_DRAFT,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['receive_date_from'] = isset($data['receive_date_from']) ? $data['receive_date_from'] : null;
        $this->container['receive_date_to'] = isset($data['receive_date_to']) ? $data['receive_date_to'] : null;
        $this->container['expire_date_from'] = isset($data['expire_date_from']) ? $data['expire_date_from'] : null;
        $this->container['expire_date_to'] = isset($data['expire_date_to']) ? $data['expire_date_to'] : null;
        $this->container['template'] = isset($data['template']) ? $data['template'] : null;
        $this->container['sender'] = isset($data['sender']) ? $data['sender'] : null;
        $this->container['scope'] = isset($data['scope']) ? $data['scope'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets label
     *
     * @return string[]
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string[] $label label
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string[]
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string[] $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && array_diff($status, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject Envelope subject
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets receive_date_from
     *
     * @return \DateTime
     */
    public function getReceiveDateFrom()
    {
        return $this->container['receive_date_from'];
    }

    /**
     * Sets receive_date_from
     *
     * @param \DateTime $receive_date_from Receive date from
     *
     * @return $this
     */
    public function setReceiveDateFrom($receive_date_from)
    {
        $this->container['receive_date_from'] = $receive_date_from;

        return $this;
    }

    /**
     * Gets receive_date_to
     *
     * @return \DateTime
     */
    public function getReceiveDateTo()
    {
        return $this->container['receive_date_to'];
    }

    /**
     * Sets receive_date_to
     *
     * @param \DateTime $receive_date_to Receive date to
     *
     * @return $this
     */
    public function setReceiveDateTo($receive_date_to)
    {
        $this->container['receive_date_to'] = $receive_date_to;

        return $this;
    }

    /**
     * Gets expire_date_from
     *
     * @return \DateTime
     */
    public function getExpireDateFrom()
    {
        return $this->container['expire_date_from'];
    }

    /**
     * Sets expire_date_from
     *
     * @param \DateTime $expire_date_from Expire date from
     *
     * @return $this
     */
    public function setExpireDateFrom($expire_date_from)
    {
        $this->container['expire_date_from'] = $expire_date_from;

        return $this;
    }

    /**
     * Gets expire_date_to
     *
     * @return \DateTime
     */
    public function getExpireDateTo()
    {
        return $this->container['expire_date_to'];
    }

    /**
     * Sets expire_date_to
     *
     * @param \DateTime $expire_date_to Expire date to
     *
     * @return $this
     */
    public function setExpireDateTo($expire_date_to)
    {
        $this->container['expire_date_to'] = $expire_date_to;

        return $this;
    }

    /**
     * Gets template
     *
     * @return string[]
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param string[] $template template
     *
     * @return $this
     */
    public function setTemplate($template)
    {
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return string[]
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param string[] $sender sender
     *
     * @return $this
     */
    public function setSender($sender)
    {
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return string[]
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param string[] $scope scope
     *
     * @return $this
     */
    public function setScope($scope)
    {
        $allowedValues = $this->getScopeAllowableValues();
        if (!is_null($scope) && array_diff($scope, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'scope', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['scope'] = $scope;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
