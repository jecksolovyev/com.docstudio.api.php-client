<?php
/**
 * EnvelopePageDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Docstudio\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocStudio Api Documentation
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R74.25
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Docstudio\Client\Model;

use \ArrayAccess;
use \Docstudio\Client\ObjectSerializer;

/**
 * EnvelopePageDTO Class Doc Comment
 *
 * @category Class
 * @package  Docstudio\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EnvelopePageDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EnvelopePageDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'total_elements' => 'int',
'size_requested' => 'int',
'number_of_elements' => 'int',
'data' => '\Swagger\Client\Model\EnvelopeToMailboxDTO[]',
'search_fields' => '\Swagger\Client\Model\EnvelopeSearchField[]',
'columns' => '\Swagger\Client\Model\EnvelopeViewColumn[]',
'senders' => '\Swagger\Client\Model\EnvelopeSenderDTO[]',
'templates' => '\Swagger\Client\Model\EnvelopeTemplateInfoDTO[]',
'senders_info' => '\Swagger\Client\Model\EnvelopePageDTO',
'templates_info' => '\Swagger\Client\Model\EnvelopePageDTO'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'total_elements' => 'int64',
'size_requested' => 'int64',
'number_of_elements' => 'int64',
'data' => null,
'search_fields' => null,
'columns' => null,
'senders' => null,
'templates' => null,
'senders_info' => null,
'templates_info' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'total_elements' => 'totalElements',
'size_requested' => 'sizeRequested',
'number_of_elements' => 'numberOfElements',
'data' => 'data',
'search_fields' => 'searchFields',
'columns' => 'columns',
'senders' => 'senders',
'templates' => 'templates',
'senders_info' => 'sendersInfo',
'templates_info' => 'templatesInfo'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'total_elements' => 'setTotalElements',
'size_requested' => 'setSizeRequested',
'number_of_elements' => 'setNumberOfElements',
'data' => 'setData',
'search_fields' => 'setSearchFields',
'columns' => 'setColumns',
'senders' => 'setSenders',
'templates' => 'setTemplates',
'senders_info' => 'setSendersInfo',
'templates_info' => 'setTemplatesInfo'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'total_elements' => 'getTotalElements',
'size_requested' => 'getSizeRequested',
'number_of_elements' => 'getNumberOfElements',
'data' => 'getData',
'search_fields' => 'getSearchFields',
'columns' => 'getColumns',
'senders' => 'getSenders',
'templates' => 'getTemplates',
'senders_info' => 'getSendersInfo',
'templates_info' => 'getTemplatesInfo'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['total_elements'] = isset($data['total_elements']) ? $data['total_elements'] : null;
        $this->container['size_requested'] = isset($data['size_requested']) ? $data['size_requested'] : null;
        $this->container['number_of_elements'] = isset($data['number_of_elements']) ? $data['number_of_elements'] : null;
        $this->container['data'] = isset($data['data']) ? $data['data'] : null;
        $this->container['search_fields'] = isset($data['search_fields']) ? $data['search_fields'] : null;
        $this->container['columns'] = isset($data['columns']) ? $data['columns'] : null;
        $this->container['senders'] = isset($data['senders']) ? $data['senders'] : null;
        $this->container['templates'] = isset($data['templates']) ? $data['templates'] : null;
        $this->container['senders_info'] = isset($data['senders_info']) ? $data['senders_info'] : null;
        $this->container['templates_info'] = isset($data['templates_info']) ? $data['templates_info'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets total_elements
     *
     * @return int
     */
    public function getTotalElements()
    {
        return $this->container['total_elements'];
    }

    /**
     * Sets total_elements
     *
     * @param int $total_elements Total elements by request
     *
     * @return $this
     */
    public function setTotalElements($total_elements)
    {
        $this->container['total_elements'] = $total_elements;

        return $this;
    }

    /**
     * Gets size_requested
     *
     * @return int
     */
    public function getSizeRequested()
    {
        return $this->container['size_requested'];
    }

    /**
     * Sets size_requested
     *
     * @param int $size_requested Requested size
     *
     * @return $this
     */
    public function setSizeRequested($size_requested)
    {
        $this->container['size_requested'] = $size_requested;

        return $this;
    }

    /**
     * Gets number_of_elements
     *
     * @return int
     */
    public function getNumberOfElements()
    {
        return $this->container['number_of_elements'];
    }

    /**
     * Sets number_of_elements
     *
     * @param int $number_of_elements Fetched records count
     *
     * @return $this
     */
    public function setNumberOfElements($number_of_elements)
    {
        $this->container['number_of_elements'] = $number_of_elements;

        return $this;
    }

    /**
     * Gets data
     *
     * @return \Docstudio\Client\Model\EnvelopeToMailboxDTO[]
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param \Docstudio\Client\Model\EnvelopeToMailboxDTO[] $data Data records
     *
     * @return $this
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets search_fields
     *
     * @return \Docstudio\Client\Model\EnvelopeSearchField[]
     */
    public function getSearchFields()
    {
        return $this->container['search_fields'];
    }

    /**
     * Sets search_fields
     *
     * @param \Docstudio\Client\Model\EnvelopeSearchField[] $search_fields Search fields
     *
     * @return $this
     */
    public function setSearchFields($search_fields)
    {
        $this->container['search_fields'] = $search_fields;

        return $this;
    }

    /**
     * Gets columns
     *
     * @return \Docstudio\Client\Model\EnvelopeViewColumn[]
     */
    public function getColumns()
    {
        return $this->container['columns'];
    }

    /**
     * Sets columns
     *
     * @param \Docstudio\Client\Model\EnvelopeViewColumn[] $columns Saved columns to display
     *
     * @return $this
     */
    public function setColumns($columns)
    {
        $this->container['columns'] = $columns;

        return $this;
    }

    /**
     * Gets senders
     *
     * @return \Docstudio\Client\Model\EnvelopeSenderDTO[]
     */
    public function getSenders()
    {
        return $this->container['senders'];
    }

    /**
     * Sets senders
     *
     * @param \Docstudio\Client\Model\EnvelopeSenderDTO[] $senders Senders
     *
     * @return $this
     */
    public function setSenders($senders)
    {
        $this->container['senders'] = $senders;

        return $this;
    }

    /**
     * Gets templates
     *
     * @return \Docstudio\Client\Model\EnvelopeTemplateInfoDTO[]
     */
    public function getTemplates()
    {
        return $this->container['templates'];
    }

    /**
     * Sets templates
     *
     * @param \Docstudio\Client\Model\EnvelopeTemplateInfoDTO[] $templates Templates
     *
     * @return $this
     */
    public function setTemplates($templates)
    {
        $this->container['templates'] = $templates;

        return $this;
    }

    /**
     * Gets senders_info
     *
     * @return \Docstudio\Client\Model\EnvelopePageDTO
     */
    public function getSendersInfo()
    {
        return $this->container['senders_info'];
    }

    /**
     * Sets senders_info
     *
     * @param \Docstudio\Client\Model\EnvelopePageDTO $senders_info senders_info
     *
     * @return $this
     */
    public function setSendersInfo($senders_info)
    {
        $this->container['senders_info'] = $senders_info;

        return $this;
    }

    /**
     * Gets templates_info
     *
     * @return \Docstudio\Client\Model\EnvelopePageDTO
     */
    public function getTemplatesInfo()
    {
        return $this->container['templates_info'];
    }

    /**
     * Sets templates_info
     *
     * @param \Docstudio\Client\Model\EnvelopePageDTO $templates_info templates_info
     *
     * @return $this
     */
    public function setTemplatesInfo($templates_info)
    {
        $this->container['templates_info'] = $templates_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
