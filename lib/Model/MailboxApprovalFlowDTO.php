<?php
/**
 * MailboxApprovalFlowDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocStudio Api Documentation
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R74.25
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Docstudio\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MailboxApprovalFlowDTO Class Doc Comment
 *
 * @category Class
 * @description Flow to create
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MailboxApprovalFlowDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MailboxApprovalFlowDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'shared_for_account' => 'bool',
'shared_for_mailboxes' => 'string[]',
'name' => 'string',
'flow_type' => 'string',
'approvers' => '\Swagger\Client\Model\EnvelopeApproverDTO[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'shared_for_account' => null,
'shared_for_mailboxes' => 'uuid',
'name' => null,
'flow_type' => null,
'approvers' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shared_for_account' => 'sharedForAccount',
'shared_for_mailboxes' => 'sharedForMailboxes',
'name' => 'name',
'flow_type' => 'flowType',
'approvers' => 'approvers'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shared_for_account' => 'setSharedForAccount',
'shared_for_mailboxes' => 'setSharedForMailboxes',
'name' => 'setName',
'flow_type' => 'setFlowType',
'approvers' => 'setApprovers'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shared_for_account' => 'getSharedForAccount',
'shared_for_mailboxes' => 'getSharedForMailboxes',
'name' => 'getName',
'flow_type' => 'getFlowType',
'approvers' => 'getApprovers'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const FLOW_TYPE_AUTO = 'auto';
const FLOW_TYPE_MANUAL = 'manual';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFlowTypeAllowableValues()
    {
        return [
            self::FLOW_TYPE_AUTO,
self::FLOW_TYPE_MANUAL,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shared_for_account'] = isset($data['shared_for_account']) ? $data['shared_for_account'] : null;
        $this->container['shared_for_mailboxes'] = isset($data['shared_for_mailboxes']) ? $data['shared_for_mailboxes'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['flow_type'] = isset($data['flow_type']) ? $data['flow_type'] : null;
        $this->container['approvers'] = isset($data['approvers']) ? $data['approvers'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['flow_type'] === null) {
            $invalidProperties[] = "'flow_type' can't be null";
        }
        $allowedValues = $this->getFlowTypeAllowableValues();
        if (!is_null($this->container['flow_type']) && !in_array($this->container['flow_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'flow_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['approvers'] === null) {
            $invalidProperties[] = "'approvers' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shared_for_account
     *
     * @return bool
     */
    public function getSharedForAccount()
    {
        return $this->container['shared_for_account'];
    }

    /**
     * Sets shared_for_account
     *
     * @param bool $shared_for_account shared_for_account
     *
     * @return $this
     */
    public function setSharedForAccount($shared_for_account)
    {
        $this->container['shared_for_account'] = $shared_for_account;

        return $this;
    }

    /**
     * Gets shared_for_mailboxes
     *
     * @return string[]
     */
    public function getSharedForMailboxes()
    {
        return $this->container['shared_for_mailboxes'];
    }

    /**
     * Sets shared_for_mailboxes
     *
     * @param string[] $shared_for_mailboxes shared_for_mailboxes
     *
     * @return $this
     */
    public function setSharedForMailboxes($shared_for_mailboxes)
    {
        $this->container['shared_for_mailboxes'] = $shared_for_mailboxes;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets flow_type
     *
     * @return string
     */
    public function getFlowType()
    {
        return $this->container['flow_type'];
    }

    /**
     * Sets flow_type
     *
     * @param string $flow_type flow_type
     *
     * @return $this
     */
    public function setFlowType($flow_type)
    {
        $allowedValues = $this->getFlowTypeAllowableValues();
        if (!in_array($flow_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'flow_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['flow_type'] = $flow_type;

        return $this;
    }

    /**
     * Gets approvers
     *
     * @return \Swagger\Client\Model\EnvelopeApproverDTO[]
     */
    public function getApprovers()
    {
        return $this->container['approvers'];
    }

    /**
     * Sets approvers
     *
     * @param \Swagger\Client\Model\EnvelopeApproverDTO[] $approvers approvers
     *
     * @return $this
     */
    public function setApprovers($approvers)
    {
        $this->container['approvers'] = $approvers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
