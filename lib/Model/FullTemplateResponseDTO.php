<?php
/**
 * FullTemplateResponseDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocStudio\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DocStudio Api Documentation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R110.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DocStudio\Client\Model;

use \ArrayAccess;
use \DocStudio\Client\ObjectSerializer;

/**
 * FullTemplateResponseDTO Class Doc Comment
 *
 * @category Class
 * @package  DocStudio\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FullTemplateResponseDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FullTemplateResponseDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'uuid' => 'string',
        'name' => 'string',
        'description' => 'string',
        'data' => 'string',
        'version' => 'string',
        'data_created_at' => '\DateTime',
        'data_modified_at' => '\DateTime',
        'access' => 'string',
        'mailbox' => 'string',
        'archive' => 'bool',
        'new_envelope_can_be_created' => 'bool',
        'default_download_options' => 'bool',
        'categories' => 'string[]',
        'shared_categories' => 'string[]',
        'shared_to' => 'string[]',
        'shared_to_mailbox_groups' => 'string[]',
        'logo_image_uuid' => 'string',
        'created_at' => '\DateTime',
        'modified_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'uuid' => 'uuid',
        'name' => null,
        'description' => null,
        'data' => null,
        'version' => 'uuid',
        'data_created_at' => 'date-time',
        'data_modified_at' => 'date-time',
        'access' => null,
        'mailbox' => 'uuid',
        'archive' => null,
        'new_envelope_can_be_created' => null,
        'default_download_options' => null,
        'categories' => 'uuid',
        'shared_categories' => 'uuid',
        'shared_to' => 'uuid',
        'shared_to_mailbox_groups' => 'uuid',
        'logo_image_uuid' => 'uuid',
        'created_at' => 'date-time',
        'modified_at' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'uuid' => false,
        'name' => false,
        'description' => false,
        'data' => false,
        'version' => false,
        'data_created_at' => false,
        'data_modified_at' => false,
        'access' => false,
        'mailbox' => false,
        'archive' => false,
        'new_envelope_can_be_created' => false,
        'default_download_options' => false,
        'categories' => false,
        'shared_categories' => false,
        'shared_to' => false,
        'shared_to_mailbox_groups' => false,
        'logo_image_uuid' => false,
        'created_at' => false,
        'modified_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'uuid' => 'uuid',
        'name' => 'name',
        'description' => 'description',
        'data' => 'data',
        'version' => 'version',
        'data_created_at' => 'dataCreatedAt',
        'data_modified_at' => 'dataModifiedAt',
        'access' => 'access',
        'mailbox' => 'mailbox',
        'archive' => 'archive',
        'new_envelope_can_be_created' => 'newEnvelopeCanBeCreated',
        'default_download_options' => 'defaultDownloadOptions',
        'categories' => 'categories',
        'shared_categories' => 'sharedCategories',
        'shared_to' => 'sharedTo',
        'shared_to_mailbox_groups' => 'sharedToMailboxGroups',
        'logo_image_uuid' => 'logoImageUuid',
        'created_at' => 'createdAt',
        'modified_at' => 'modifiedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'uuid' => 'setUuid',
        'name' => 'setName',
        'description' => 'setDescription',
        'data' => 'setData',
        'version' => 'setVersion',
        'data_created_at' => 'setDataCreatedAt',
        'data_modified_at' => 'setDataModifiedAt',
        'access' => 'setAccess',
        'mailbox' => 'setMailbox',
        'archive' => 'setArchive',
        'new_envelope_can_be_created' => 'setNewEnvelopeCanBeCreated',
        'default_download_options' => 'setDefaultDownloadOptions',
        'categories' => 'setCategories',
        'shared_categories' => 'setSharedCategories',
        'shared_to' => 'setSharedTo',
        'shared_to_mailbox_groups' => 'setSharedToMailboxGroups',
        'logo_image_uuid' => 'setLogoImageUuid',
        'created_at' => 'setCreatedAt',
        'modified_at' => 'setModifiedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'uuid' => 'getUuid',
        'name' => 'getName',
        'description' => 'getDescription',
        'data' => 'getData',
        'version' => 'getVersion',
        'data_created_at' => 'getDataCreatedAt',
        'data_modified_at' => 'getDataModifiedAt',
        'access' => 'getAccess',
        'mailbox' => 'getMailbox',
        'archive' => 'getArchive',
        'new_envelope_can_be_created' => 'getNewEnvelopeCanBeCreated',
        'default_download_options' => 'getDefaultDownloadOptions',
        'categories' => 'getCategories',
        'shared_categories' => 'getSharedCategories',
        'shared_to' => 'getSharedTo',
        'shared_to_mailbox_groups' => 'getSharedToMailboxGroups',
        'logo_image_uuid' => 'getLogoImageUuid',
        'created_at' => 'getCreatedAt',
        'modified_at' => 'getModifiedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ACCESS_MAILBOX = 'mailbox';
    public const ACCESS_ACCOUNT = 'account';
    public const ACCESS_PUB = 'pub';
    public const ACCESS_OFFICIAL = 'official';
    public const ACCESS_SHARED = 'shared';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccessAllowableValues()
    {
        return [
            self::ACCESS_MAILBOX,
            self::ACCESS_ACCOUNT,
            self::ACCESS_PUB,
            self::ACCESS_OFFICIAL,
            self::ACCESS_SHARED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('uuid', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('data', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('data_created_at', $data ?? [], null);
        $this->setIfExists('data_modified_at', $data ?? [], null);
        $this->setIfExists('access', $data ?? [], null);
        $this->setIfExists('mailbox', $data ?? [], null);
        $this->setIfExists('archive', $data ?? [], null);
        $this->setIfExists('new_envelope_can_be_created', $data ?? [], null);
        $this->setIfExists('default_download_options', $data ?? [], null);
        $this->setIfExists('categories', $data ?? [], null);
        $this->setIfExists('shared_categories', $data ?? [], null);
        $this->setIfExists('shared_to', $data ?? [], null);
        $this->setIfExists('shared_to_mailbox_groups', $data ?? [], null);
        $this->setIfExists('logo_image_uuid', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('modified_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAccessAllowableValues();
        if (!is_null($this->container['access']) && !in_array($this->container['access'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'access', must be one of '%s'",
                $this->container['access'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid Template UUID
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        if (is_null($uuid)) {
            throw new \InvalidArgumentException('non-nullable uuid cannot be null');
        }
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Template name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Template description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets data
     *
     * @return string|null
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string|null $data Template data
     *
     * @return self
     */
    public function setData($data)
    {
        if (is_null($data)) {
            throw new \InvalidArgumentException('non-nullable data cannot be null');
        }
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version Template version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets data_created_at
     *
     * @return \DateTime|null
     */
    public function getDataCreatedAt()
    {
        return $this->container['data_created_at'];
    }

    /**
     * Sets data_created_at
     *
     * @param \DateTime|null $data_created_at Template data create date
     *
     * @return self
     */
    public function setDataCreatedAt($data_created_at)
    {
        if (is_null($data_created_at)) {
            throw new \InvalidArgumentException('non-nullable data_created_at cannot be null');
        }
        $this->container['data_created_at'] = $data_created_at;

        return $this;
    }

    /**
     * Gets data_modified_at
     *
     * @return \DateTime|null
     */
    public function getDataModifiedAt()
    {
        return $this->container['data_modified_at'];
    }

    /**
     * Sets data_modified_at
     *
     * @param \DateTime|null $data_modified_at Template data update date
     *
     * @return self
     */
    public function setDataModifiedAt($data_modified_at)
    {
        if (is_null($data_modified_at)) {
            throw new \InvalidArgumentException('non-nullable data_modified_at cannot be null');
        }
        $this->container['data_modified_at'] = $data_modified_at;

        return $this;
    }

    /**
     * Gets access
     *
     * @return string|null
     */
    public function getAccess()
    {
        return $this->container['access'];
    }

    /**
     * Sets access
     *
     * @param string|null $access Template access level
     *
     * @return self
     */
    public function setAccess($access)
    {
        if (is_null($access)) {
            throw new \InvalidArgumentException('non-nullable access cannot be null');
        }
        $allowedValues = $this->getAccessAllowableValues();
        if (!in_array($access, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'access', must be one of '%s'",
                    $access,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['access'] = $access;

        return $this;
    }

    /**
     * Gets mailbox
     *
     * @return string|null
     */
    public function getMailbox()
    {
        return $this->container['mailbox'];
    }

    /**
     * Sets mailbox
     *
     * @param string|null $mailbox Template creator's mailbox
     *
     * @return self
     */
    public function setMailbox($mailbox)
    {
        if (is_null($mailbox)) {
            throw new \InvalidArgumentException('non-nullable mailbox cannot be null');
        }
        $this->container['mailbox'] = $mailbox;

        return $this;
    }

    /**
     * Gets archive
     *
     * @return bool|null
     */
    public function getArchive()
    {
        return $this->container['archive'];
    }

    /**
     * Sets archive
     *
     * @param bool|null $archive Template archived
     *
     * @return self
     */
    public function setArchive($archive)
    {
        if (is_null($archive)) {
            throw new \InvalidArgumentException('non-nullable archive cannot be null');
        }
        $this->container['archive'] = $archive;

        return $this;
    }

    /**
     * Gets new_envelope_can_be_created
     *
     * @return bool|null
     */
    public function getNewEnvelopeCanBeCreated()
    {
        return $this->container['new_envelope_can_be_created'];
    }

    /**
     * Sets new_envelope_can_be_created
     *
     * @param bool|null $new_envelope_can_be_created Returns a flag whether a new envelope can be created using this template
     *
     * @return self
     */
    public function setNewEnvelopeCanBeCreated($new_envelope_can_be_created)
    {
        if (is_null($new_envelope_can_be_created)) {
            throw new \InvalidArgumentException('non-nullable new_envelope_can_be_created cannot be null');
        }
        $this->container['new_envelope_can_be_created'] = $new_envelope_can_be_created;

        return $this;
    }

    /**
     * Gets default_download_options
     *
     * @return bool|null
     */
    public function getDefaultDownloadOptions()
    {
        return $this->container['default_download_options'];
    }

    /**
     * Sets default_download_options
     *
     * @param bool|null $default_download_options Returns a flag whether default download options should appear or only custom one
     *
     * @return self
     */
    public function setDefaultDownloadOptions($default_download_options)
    {
        if (is_null($default_download_options)) {
            throw new \InvalidArgumentException('non-nullable default_download_options cannot be null');
        }
        $this->container['default_download_options'] = $default_download_options;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return string[]|null
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param string[]|null $categories Template categories ids. Empty array if not within any category.
     *
     * @return self
     */
    public function setCategories($categories)
    {
        if (is_null($categories)) {
            throw new \InvalidArgumentException('non-nullable categories cannot be null');
        }
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets shared_categories
     *
     * @return string[]|null
     */
    public function getSharedCategories()
    {
        return $this->container['shared_categories'];
    }

    /**
     * Sets shared_categories
     *
     * @param string[]|null $shared_categories Template shared categories ids. Absent if not within any shared category.
     *
     * @return self
     */
    public function setSharedCategories($shared_categories)
    {
        if (is_null($shared_categories)) {
            throw new \InvalidArgumentException('non-nullable shared_categories cannot be null');
        }
        $this->container['shared_categories'] = $shared_categories;

        return $this;
    }

    /**
     * Gets shared_to
     *
     * @return string[]|null
     */
    public function getSharedTo()
    {
        return $this->container['shared_to'];
    }

    /**
     * Sets shared_to
     *
     * @param string[]|null $shared_to Mailboxes to which template is shared to
     *
     * @return self
     */
    public function setSharedTo($shared_to)
    {
        if (is_null($shared_to)) {
            throw new \InvalidArgumentException('non-nullable shared_to cannot be null');
        }


        $this->container['shared_to'] = $shared_to;

        return $this;
    }

    /**
     * Gets shared_to_mailbox_groups
     *
     * @return string[]|null
     */
    public function getSharedToMailboxGroups()
    {
        return $this->container['shared_to_mailbox_groups'];
    }

    /**
     * Sets shared_to_mailbox_groups
     *
     * @param string[]|null $shared_to_mailbox_groups Mailbox groups to which template is shared to
     *
     * @return self
     */
    public function setSharedToMailboxGroups($shared_to_mailbox_groups)
    {
        if (is_null($shared_to_mailbox_groups)) {
            throw new \InvalidArgumentException('non-nullable shared_to_mailbox_groups cannot be null');
        }


        $this->container['shared_to_mailbox_groups'] = $shared_to_mailbox_groups;

        return $this;
    }

    /**
     * Gets logo_image_uuid
     *
     * @return string|null
     */
    public function getLogoImageUuid()
    {
        return $this->container['logo_image_uuid'];
    }

    /**
     * Sets logo_image_uuid
     *
     * @param string|null $logo_image_uuid UUID of the template logo image
     *
     * @return self
     */
    public function setLogoImageUuid($logo_image_uuid)
    {
        if (is_null($logo_image_uuid)) {
            throw new \InvalidArgumentException('non-nullable logo_image_uuid cannot be null');
        }
        $this->container['logo_image_uuid'] = $logo_image_uuid;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at Template create date
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets modified_at
     *
     * @return \DateTime|null
     */
    public function getModifiedAt()
    {
        return $this->container['modified_at'];
    }

    /**
     * Sets modified_at
     *
     * @param \DateTime|null $modified_at Template update date
     *
     * @return self
     */
    public function setModifiedAt($modified_at)
    {
        if (is_null($modified_at)) {
            throw new \InvalidArgumentException('non-nullable modified_at cannot be null');
        }
        $this->container['modified_at'] = $modified_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


