<?php
/**
 * FullTemplateResponseDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  DocStudio\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocStudio Api Documentation
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R75.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocStudio\Client\Model;

use \ArrayAccess;
use \DocStudio\Client\ObjectSerializer;

/**
 * FullTemplateResponseDTO Class Doc Comment
 *
 * @category Class
 * @package  DocStudio\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FullTemplateResponseDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FullTemplateResponseDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'uuid' => 'string',
'name' => 'string',
'description' => 'string',
'data' => 'string',
'version' => 'string',
'data_created_at' => '\DateTime',
'data_modified_at' => '\DateTime',
'access' => 'string',
'mailbox' => 'string',
'archive' => 'bool',
'new_envelope_can_be_created' => 'bool',
'categories' => 'int[]',
'shared_categories' => 'int[]',
'shared_to' => 'string[]',
'logo_image_uuid' => 'string',
'created_at' => '\DateTime',
'modified_at' => '\DateTime'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'uuid' => 'uuid',
'name' => null,
'description' => null,
'data' => null,
'version' => 'uuid',
'data_created_at' => 'date-time',
'data_modified_at' => 'date-time',
'access' => null,
'mailbox' => 'uuid',
'archive' => null,
'new_envelope_can_be_created' => null,
'categories' => 'int64',
'shared_categories' => 'int64',
'shared_to' => 'uuid',
'logo_image_uuid' => 'uuid',
'created_at' => 'date-time',
'modified_at' => 'date-time'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'uuid' => 'uuid',
'name' => 'name',
'description' => 'description',
'data' => 'data',
'version' => 'version',
'data_created_at' => 'dataCreatedAt',
'data_modified_at' => 'dataModifiedAt',
'access' => 'access',
'mailbox' => 'mailbox',
'archive' => 'archive',
'new_envelope_can_be_created' => 'newEnvelopeCanBeCreated',
'categories' => 'categories',
'shared_categories' => 'sharedCategories',
'shared_to' => 'sharedTo',
'logo_image_uuid' => 'logoImageUuid',
'created_at' => 'createdAt',
'modified_at' => 'modifiedAt'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'uuid' => 'setUuid',
'name' => 'setName',
'description' => 'setDescription',
'data' => 'setData',
'version' => 'setVersion',
'data_created_at' => 'setDataCreatedAt',
'data_modified_at' => 'setDataModifiedAt',
'access' => 'setAccess',
'mailbox' => 'setMailbox',
'archive' => 'setArchive',
'new_envelope_can_be_created' => 'setNewEnvelopeCanBeCreated',
'categories' => 'setCategories',
'shared_categories' => 'setSharedCategories',
'shared_to' => 'setSharedTo',
'logo_image_uuid' => 'setLogoImageUuid',
'created_at' => 'setCreatedAt',
'modified_at' => 'setModifiedAt'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'uuid' => 'getUuid',
'name' => 'getName',
'description' => 'getDescription',
'data' => 'getData',
'version' => 'getVersion',
'data_created_at' => 'getDataCreatedAt',
'data_modified_at' => 'getDataModifiedAt',
'access' => 'getAccess',
'mailbox' => 'getMailbox',
'archive' => 'getArchive',
'new_envelope_can_be_created' => 'getNewEnvelopeCanBeCreated',
'categories' => 'getCategories',
'shared_categories' => 'getSharedCategories',
'shared_to' => 'getSharedTo',
'logo_image_uuid' => 'getLogoImageUuid',
'created_at' => 'getCreatedAt',
'modified_at' => 'getModifiedAt'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ACCESS_MAILBOX = 'mailbox';
const ACCESS_ACCOUNT = 'account';
const ACCESS_PUB = 'pub';
const ACCESS_OFFICIAL = 'official';
const ACCESS_SHARED = 'shared';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccessAllowableValues()
    {
        return [
            self::ACCESS_MAILBOX,
self::ACCESS_ACCOUNT,
self::ACCESS_PUB,
self::ACCESS_OFFICIAL,
self::ACCESS_SHARED,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['uuid'] = isset($data['uuid']) ? $data['uuid'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['data'] = isset($data['data']) ? $data['data'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['data_created_at'] = isset($data['data_created_at']) ? $data['data_created_at'] : null;
        $this->container['data_modified_at'] = isset($data['data_modified_at']) ? $data['data_modified_at'] : null;
        $this->container['access'] = isset($data['access']) ? $data['access'] : null;
        $this->container['mailbox'] = isset($data['mailbox']) ? $data['mailbox'] : null;
        $this->container['archive'] = isset($data['archive']) ? $data['archive'] : null;
        $this->container['new_envelope_can_be_created'] = isset($data['new_envelope_can_be_created']) ? $data['new_envelope_can_be_created'] : null;
        $this->container['categories'] = isset($data['categories']) ? $data['categories'] : null;
        $this->container['shared_categories'] = isset($data['shared_categories']) ? $data['shared_categories'] : null;
        $this->container['shared_to'] = isset($data['shared_to']) ? $data['shared_to'] : null;
        $this->container['logo_image_uuid'] = isset($data['logo_image_uuid']) ? $data['logo_image_uuid'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['modified_at'] = isset($data['modified_at']) ? $data['modified_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAccessAllowableValues();
        if (!is_null($this->container['access']) && !in_array($this->container['access'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'access', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets uuid
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string $uuid Template UUID
     *
     * @return $this
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Template name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Template description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets data
     *
     * @return string
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string $data Template data
     *
     * @return $this
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version Template version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets data_created_at
     *
     * @return \DateTime
     */
    public function getDataCreatedAt()
    {
        return $this->container['data_created_at'];
    }

    /**
     * Sets data_created_at
     *
     * @param \DateTime $data_created_at Template data create date
     *
     * @return $this
     */
    public function setDataCreatedAt($data_created_at)
    {
        $this->container['data_created_at'] = $data_created_at;

        return $this;
    }

    /**
     * Gets data_modified_at
     *
     * @return \DateTime
     */
    public function getDataModifiedAt()
    {
        return $this->container['data_modified_at'];
    }

    /**
     * Sets data_modified_at
     *
     * @param \DateTime $data_modified_at Template data update date
     *
     * @return $this
     */
    public function setDataModifiedAt($data_modified_at)
    {
        $this->container['data_modified_at'] = $data_modified_at;

        return $this;
    }

    /**
     * Gets access
     *
     * @return string
     */
    public function getAccess()
    {
        return $this->container['access'];
    }

    /**
     * Sets access
     *
     * @param string $access Template access level
     *
     * @return $this
     */
    public function setAccess($access)
    {
        $allowedValues = $this->getAccessAllowableValues();
        if (!is_null($access) && !in_array($access, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'access', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['access'] = $access;

        return $this;
    }

    /**
     * Gets mailbox
     *
     * @return string
     */
    public function getMailbox()
    {
        return $this->container['mailbox'];
    }

    /**
     * Sets mailbox
     *
     * @param string $mailbox Template creator's mailbox
     *
     * @return $this
     */
    public function setMailbox($mailbox)
    {
        $this->container['mailbox'] = $mailbox;

        return $this;
    }

    /**
     * Gets archive
     *
     * @return bool
     */
    public function getArchive()
    {
        return $this->container['archive'];
    }

    /**
     * Sets archive
     *
     * @param bool $archive Template archived
     *
     * @return $this
     */
    public function setArchive($archive)
    {
        $this->container['archive'] = $archive;

        return $this;
    }

    /**
     * Gets new_envelope_can_be_created
     *
     * @return bool
     */
    public function getNewEnvelopeCanBeCreated()
    {
        return $this->container['new_envelope_can_be_created'];
    }

    /**
     * Sets new_envelope_can_be_created
     *
     * @param bool $new_envelope_can_be_created Returns a flag whether a new envelope can be created using this template
     *
     * @return $this
     */
    public function setNewEnvelopeCanBeCreated($new_envelope_can_be_created)
    {
        $this->container['new_envelope_can_be_created'] = $new_envelope_can_be_created;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return int[]
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param int[] $categories Template categories ids. Empty array if not within any category.
     *
     * @return $this
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets shared_categories
     *
     * @return int[]
     */
    public function getSharedCategories()
    {
        return $this->container['shared_categories'];
    }

    /**
     * Sets shared_categories
     *
     * @param int[] $shared_categories Template shared categories ids. Absent if not within any shared category.
     *
     * @return $this
     */
    public function setSharedCategories($shared_categories)
    {
        $this->container['shared_categories'] = $shared_categories;

        return $this;
    }

    /**
     * Gets shared_to
     *
     * @return string[]
     */
    public function getSharedTo()
    {
        return $this->container['shared_to'];
    }

    /**
     * Sets shared_to
     *
     * @param string[] $shared_to Mailboxes to which template is shared to
     *
     * @return $this
     */
    public function setSharedTo($shared_to)
    {
        $this->container['shared_to'] = $shared_to;

        return $this;
    }

    /**
     * Gets logo_image_uuid
     *
     * @return string
     */
    public function getLogoImageUuid()
    {
        return $this->container['logo_image_uuid'];
    }

    /**
     * Sets logo_image_uuid
     *
     * @param string $logo_image_uuid UUID of the template logo image
     *
     * @return $this
     */
    public function setLogoImageUuid($logo_image_uuid)
    {
        $this->container['logo_image_uuid'] = $logo_image_uuid;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Template create date
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets modified_at
     *
     * @return \DateTime
     */
    public function getModifiedAt()
    {
        return $this->container['modified_at'];
    }

    /**
     * Sets modified_at
     *
     * @param \DateTime $modified_at Template update date
     *
     * @return $this
     */
    public function setModifiedAt($modified_at)
    {
        $this->container['modified_at'] = $modified_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
