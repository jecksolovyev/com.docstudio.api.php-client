<?php
/**
 * EnvGetDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocStudio\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DocStudio Api Documentation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R110.5
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DocStudio\Client\Model;

use \ArrayAccess;
use \DocStudio\Client\ObjectSerializer;

/**
 * EnvGetDTO Class Doc Comment
 *
 * @category Class
 * @description Envelope
 * @package  DocStudio\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EnvGetDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EnvGetDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'uuid' => 'string',
        'data' => 'string',
        'created_at' => '\DateTime',
        'received_at' => '\DateTime',
        'sent_at' => '\DateTime',
        'labels' => 'string[]',
        'total' => 'int',
        'completed' => 'int',
        'chain_uuid' => 'string',
        'chained_by_me' => 'bool',
        'approval_flow_uuid' => 'string',
        'status' => 'string',
        'sender' => '\DocStudio\Client\Model\EnvelopeSenderDTO',
        'deleted' => 'bool',
        'archived' => 'bool',
        'shared' => 'bool',
        'shared_to' => '\DocStudio\Client\Model\EnvSharedToDTO[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'uuid' => 'uuid',
        'data' => null,
        'created_at' => 'date-time',
        'received_at' => 'date-time',
        'sent_at' => 'date-time',
        'labels' => 'uuid',
        'total' => 'int32',
        'completed' => 'int32',
        'chain_uuid' => 'uuid',
        'chained_by_me' => null,
        'approval_flow_uuid' => 'uuid',
        'status' => null,
        'sender' => null,
        'deleted' => null,
        'archived' => null,
        'shared' => null,
        'shared_to' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'uuid' => false,
        'data' => false,
        'created_at' => false,
        'received_at' => false,
        'sent_at' => false,
        'labels' => false,
        'total' => false,
        'completed' => false,
        'chain_uuid' => false,
        'chained_by_me' => false,
        'approval_flow_uuid' => false,
        'status' => false,
        'sender' => false,
        'deleted' => false,
        'archived' => false,
        'shared' => false,
        'shared_to' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'uuid' => 'uuid',
        'data' => 'data',
        'created_at' => 'createdAt',
        'received_at' => 'receivedAt',
        'sent_at' => 'sentAt',
        'labels' => 'labels',
        'total' => 'total',
        'completed' => 'completed',
        'chain_uuid' => 'chainUuid',
        'chained_by_me' => 'chainedByMe',
        'approval_flow_uuid' => 'approvalFlowUuid',
        'status' => 'status',
        'sender' => 'sender',
        'deleted' => 'deleted',
        'archived' => 'archived',
        'shared' => 'shared',
        'shared_to' => 'sharedTo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'uuid' => 'setUuid',
        'data' => 'setData',
        'created_at' => 'setCreatedAt',
        'received_at' => 'setReceivedAt',
        'sent_at' => 'setSentAt',
        'labels' => 'setLabels',
        'total' => 'setTotal',
        'completed' => 'setCompleted',
        'chain_uuid' => 'setChainUuid',
        'chained_by_me' => 'setChainedByMe',
        'approval_flow_uuid' => 'setApprovalFlowUuid',
        'status' => 'setStatus',
        'sender' => 'setSender',
        'deleted' => 'setDeleted',
        'archived' => 'setArchived',
        'shared' => 'setShared',
        'shared_to' => 'setSharedTo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'uuid' => 'getUuid',
        'data' => 'getData',
        'created_at' => 'getCreatedAt',
        'received_at' => 'getReceivedAt',
        'sent_at' => 'getSentAt',
        'labels' => 'getLabels',
        'total' => 'getTotal',
        'completed' => 'getCompleted',
        'chain_uuid' => 'getChainUuid',
        'chained_by_me' => 'getChainedByMe',
        'approval_flow_uuid' => 'getApprovalFlowUuid',
        'status' => 'getStatus',
        'sender' => 'getSender',
        'deleted' => 'getDeleted',
        'archived' => 'getArchived',
        'shared' => 'getShared',
        'shared_to' => 'getSharedTo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_DRAFT = 'DRAFT';
    public const STATUS_SENT = 'SENT';
    public const STATUS_WAITING = 'WAITING';
    public const STATUS_COMPLETED = 'COMPLETED';
    public const STATUS_CANCELLED = 'CANCELLED';
    public const STATUS_EXPIRED = 'EXPIRED';
    public const STATUS_ON_APPROVAL = 'ON_APPROVAL';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_DRAFT,
            self::STATUS_SENT,
            self::STATUS_WAITING,
            self::STATUS_COMPLETED,
            self::STATUS_CANCELLED,
            self::STATUS_EXPIRED,
            self::STATUS_ON_APPROVAL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('uuid', $data ?? [], null);
        $this->setIfExists('data', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('received_at', $data ?? [], null);
        $this->setIfExists('sent_at', $data ?? [], null);
        $this->setIfExists('labels', $data ?? [], null);
        $this->setIfExists('total', $data ?? [], null);
        $this->setIfExists('completed', $data ?? [], null);
        $this->setIfExists('chain_uuid', $data ?? [], null);
        $this->setIfExists('chained_by_me', $data ?? [], null);
        $this->setIfExists('approval_flow_uuid', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('sender', $data ?? [], null);
        $this->setIfExists('deleted', $data ?? [], null);
        $this->setIfExists('archived', $data ?? [], null);
        $this->setIfExists('shared', $data ?? [], null);
        $this->setIfExists('shared_to', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid UUID of envelope
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        if (is_null($uuid)) {
            throw new \InvalidArgumentException('non-nullable uuid cannot be null');
        }
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets data
     *
     * @return string|null
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string|null $data Envelope XML
     *
     * @return self
     */
    public function setData($data)
    {
        if (is_null($data)) {
            throw new \InvalidArgumentException('non-nullable data cannot be null');
        }
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at Envelope creation date
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets received_at
     *
     * @return \DateTime|null
     */
    public function getReceivedAt()
    {
        return $this->container['received_at'];
    }

    /**
     * Sets received_at
     *
     * @param \DateTime|null $received_at Date of receiving the envelope by the mailbox
     *
     * @return self
     */
    public function setReceivedAt($received_at)
    {
        if (is_null($received_at)) {
            throw new \InvalidArgumentException('non-nullable received_at cannot be null');
        }
        $this->container['received_at'] = $received_at;

        return $this;
    }

    /**
     * Gets sent_at
     *
     * @return \DateTime|null
     */
    public function getSentAt()
    {
        return $this->container['sent_at'];
    }

    /**
     * Sets sent_at
     *
     * @param \DateTime|null $sent_at Envelope sending date
     *
     * @return self
     */
    public function setSentAt($sent_at)
    {
        if (is_null($sent_at)) {
            throw new \InvalidArgumentException('non-nullable sent_at cannot be null');
        }
        $this->container['sent_at'] = $sent_at;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return string[]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param string[]|null $labels labels
     *
     * @return self
     */
    public function setLabels($labels)
    {
        if (is_null($labels)) {
            throw new \InvalidArgumentException('non-nullable labels cannot be null');
        }


        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets total
     *
     * @return int|null
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param int|null $total Total number of participants
     *
     * @return self
     */
    public function setTotal($total)
    {
        if (is_null($total)) {
            throw new \InvalidArgumentException('non-nullable total cannot be null');
        }
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets completed
     *
     * @return int|null
     */
    public function getCompleted()
    {
        return $this->container['completed'];
    }

    /**
     * Sets completed
     *
     * @param int|null $completed Number of participants who completed their processing
     *
     * @return self
     */
    public function setCompleted($completed)
    {
        if (is_null($completed)) {
            throw new \InvalidArgumentException('non-nullable completed cannot be null');
        }
        $this->container['completed'] = $completed;

        return $this;
    }

    /**
     * Gets chain_uuid
     *
     * @return string|null
     */
    public function getChainUuid()
    {
        return $this->container['chain_uuid'];
    }

    /**
     * Sets chain_uuid
     *
     * @param string|null $chain_uuid Envelope chain UUID
     *
     * @return self
     */
    public function setChainUuid($chain_uuid)
    {
        if (is_null($chain_uuid)) {
            throw new \InvalidArgumentException('non-nullable chain_uuid cannot be null');
        }
        $this->container['chain_uuid'] = $chain_uuid;

        return $this;
    }

    /**
     * Gets chained_by_me
     *
     * @return bool|null
     */
    public function getChainedByMe()
    {
        return $this->container['chained_by_me'];
    }

    /**
     * Sets chained_by_me
     *
     * @param bool|null $chained_by_me Envelope chained by requested user
     *
     * @return self
     */
    public function setChainedByMe($chained_by_me)
    {
        if (is_null($chained_by_me)) {
            throw new \InvalidArgumentException('non-nullable chained_by_me cannot be null');
        }
        $this->container['chained_by_me'] = $chained_by_me;

        return $this;
    }

    /**
     * Gets approval_flow_uuid
     *
     * @return string|null
     */
    public function getApprovalFlowUuid()
    {
        return $this->container['approval_flow_uuid'];
    }

    /**
     * Sets approval_flow_uuid
     *
     * @param string|null $approval_flow_uuid Approval flow UUID
     *
     * @return self
     */
    public function setApprovalFlowUuid($approval_flow_uuid)
    {
        if (is_null($approval_flow_uuid)) {
            throw new \InvalidArgumentException('non-nullable approval_flow_uuid cannot be null');
        }
        $this->container['approval_flow_uuid'] = $approval_flow_uuid;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Calculated status for mailbox
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return \DocStudio\Client\Model\EnvelopeSenderDTO|null
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param \DocStudio\Client\Model\EnvelopeSenderDTO|null $sender sender
     *
     * @return self
     */
    public function setSender($sender)
    {
        if (is_null($sender)) {
            throw new \InvalidArgumentException('non-nullable sender cannot be null');
        }
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool|null
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool|null $deleted Is envelope in recycle bin?
     *
     * @return self
     */
    public function setDeleted($deleted)
    {
        if (is_null($deleted)) {
            throw new \InvalidArgumentException('non-nullable deleted cannot be null');
        }
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool|null
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool|null $archived Is envelope archived?
     *
     * @return self
     */
    public function setArchived($archived)
    {
        if (is_null($archived)) {
            throw new \InvalidArgumentException('non-nullable archived cannot be null');
        }
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets shared
     *
     * @return bool|null
     */
    public function getShared()
    {
        return $this->container['shared'];
    }

    /**
     * Sets shared
     *
     * @param bool|null $shared Is envelope shared to the mailbox? (if the mailbox is not in the main flow)
     *
     * @return self
     */
    public function setShared($shared)
    {
        if (is_null($shared)) {
            throw new \InvalidArgumentException('non-nullable shared cannot be null');
        }
        $this->container['shared'] = $shared;

        return $this;
    }

    /**
     * Gets shared_to
     *
     * @return \DocStudio\Client\Model\EnvSharedToDTO[]|null
     */
    public function getSharedTo()
    {
        return $this->container['shared_to'];
    }

    /**
     * Sets shared_to
     *
     * @param \DocStudio\Client\Model\EnvSharedToDTO[]|null $shared_to Mailboxes the envelope shared with
     *
     * @return self
     */
    public function setSharedTo($shared_to)
    {
        if (is_null($shared_to)) {
            throw new \InvalidArgumentException('non-nullable shared_to cannot be null');
        }
        $this->container['shared_to'] = $shared_to;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


