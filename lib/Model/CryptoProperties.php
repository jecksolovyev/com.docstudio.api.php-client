<?php
/**
 * CryptoProperties
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocStudio\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DocStudio Api Documentation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R125.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DocStudio\Client\Model;

use \ArrayAccess;
use \DocStudio\Client\ObjectSerializer;

/**
 * CryptoProperties Class Doc Comment
 *
 * @category Class
 * @description Signature Providers and Region
 * @package  DocStudio\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CryptoProperties implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CryptoProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'region' => 'string',
        'signature_providers' => 'string[]',
        'signature_container' => 'string',
        'account_document_sharing_providers' => 'string[]',
        'stamp_supported' => 'bool',
        'eink_supported' => 'bool',
        'initials_supported' => 'bool',
        'eds_supported' => 'bool',
        'pades_supported' => 'bool',
        'ocsp_proxy' => 'string',
        'always_use_ocsp_proxy' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'region' => null,
        'signature_providers' => null,
        'signature_container' => null,
        'account_document_sharing_providers' => null,
        'stamp_supported' => null,
        'eink_supported' => null,
        'initials_supported' => null,
        'eds_supported' => null,
        'pades_supported' => null,
        'ocsp_proxy' => null,
        'always_use_ocsp_proxy' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'region' => false,
        'signature_providers' => false,
        'signature_container' => false,
        'account_document_sharing_providers' => false,
        'stamp_supported' => false,
        'eink_supported' => false,
        'initials_supported' => false,
        'eds_supported' => false,
        'pades_supported' => false,
        'ocsp_proxy' => false,
        'always_use_ocsp_proxy' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'region' => 'region',
        'signature_providers' => 'signatureProviders',
        'signature_container' => 'signatureContainer',
        'account_document_sharing_providers' => 'accountDocumentSharingProviders',
        'stamp_supported' => 'stampSupported',
        'eink_supported' => 'einkSupported',
        'initials_supported' => 'initialsSupported',
        'eds_supported' => 'edsSupported',
        'pades_supported' => 'padesSupported',
        'ocsp_proxy' => 'ocspProxy',
        'always_use_ocsp_proxy' => 'alwaysUseOcspProxy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'region' => 'setRegion',
        'signature_providers' => 'setSignatureProviders',
        'signature_container' => 'setSignatureContainer',
        'account_document_sharing_providers' => 'setAccountDocumentSharingProviders',
        'stamp_supported' => 'setStampSupported',
        'eink_supported' => 'setEinkSupported',
        'initials_supported' => 'setInitialsSupported',
        'eds_supported' => 'setEdsSupported',
        'pades_supported' => 'setPadesSupported',
        'ocsp_proxy' => 'setOcspProxy',
        'always_use_ocsp_proxy' => 'setAlwaysUseOcspProxy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'region' => 'getRegion',
        'signature_providers' => 'getSignatureProviders',
        'signature_container' => 'getSignatureContainer',
        'account_document_sharing_providers' => 'getAccountDocumentSharingProviders',
        'stamp_supported' => 'getStampSupported',
        'eink_supported' => 'getEinkSupported',
        'initials_supported' => 'getInitialsSupported',
        'eds_supported' => 'getEdsSupported',
        'pades_supported' => 'getPadesSupported',
        'ocsp_proxy' => 'getOcspProxy',
        'always_use_ocsp_proxy' => 'getAlwaysUseOcspProxy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SIGNATURE_CONTAINER_P7_S = 'P7S';
    public const SIGNATURE_CONTAINER_ASICE = 'ASICE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSignatureContainerAllowableValues()
    {
        return [
            self::SIGNATURE_CONTAINER_P7_S,
            self::SIGNATURE_CONTAINER_ASICE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('region', $data ?? [], null);
        $this->setIfExists('signature_providers', $data ?? [], null);
        $this->setIfExists('signature_container', $data ?? [], null);
        $this->setIfExists('account_document_sharing_providers', $data ?? [], null);
        $this->setIfExists('stamp_supported', $data ?? [], null);
        $this->setIfExists('eink_supported', $data ?? [], null);
        $this->setIfExists('initials_supported', $data ?? [], null);
        $this->setIfExists('eds_supported', $data ?? [], null);
        $this->setIfExists('pades_supported', $data ?? [], null);
        $this->setIfExists('ocsp_proxy', $data ?? [], null);
        $this->setIfExists('always_use_ocsp_proxy', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSignatureContainerAllowableValues();
        if (!is_null($this->container['signature_container']) && !in_array($this->container['signature_container'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'signature_container', must be one of '%s'",
                $this->container['signature_container'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets region
     *
     * @return string|null
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string|null $region region
     *
     * @return self
     */
    public function setRegion($region)
    {
        if (is_null($region)) {
            throw new \InvalidArgumentException('non-nullable region cannot be null');
        }
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets signature_providers
     *
     * @return string[]|null
     */
    public function getSignatureProviders()
    {
        return $this->container['signature_providers'];
    }

    /**
     * Sets signature_providers
     *
     * @param string[]|null $signature_providers signature_providers
     *
     * @return self
     */
    public function setSignatureProviders($signature_providers)
    {
        if (is_null($signature_providers)) {
            throw new \InvalidArgumentException('non-nullable signature_providers cannot be null');
        }
        $this->container['signature_providers'] = $signature_providers;

        return $this;
    }

    /**
     * Gets signature_container
     *
     * @return string|null
     */
    public function getSignatureContainer()
    {
        return $this->container['signature_container'];
    }

    /**
     * Sets signature_container
     *
     * @param string|null $signature_container signature_container
     *
     * @return self
     */
    public function setSignatureContainer($signature_container)
    {
        if (is_null($signature_container)) {
            throw new \InvalidArgumentException('non-nullable signature_container cannot be null');
        }
        $allowedValues = $this->getSignatureContainerAllowableValues();
        if (!in_array($signature_container, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'signature_container', must be one of '%s'",
                    $signature_container,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['signature_container'] = $signature_container;

        return $this;
    }

    /**
     * Gets account_document_sharing_providers
     *
     * @return string[]|null
     */
    public function getAccountDocumentSharingProviders()
    {
        return $this->container['account_document_sharing_providers'];
    }

    /**
     * Sets account_document_sharing_providers
     *
     * @param string[]|null $account_document_sharing_providers account_document_sharing_providers
     *
     * @return self
     */
    public function setAccountDocumentSharingProviders($account_document_sharing_providers)
    {
        if (is_null($account_document_sharing_providers)) {
            throw new \InvalidArgumentException('non-nullable account_document_sharing_providers cannot be null');
        }
        $this->container['account_document_sharing_providers'] = $account_document_sharing_providers;

        return $this;
    }

    /**
     * Gets stamp_supported
     *
     * @return bool|null
     */
    public function getStampSupported()
    {
        return $this->container['stamp_supported'];
    }

    /**
     * Sets stamp_supported
     *
     * @param bool|null $stamp_supported stamp_supported
     *
     * @return self
     */
    public function setStampSupported($stamp_supported)
    {
        if (is_null($stamp_supported)) {
            throw new \InvalidArgumentException('non-nullable stamp_supported cannot be null');
        }
        $this->container['stamp_supported'] = $stamp_supported;

        return $this;
    }

    /**
     * Gets eink_supported
     *
     * @return bool|null
     */
    public function getEinkSupported()
    {
        return $this->container['eink_supported'];
    }

    /**
     * Sets eink_supported
     *
     * @param bool|null $eink_supported eink_supported
     *
     * @return self
     */
    public function setEinkSupported($eink_supported)
    {
        if (is_null($eink_supported)) {
            throw new \InvalidArgumentException('non-nullable eink_supported cannot be null');
        }
        $this->container['eink_supported'] = $eink_supported;

        return $this;
    }

    /**
     * Gets initials_supported
     *
     * @return bool|null
     */
    public function getInitialsSupported()
    {
        return $this->container['initials_supported'];
    }

    /**
     * Sets initials_supported
     *
     * @param bool|null $initials_supported initials_supported
     *
     * @return self
     */
    public function setInitialsSupported($initials_supported)
    {
        if (is_null($initials_supported)) {
            throw new \InvalidArgumentException('non-nullable initials_supported cannot be null');
        }
        $this->container['initials_supported'] = $initials_supported;

        return $this;
    }

    /**
     * Gets eds_supported
     *
     * @return bool|null
     */
    public function getEdsSupported()
    {
        return $this->container['eds_supported'];
    }

    /**
     * Sets eds_supported
     *
     * @param bool|null $eds_supported eds_supported
     *
     * @return self
     */
    public function setEdsSupported($eds_supported)
    {
        if (is_null($eds_supported)) {
            throw new \InvalidArgumentException('non-nullable eds_supported cannot be null');
        }
        $this->container['eds_supported'] = $eds_supported;

        return $this;
    }

    /**
     * Gets pades_supported
     *
     * @return bool|null
     */
    public function getPadesSupported()
    {
        return $this->container['pades_supported'];
    }

    /**
     * Sets pades_supported
     *
     * @param bool|null $pades_supported pades_supported
     *
     * @return self
     */
    public function setPadesSupported($pades_supported)
    {
        if (is_null($pades_supported)) {
            throw new \InvalidArgumentException('non-nullable pades_supported cannot be null');
        }
        $this->container['pades_supported'] = $pades_supported;

        return $this;
    }

    /**
     * Gets ocsp_proxy
     *
     * @return string|null
     */
    public function getOcspProxy()
    {
        return $this->container['ocsp_proxy'];
    }

    /**
     * Sets ocsp_proxy
     *
     * @param string|null $ocsp_proxy ocsp_proxy
     *
     * @return self
     */
    public function setOcspProxy($ocsp_proxy)
    {
        if (is_null($ocsp_proxy)) {
            throw new \InvalidArgumentException('non-nullable ocsp_proxy cannot be null');
        }
        $this->container['ocsp_proxy'] = $ocsp_proxy;

        return $this;
    }

    /**
     * Gets always_use_ocsp_proxy
     *
     * @return bool|null
     */
    public function getAlwaysUseOcspProxy()
    {
        return $this->container['always_use_ocsp_proxy'];
    }

    /**
     * Sets always_use_ocsp_proxy
     *
     * @param bool|null $always_use_ocsp_proxy always_use_ocsp_proxy
     *
     * @return self
     */
    public function setAlwaysUseOcspProxy($always_use_ocsp_proxy)
    {
        if (is_null($always_use_ocsp_proxy)) {
            throw new \InvalidArgumentException('non-nullable always_use_ocsp_proxy cannot be null');
        }
        $this->container['always_use_ocsp_proxy'] = $always_use_ocsp_proxy;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


