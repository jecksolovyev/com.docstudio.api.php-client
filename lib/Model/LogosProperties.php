<?php
/**
 * LogosProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  Docstudio\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocStudio Api Documentation
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R74.25
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Docstudio\Client\Model;

use \ArrayAccess;
use \Docstudio\ClientObjectSerializer;

/**
 * LogosProperties Class Doc Comment
 *
 * @category Class
 * @description Logos properties
 * @package  Docstudio\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LogosProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LogosProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'logo_circle_svg' => 'string',
'mime_types' => 'string[]',
'logo_max_px' => 'int',
'logo_min_px' => 'int',
'logo_max_bytes' => 'int',
'logo_cache_hours' => 'int',
'default_brand_svg' => 'string',
'logo_with_name_svg' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'logo_circle_svg' => null,
'mime_types' => null,
'logo_max_px' => 'int32',
'logo_min_px' => 'int32',
'logo_max_bytes' => 'int32',
'logo_cache_hours' => 'int32',
'default_brand_svg' => null,
'logo_with_name_svg' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'logo_circle_svg' => 'logoCircleSvg',
'mime_types' => 'mimeTypes',
'logo_max_px' => 'logoMaxPx',
'logo_min_px' => 'logoMinPx',
'logo_max_bytes' => 'logoMaxBytes',
'logo_cache_hours' => 'logoCacheHours',
'default_brand_svg' => 'defaultBrandSvg',
'logo_with_name_svg' => 'logoWithNameSvg'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'logo_circle_svg' => 'setLogoCircleSvg',
'mime_types' => 'setMimeTypes',
'logo_max_px' => 'setLogoMaxPx',
'logo_min_px' => 'setLogoMinPx',
'logo_max_bytes' => 'setLogoMaxBytes',
'logo_cache_hours' => 'setLogoCacheHours',
'default_brand_svg' => 'setDefaultBrandSvg',
'logo_with_name_svg' => 'setLogoWithNameSvg'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'logo_circle_svg' => 'getLogoCircleSvg',
'mime_types' => 'getMimeTypes',
'logo_max_px' => 'getLogoMaxPx',
'logo_min_px' => 'getLogoMinPx',
'logo_max_bytes' => 'getLogoMaxBytes',
'logo_cache_hours' => 'getLogoCacheHours',
'default_brand_svg' => 'getDefaultBrandSvg',
'logo_with_name_svg' => 'getLogoWithNameSvg'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['logo_circle_svg'] = isset($data['logo_circle_svg']) ? $data['logo_circle_svg'] : null;
        $this->container['mime_types'] = isset($data['mime_types']) ? $data['mime_types'] : null;
        $this->container['logo_max_px'] = isset($data['logo_max_px']) ? $data['logo_max_px'] : null;
        $this->container['logo_min_px'] = isset($data['logo_min_px']) ? $data['logo_min_px'] : null;
        $this->container['logo_max_bytes'] = isset($data['logo_max_bytes']) ? $data['logo_max_bytes'] : null;
        $this->container['logo_cache_hours'] = isset($data['logo_cache_hours']) ? $data['logo_cache_hours'] : null;
        $this->container['default_brand_svg'] = isset($data['default_brand_svg']) ? $data['default_brand_svg'] : null;
        $this->container['logo_with_name_svg'] = isset($data['logo_with_name_svg']) ? $data['logo_with_name_svg'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets logo_circle_svg
     *
     * @return string
     */
    public function getLogoCircleSvg()
    {
        return $this->container['logo_circle_svg'];
    }

    /**
     * Sets logo_circle_svg
     *
     * @param string $logo_circle_svg logo_circle_svg
     *
     * @return $this
     */
    public function setLogoCircleSvg($logo_circle_svg)
    {
        $this->container['logo_circle_svg'] = $logo_circle_svg;

        return $this;
    }

    /**
     * Gets mime_types
     *
     * @return string[]
     */
    public function getMimeTypes()
    {
        return $this->container['mime_types'];
    }

    /**
     * Sets mime_types
     *
     * @param string[] $mime_types mime_types
     *
     * @return $this
     */
    public function setMimeTypes($mime_types)
    {
        $this->container['mime_types'] = $mime_types;

        return $this;
    }

    /**
     * Gets logo_max_px
     *
     * @return int
     */
    public function getLogoMaxPx()
    {
        return $this->container['logo_max_px'];
    }

    /**
     * Sets logo_max_px
     *
     * @param int $logo_max_px logo_max_px
     *
     * @return $this
     */
    public function setLogoMaxPx($logo_max_px)
    {
        $this->container['logo_max_px'] = $logo_max_px;

        return $this;
    }

    /**
     * Gets logo_min_px
     *
     * @return int
     */
    public function getLogoMinPx()
    {
        return $this->container['logo_min_px'];
    }

    /**
     * Sets logo_min_px
     *
     * @param int $logo_min_px logo_min_px
     *
     * @return $this
     */
    public function setLogoMinPx($logo_min_px)
    {
        $this->container['logo_min_px'] = $logo_min_px;

        return $this;
    }

    /**
     * Gets logo_max_bytes
     *
     * @return int
     */
    public function getLogoMaxBytes()
    {
        return $this->container['logo_max_bytes'];
    }

    /**
     * Sets logo_max_bytes
     *
     * @param int $logo_max_bytes logo_max_bytes
     *
     * @return $this
     */
    public function setLogoMaxBytes($logo_max_bytes)
    {
        $this->container['logo_max_bytes'] = $logo_max_bytes;

        return $this;
    }

    /**
     * Gets logo_cache_hours
     *
     * @return int
     */
    public function getLogoCacheHours()
    {
        return $this->container['logo_cache_hours'];
    }

    /**
     * Sets logo_cache_hours
     *
     * @param int $logo_cache_hours logo_cache_hours
     *
     * @return $this
     */
    public function setLogoCacheHours($logo_cache_hours)
    {
        $this->container['logo_cache_hours'] = $logo_cache_hours;

        return $this;
    }

    /**
     * Gets default_brand_svg
     *
     * @return string
     */
    public function getDefaultBrandSvg()
    {
        return $this->container['default_brand_svg'];
    }

    /**
     * Sets default_brand_svg
     *
     * @param string $default_brand_svg default_brand_svg
     *
     * @return $this
     */
    public function setDefaultBrandSvg($default_brand_svg)
    {
        $this->container['default_brand_svg'] = $default_brand_svg;

        return $this;
    }

    /**
     * Gets logo_with_name_svg
     *
     * @return string
     */
    public function getLogoWithNameSvg()
    {
        return $this->container['logo_with_name_svg'];
    }

    /**
     * Sets logo_with_name_svg
     *
     * @param string $logo_with_name_svg logo_with_name_svg
     *
     * @return $this
     */
    public function setLogoWithNameSvg($logo_with_name_svg)
    {
        $this->container['logo_with_name_svg'] = $logo_with_name_svg;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
