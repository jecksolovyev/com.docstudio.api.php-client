<?php
/**
 * AuditTrailDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocStudio\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DocStudio Api Documentation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R110.5
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DocStudio\Client\Model;

use \ArrayAccess;
use \DocStudio\Client\ObjectSerializer;

/**
 * AuditTrailDTO Class Doc Comment
 *
 * @category Class
 * @package  DocStudio\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuditTrailDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuditTrailDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'envelope_uuid' => 'string',
        'date_time' => '\DateTime',
        'user_uuid' => 'string',
        'mailbox_uuid' => 'string',
        'mailbox_name' => 'string',
        'user_first_and_last_name' => 'string',
        'operation' => 'string',
        'ip' => 'string',
        'browser' => 'string',
        'os' => 'string',
        'geolocation' => '\DocStudio\Client\Model\GeolocationInfoDTO',
        'description' => 'string',
        'latitude' => 'float',
        'longitude' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'envelope_uuid' => 'uuid',
        'date_time' => 'date-time',
        'user_uuid' => 'uuid',
        'mailbox_uuid' => 'uuid',
        'mailbox_name' => null,
        'user_first_and_last_name' => null,
        'operation' => null,
        'ip' => null,
        'browser' => null,
        'os' => null,
        'geolocation' => null,
        'description' => null,
        'latitude' => 'float',
        'longitude' => 'float'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'envelope_uuid' => false,
        'date_time' => false,
        'user_uuid' => false,
        'mailbox_uuid' => false,
        'mailbox_name' => false,
        'user_first_and_last_name' => false,
        'operation' => false,
        'ip' => false,
        'browser' => false,
        'os' => false,
        'geolocation' => false,
        'description' => false,
        'latitude' => false,
        'longitude' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'envelope_uuid' => 'envelopeUuid',
        'date_time' => 'dateTime',
        'user_uuid' => 'userUuid',
        'mailbox_uuid' => 'mailboxUuid',
        'mailbox_name' => 'mailboxName',
        'user_first_and_last_name' => 'userFirstAndLastName',
        'operation' => 'operation',
        'ip' => 'ip',
        'browser' => 'browser',
        'os' => 'os',
        'geolocation' => 'geolocation',
        'description' => 'description',
        'latitude' => 'latitude',
        'longitude' => 'longitude'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'envelope_uuid' => 'setEnvelopeUuid',
        'date_time' => 'setDateTime',
        'user_uuid' => 'setUserUuid',
        'mailbox_uuid' => 'setMailboxUuid',
        'mailbox_name' => 'setMailboxName',
        'user_first_and_last_name' => 'setUserFirstAndLastName',
        'operation' => 'setOperation',
        'ip' => 'setIp',
        'browser' => 'setBrowser',
        'os' => 'setOs',
        'geolocation' => 'setGeolocation',
        'description' => 'setDescription',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'envelope_uuid' => 'getEnvelopeUuid',
        'date_time' => 'getDateTime',
        'user_uuid' => 'getUserUuid',
        'mailbox_uuid' => 'getMailboxUuid',
        'mailbox_name' => 'getMailboxName',
        'user_first_and_last_name' => 'getUserFirstAndLastName',
        'operation' => 'getOperation',
        'ip' => 'getIp',
        'browser' => 'getBrowser',
        'os' => 'getOs',
        'geolocation' => 'getGeolocation',
        'description' => 'getDescription',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const OPERATION_CREATE_DRAFT_ENV = 'CREATE_DRAFT_ENV';
    public const OPERATION_DRAFT_UPDATE = 'DRAFT_UPDATE';
    public const OPERATION_SEND_ENVELOPE = 'SEND_ENVELOPE';
    public const OPERATION_RECEIVE_ENVELOPE = 'RECEIVE_ENVELOPE';
    public const OPERATION_VIEW_ENVELOPE = 'VIEW_ENVELOPE';
    public const OPERATION_FILL_FIELDS = 'FILL_FIELDS';
    public const OPERATION_APPROVED = 'APPROVED';
    public const OPERATION_CANCEL = 'CANCEL';
    public const OPERATION_COMPLETED = 'COMPLETED';
    public const OPERATION_ARCHIVE = 'ARCHIVE';
    public const OPERATION_UNARCHIVE = 'UNARCHIVE';
    public const OPERATION_INVITATION_ACCEPT = 'INVITATION_ACCEPT';
    public const OPERATION_SIGN_DOCUMENTS = 'SIGN_DOCUMENTS';
    public const OPERATION_ENVELOPE_UPDATE = 'ENVELOPE_UPDATE';
    public const OPERATION_ENVELOPE_DELEGATE = 'ENVELOPE_DELEGATE';
    public const OPERATION_DOC_STAMP = 'DOC_STAMP';
    public const OPERATION_DELETE = 'DELETE';
    public const OPERATION_RESTORE = 'RESTORE';
    public const OPERATION_INFO = 'INFO';
    public const OPERATION_ARCHIVE_SHARE = 'ARCHIVE_SHARE';
    public const OPERATION_ARCHIVE_DOWNLOAD = 'ARCHIVE_DOWNLOAD';
    public const OPERATION_COPY_SHARED = 'COPY_SHARED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOperationAllowableValues()
    {
        return [
            self::OPERATION_CREATE_DRAFT_ENV,
            self::OPERATION_DRAFT_UPDATE,
            self::OPERATION_SEND_ENVELOPE,
            self::OPERATION_RECEIVE_ENVELOPE,
            self::OPERATION_VIEW_ENVELOPE,
            self::OPERATION_FILL_FIELDS,
            self::OPERATION_APPROVED,
            self::OPERATION_CANCEL,
            self::OPERATION_COMPLETED,
            self::OPERATION_ARCHIVE,
            self::OPERATION_UNARCHIVE,
            self::OPERATION_INVITATION_ACCEPT,
            self::OPERATION_SIGN_DOCUMENTS,
            self::OPERATION_ENVELOPE_UPDATE,
            self::OPERATION_ENVELOPE_DELEGATE,
            self::OPERATION_DOC_STAMP,
            self::OPERATION_DELETE,
            self::OPERATION_RESTORE,
            self::OPERATION_INFO,
            self::OPERATION_ARCHIVE_SHARE,
            self::OPERATION_ARCHIVE_DOWNLOAD,
            self::OPERATION_COPY_SHARED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('envelope_uuid', $data ?? [], null);
        $this->setIfExists('date_time', $data ?? [], null);
        $this->setIfExists('user_uuid', $data ?? [], null);
        $this->setIfExists('mailbox_uuid', $data ?? [], null);
        $this->setIfExists('mailbox_name', $data ?? [], null);
        $this->setIfExists('user_first_and_last_name', $data ?? [], null);
        $this->setIfExists('operation', $data ?? [], null);
        $this->setIfExists('ip', $data ?? [], null);
        $this->setIfExists('browser', $data ?? [], null);
        $this->setIfExists('os', $data ?? [], null);
        $this->setIfExists('geolocation', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('latitude', $data ?? [], null);
        $this->setIfExists('longitude', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOperationAllowableValues();
        if (!is_null($this->container['operation']) && !in_array($this->container['operation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'operation', must be one of '%s'",
                $this->container['operation'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets envelope_uuid
     *
     * @return string|null
     */
    public function getEnvelopeUuid()
    {
        return $this->container['envelope_uuid'];
    }

    /**
     * Sets envelope_uuid
     *
     * @param string|null $envelope_uuid envelope_uuid
     *
     * @return self
     */
    public function setEnvelopeUuid($envelope_uuid)
    {
        if (is_null($envelope_uuid)) {
            throw new \InvalidArgumentException('non-nullable envelope_uuid cannot be null');
        }
        $this->container['envelope_uuid'] = $envelope_uuid;

        return $this;
    }

    /**
     * Gets date_time
     *
     * @return \DateTime|null
     */
    public function getDateTime()
    {
        return $this->container['date_time'];
    }

    /**
     * Sets date_time
     *
     * @param \DateTime|null $date_time date_time
     *
     * @return self
     */
    public function setDateTime($date_time)
    {
        if (is_null($date_time)) {
            throw new \InvalidArgumentException('non-nullable date_time cannot be null');
        }
        $this->container['date_time'] = $date_time;

        return $this;
    }

    /**
     * Gets user_uuid
     *
     * @return string|null
     */
    public function getUserUuid()
    {
        return $this->container['user_uuid'];
    }

    /**
     * Sets user_uuid
     *
     * @param string|null $user_uuid user_uuid
     *
     * @return self
     */
    public function setUserUuid($user_uuid)
    {
        if (is_null($user_uuid)) {
            throw new \InvalidArgumentException('non-nullable user_uuid cannot be null');
        }
        $this->container['user_uuid'] = $user_uuid;

        return $this;
    }

    /**
     * Gets mailbox_uuid
     *
     * @return string|null
     */
    public function getMailboxUuid()
    {
        return $this->container['mailbox_uuid'];
    }

    /**
     * Sets mailbox_uuid
     *
     * @param string|null $mailbox_uuid mailbox_uuid
     *
     * @return self
     */
    public function setMailboxUuid($mailbox_uuid)
    {
        if (is_null($mailbox_uuid)) {
            throw new \InvalidArgumentException('non-nullable mailbox_uuid cannot be null');
        }
        $this->container['mailbox_uuid'] = $mailbox_uuid;

        return $this;
    }

    /**
     * Gets mailbox_name
     *
     * @return string|null
     */
    public function getMailboxName()
    {
        return $this->container['mailbox_name'];
    }

    /**
     * Sets mailbox_name
     *
     * @param string|null $mailbox_name mailbox_name
     *
     * @return self
     */
    public function setMailboxName($mailbox_name)
    {
        if (is_null($mailbox_name)) {
            throw new \InvalidArgumentException('non-nullable mailbox_name cannot be null');
        }
        $this->container['mailbox_name'] = $mailbox_name;

        return $this;
    }

    /**
     * Gets user_first_and_last_name
     *
     * @return string|null
     */
    public function getUserFirstAndLastName()
    {
        return $this->container['user_first_and_last_name'];
    }

    /**
     * Sets user_first_and_last_name
     *
     * @param string|null $user_first_and_last_name user_first_and_last_name
     *
     * @return self
     */
    public function setUserFirstAndLastName($user_first_and_last_name)
    {
        if (is_null($user_first_and_last_name)) {
            throw new \InvalidArgumentException('non-nullable user_first_and_last_name cannot be null');
        }
        $this->container['user_first_and_last_name'] = $user_first_and_last_name;

        return $this;
    }

    /**
     * Gets operation
     *
     * @return string|null
     */
    public function getOperation()
    {
        return $this->container['operation'];
    }

    /**
     * Sets operation
     *
     * @param string|null $operation operation
     *
     * @return self
     */
    public function setOperation($operation)
    {
        if (is_null($operation)) {
            throw new \InvalidArgumentException('non-nullable operation cannot be null');
        }
        $allowedValues = $this->getOperationAllowableValues();
        if (!in_array($operation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'operation', must be one of '%s'",
                    $operation,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['operation'] = $operation;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string|null
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string|null $ip ip
     *
     * @return self
     */
    public function setIp($ip)
    {
        if (is_null($ip)) {
            throw new \InvalidArgumentException('non-nullable ip cannot be null');
        }
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets browser
     *
     * @return string|null
     */
    public function getBrowser()
    {
        return $this->container['browser'];
    }

    /**
     * Sets browser
     *
     * @param string|null $browser browser
     *
     * @return self
     */
    public function setBrowser($browser)
    {
        if (is_null($browser)) {
            throw new \InvalidArgumentException('non-nullable browser cannot be null');
        }
        $this->container['browser'] = $browser;

        return $this;
    }

    /**
     * Gets os
     *
     * @return string|null
     */
    public function getOs()
    {
        return $this->container['os'];
    }

    /**
     * Sets os
     *
     * @param string|null $os os
     *
     * @return self
     */
    public function setOs($os)
    {
        if (is_null($os)) {
            throw new \InvalidArgumentException('non-nullable os cannot be null');
        }
        $this->container['os'] = $os;

        return $this;
    }

    /**
     * Gets geolocation
     *
     * @return \DocStudio\Client\Model\GeolocationInfoDTO|null
     */
    public function getGeolocation()
    {
        return $this->container['geolocation'];
    }

    /**
     * Sets geolocation
     *
     * @param \DocStudio\Client\Model\GeolocationInfoDTO|null $geolocation geolocation
     *
     * @return self
     */
    public function setGeolocation($geolocation)
    {
        if (is_null($geolocation)) {
            throw new \InvalidArgumentException('non-nullable geolocation cannot be null');
        }
        $this->container['geolocation'] = $geolocation;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return float|null
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param float|null $latitude latitude
     *
     * @return self
     */
    public function setLatitude($latitude)
    {
        if (is_null($latitude)) {
            throw new \InvalidArgumentException('non-nullable latitude cannot be null');
        }
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return float|null
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param float|null $longitude longitude
     *
     * @return self
     */
    public function setLongitude($longitude)
    {
        if (is_null($longitude)) {
            throw new \InvalidArgumentException('non-nullable longitude cannot be null');
        }
        $this->container['longitude'] = $longitude;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


