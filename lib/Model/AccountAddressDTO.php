<?php
/**
 * AccountAddressDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocStudio\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DocStudio Api Documentation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R125.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DocStudio\Client\Model;

use \ArrayAccess;
use \DocStudio\Client\ObjectSerializer;

/**
 * AccountAddressDTO Class Doc Comment
 *
 * @category Class
 * @description Account billing address
 * @package  DocStudio\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AccountAddressDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AccountAddressDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'country' => 'string',
        'region' => 'string',
        'country_en' => 'string',
        'region_en' => 'string',
        'street' => 'string',
        'street2' => 'string',
        'city' => 'string',
        'zip' => 'string',
        'formatted_address' => 'string',
        'country_iso' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'country' => null,
        'region' => null,
        'country_en' => null,
        'region_en' => null,
        'street' => null,
        'street2' => null,
        'city' => null,
        'zip' => null,
        'formatted_address' => null,
        'country_iso' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'country' => false,
        'region' => false,
        'country_en' => false,
        'region_en' => false,
        'street' => false,
        'street2' => false,
        'city' => false,
        'zip' => false,
        'formatted_address' => false,
        'country_iso' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'country' => 'country',
        'region' => 'region',
        'country_en' => 'countryEn',
        'region_en' => 'regionEn',
        'street' => 'street',
        'street2' => 'street2',
        'city' => 'city',
        'zip' => 'zip',
        'formatted_address' => 'formattedAddress',
        'country_iso' => 'countryISO'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'country' => 'setCountry',
        'region' => 'setRegion',
        'country_en' => 'setCountryEn',
        'region_en' => 'setRegionEn',
        'street' => 'setStreet',
        'street2' => 'setStreet2',
        'city' => 'setCity',
        'zip' => 'setZip',
        'formatted_address' => 'setFormattedAddress',
        'country_iso' => 'setCountryIso'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'country' => 'getCountry',
        'region' => 'getRegion',
        'country_en' => 'getCountryEn',
        'region_en' => 'getRegionEn',
        'street' => 'getStreet',
        'street2' => 'getStreet2',
        'city' => 'getCity',
        'zip' => 'getZip',
        'formatted_address' => 'getFormattedAddress',
        'country_iso' => 'getCountryIso'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('region', $data ?? [], null);
        $this->setIfExists('country_en', $data ?? [], null);
        $this->setIfExists('region_en', $data ?? [], null);
        $this->setIfExists('street', $data ?? [], null);
        $this->setIfExists('street2', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('zip', $data ?? [], null);
        $this->setIfExists('formatted_address', $data ?? [], null);
        $this->setIfExists('country_iso', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        if ((mb_strlen($this->container['country']) > 100)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be smaller than or equal to 100.";
        }

        if ((mb_strlen($this->container['country']) < 1)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['region'] === null) {
            $invalidProperties[] = "'region' can't be null";
        }
        if ((mb_strlen($this->container['region']) > 200)) {
            $invalidProperties[] = "invalid value for 'region', the character length must be smaller than or equal to 200.";
        }

        if ((mb_strlen($this->container['region']) < 1)) {
            $invalidProperties[] = "invalid value for 'region', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['country_en'] === null) {
            $invalidProperties[] = "'country_en' can't be null";
        }
        if ((mb_strlen($this->container['country_en']) > 100)) {
            $invalidProperties[] = "invalid value for 'country_en', the character length must be smaller than or equal to 100.";
        }

        if ((mb_strlen($this->container['country_en']) < 1)) {
            $invalidProperties[] = "invalid value for 'country_en', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['region_en'] === null) {
            $invalidProperties[] = "'region_en' can't be null";
        }
        if ((mb_strlen($this->container['region_en']) > 200)) {
            $invalidProperties[] = "invalid value for 'region_en', the character length must be smaller than or equal to 200.";
        }

        if ((mb_strlen($this->container['region_en']) < 1)) {
            $invalidProperties[] = "invalid value for 'region_en', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['street'] === null) {
            $invalidProperties[] = "'street' can't be null";
        }
        if ((mb_strlen($this->container['street']) > 200)) {
            $invalidProperties[] = "invalid value for 'street', the character length must be smaller than or equal to 200.";
        }

        if ((mb_strlen($this->container['street']) < 1)) {
            $invalidProperties[] = "invalid value for 'street', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['street2']) && (mb_strlen($this->container['street2']) > 200)) {
            $invalidProperties[] = "invalid value for 'street2', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['street2']) && (mb_strlen($this->container['street2']) < 0)) {
            $invalidProperties[] = "invalid value for 'street2', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ((mb_strlen($this->container['city']) > 200)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 200.";
        }

        if ((mb_strlen($this->container['city']) < 1)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['zip'] === null) {
            $invalidProperties[] = "'zip' can't be null";
        }
        if ((mb_strlen($this->container['zip']) > 10)) {
            $invalidProperties[] = "invalid value for 'zip', the character length must be smaller than or equal to 10.";
        }

        if ((mb_strlen($this->container['zip']) < 1)) {
            $invalidProperties[] = "invalid value for 'zip', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['formatted_address'] === null) {
            $invalidProperties[] = "'formatted_address' can't be null";
        }
        if ((mb_strlen($this->container['formatted_address']) > 300)) {
            $invalidProperties[] = "invalid value for 'formatted_address', the character length must be smaller than or equal to 300.";
        }

        if ((mb_strlen($this->container['formatted_address']) < 1)) {
            $invalidProperties[] = "invalid value for 'formatted_address', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country Country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        if ((mb_strlen($country) > 100)) {
            throw new \InvalidArgumentException('invalid length for $country when calling AccountAddressDTO., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($country) < 1)) {
            throw new \InvalidArgumentException('invalid length for $country when calling AccountAddressDTO., must be bigger than or equal to 1.');
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region Region
     *
     * @return self
     */
    public function setRegion($region)
    {
        if (is_null($region)) {
            throw new \InvalidArgumentException('non-nullable region cannot be null');
        }
        if ((mb_strlen($region) > 200)) {
            throw new \InvalidArgumentException('invalid length for $region when calling AccountAddressDTO., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($region) < 1)) {
            throw new \InvalidArgumentException('invalid length for $region when calling AccountAddressDTO., must be bigger than or equal to 1.');
        }

        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets country_en
     *
     * @return string
     */
    public function getCountryEn()
    {
        return $this->container['country_en'];
    }

    /**
     * Sets country_en
     *
     * @param string $country_en Country EN
     *
     * @return self
     */
    public function setCountryEn($country_en)
    {
        if (is_null($country_en)) {
            throw new \InvalidArgumentException('non-nullable country_en cannot be null');
        }
        if ((mb_strlen($country_en) > 100)) {
            throw new \InvalidArgumentException('invalid length for $country_en when calling AccountAddressDTO., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($country_en) < 1)) {
            throw new \InvalidArgumentException('invalid length for $country_en when calling AccountAddressDTO., must be bigger than or equal to 1.');
        }

        $this->container['country_en'] = $country_en;

        return $this;
    }

    /**
     * Gets region_en
     *
     * @return string
     */
    public function getRegionEn()
    {
        return $this->container['region_en'];
    }

    /**
     * Sets region_en
     *
     * @param string $region_en Region EN
     *
     * @return self
     */
    public function setRegionEn($region_en)
    {
        if (is_null($region_en)) {
            throw new \InvalidArgumentException('non-nullable region_en cannot be null');
        }
        if ((mb_strlen($region_en) > 200)) {
            throw new \InvalidArgumentException('invalid length for $region_en when calling AccountAddressDTO., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($region_en) < 1)) {
            throw new \InvalidArgumentException('invalid length for $region_en when calling AccountAddressDTO., must be bigger than or equal to 1.');
        }

        $this->container['region_en'] = $region_en;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string $street Street
     *
     * @return self
     */
    public function setStreet($street)
    {
        if (is_null($street)) {
            throw new \InvalidArgumentException('non-nullable street cannot be null');
        }
        if ((mb_strlen($street) > 200)) {
            throw new \InvalidArgumentException('invalid length for $street when calling AccountAddressDTO., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($street) < 1)) {
            throw new \InvalidArgumentException('invalid length for $street when calling AccountAddressDTO., must be bigger than or equal to 1.');
        }

        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets street2
     *
     * @return string|null
     */
    public function getStreet2()
    {
        return $this->container['street2'];
    }

    /**
     * Sets street2
     *
     * @param string|null $street2 Street
     *
     * @return self
     */
    public function setStreet2($street2)
    {
        if (is_null($street2)) {
            throw new \InvalidArgumentException('non-nullable street2 cannot be null');
        }
        if ((mb_strlen($street2) > 200)) {
            throw new \InvalidArgumentException('invalid length for $street2 when calling AccountAddressDTO., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($street2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $street2 when calling AccountAddressDTO., must be bigger than or equal to 0.');
        }

        $this->container['street2'] = $street2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city City
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        if ((mb_strlen($city) > 200)) {
            throw new \InvalidArgumentException('invalid length for $city when calling AccountAddressDTO., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($city) < 1)) {
            throw new \InvalidArgumentException('invalid length for $city when calling AccountAddressDTO., must be bigger than or equal to 1.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string $zip Zip code
     *
     * @return self
     */
    public function setZip($zip)
    {
        if (is_null($zip)) {
            throw new \InvalidArgumentException('non-nullable zip cannot be null');
        }
        if ((mb_strlen($zip) > 10)) {
            throw new \InvalidArgumentException('invalid length for $zip when calling AccountAddressDTO., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($zip) < 1)) {
            throw new \InvalidArgumentException('invalid length for $zip when calling AccountAddressDTO., must be bigger than or equal to 1.');
        }

        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets formatted_address
     *
     * @return string
     */
    public function getFormattedAddress()
    {
        return $this->container['formatted_address'];
    }

    /**
     * Sets formatted_address
     *
     * @param string $formatted_address Formatted address
     *
     * @return self
     */
    public function setFormattedAddress($formatted_address)
    {
        if (is_null($formatted_address)) {
            throw new \InvalidArgumentException('non-nullable formatted_address cannot be null');
        }
        if ((mb_strlen($formatted_address) > 300)) {
            throw new \InvalidArgumentException('invalid length for $formatted_address when calling AccountAddressDTO., must be smaller than or equal to 300.');
        }
        if ((mb_strlen($formatted_address) < 1)) {
            throw new \InvalidArgumentException('invalid length for $formatted_address when calling AccountAddressDTO., must be bigger than or equal to 1.');
        }

        $this->container['formatted_address'] = $formatted_address;

        return $this;
    }

    /**
     * Gets country_iso
     *
     * @return string|null
     */
    public function getCountryIso()
    {
        return $this->container['country_iso'];
    }

    /**
     * Sets country_iso
     *
     * @param string|null $country_iso Country ISO code
     *
     * @return self
     */
    public function setCountryIso($country_iso)
    {
        if (is_null($country_iso)) {
            throw new \InvalidArgumentException('non-nullable country_iso cannot be null');
        }
        $this->container['country_iso'] = $country_iso;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


