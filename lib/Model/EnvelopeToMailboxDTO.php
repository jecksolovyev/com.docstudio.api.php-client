<?php
/**
 * EnvelopeToMailboxDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocStudio Api Documentation
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R74.25
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EnvelopeToMailboxDTO Class Doc Comment
 *
 * @category Class
 * @description Data records
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EnvelopeToMailboxDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EnvelopeToMailboxDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'envelope_uuid' => 'string',
'subject' => 'string',
'message' => 'string',
'archived' => 'bool',
'sent_by_me' => 'bool',
'created_at' => '\DateTime',
'seen_at' => '\DateTime',
'expired_after' => '\DateTime',
'sharing_forbidden' => 'bool',
'status' => 'string',
'account_uuid' => 'string',
'mailbox_uuid' => 'string',
'mailbox_name' => 'string',
'total' => 'int',
'completed' => 'int',
'labels' => 'string[]',
'template_uuid' => 'string',
'template_name' => 'string',
'invitation_code' => 'string',
'chain_uuid' => 'string',
'chained_by_me' => 'bool',
'extra_fields' => '\Swagger\Client\Model\EnvelopeExtraFieldDTO[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'envelope_uuid' => 'uuid',
'subject' => null,
'message' => null,
'archived' => null,
'sent_by_me' => null,
'created_at' => 'date-time',
'seen_at' => 'date-time',
'expired_after' => 'date-time',
'sharing_forbidden' => null,
'status' => null,
'account_uuid' => 'uuid',
'mailbox_uuid' => 'uuid',
'mailbox_name' => null,
'total' => 'int32',
'completed' => 'int32',
'labels' => 'uuid',
'template_uuid' => 'uuid',
'template_name' => null,
'invitation_code' => null,
'chain_uuid' => 'uuid',
'chained_by_me' => null,
'extra_fields' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'envelope_uuid' => 'envelopeUuid',
'subject' => 'subject',
'message' => 'message',
'archived' => 'archived',
'sent_by_me' => 'sentByMe',
'created_at' => 'createdAt',
'seen_at' => 'seenAt',
'expired_after' => 'expiredAfter',
'sharing_forbidden' => 'sharingForbidden',
'status' => 'status',
'account_uuid' => 'accountUUID',
'mailbox_uuid' => 'mailboxUUID',
'mailbox_name' => 'mailboxName',
'total' => 'total',
'completed' => 'completed',
'labels' => 'labels',
'template_uuid' => 'templateUuid',
'template_name' => 'templateName',
'invitation_code' => 'invitationCode',
'chain_uuid' => 'chainUuid',
'chained_by_me' => 'chainedByMe',
'extra_fields' => 'extraFields'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'envelope_uuid' => 'setEnvelopeUuid',
'subject' => 'setSubject',
'message' => 'setMessage',
'archived' => 'setArchived',
'sent_by_me' => 'setSentByMe',
'created_at' => 'setCreatedAt',
'seen_at' => 'setSeenAt',
'expired_after' => 'setExpiredAfter',
'sharing_forbidden' => 'setSharingForbidden',
'status' => 'setStatus',
'account_uuid' => 'setAccountUuid',
'mailbox_uuid' => 'setMailboxUuid',
'mailbox_name' => 'setMailboxName',
'total' => 'setTotal',
'completed' => 'setCompleted',
'labels' => 'setLabels',
'template_uuid' => 'setTemplateUuid',
'template_name' => 'setTemplateName',
'invitation_code' => 'setInvitationCode',
'chain_uuid' => 'setChainUuid',
'chained_by_me' => 'setChainedByMe',
'extra_fields' => 'setExtraFields'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'envelope_uuid' => 'getEnvelopeUuid',
'subject' => 'getSubject',
'message' => 'getMessage',
'archived' => 'getArchived',
'sent_by_me' => 'getSentByMe',
'created_at' => 'getCreatedAt',
'seen_at' => 'getSeenAt',
'expired_after' => 'getExpiredAfter',
'sharing_forbidden' => 'getSharingForbidden',
'status' => 'getStatus',
'account_uuid' => 'getAccountUuid',
'mailbox_uuid' => 'getMailboxUuid',
'mailbox_name' => 'getMailboxName',
'total' => 'getTotal',
'completed' => 'getCompleted',
'labels' => 'getLabels',
'template_uuid' => 'getTemplateUuid',
'template_name' => 'getTemplateName',
'invitation_code' => 'getInvitationCode',
'chain_uuid' => 'getChainUuid',
'chained_by_me' => 'getChainedByMe',
'extra_fields' => 'getExtraFields'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_DRAFT = 'DRAFT';
const STATUS_SENT = 'SENT';
const STATUS_WAITING = 'WAITING';
const STATUS_COMPLETED = 'COMPLETED';
const STATUS_CANCELLED = 'CANCELLED';
const STATUS_EXPIRED = 'EXPIRED';
const STATUS_ON_APPROVAL = 'ON_APPROVAL';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_DRAFT,
self::STATUS_SENT,
self::STATUS_WAITING,
self::STATUS_COMPLETED,
self::STATUS_CANCELLED,
self::STATUS_EXPIRED,
self::STATUS_ON_APPROVAL,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['envelope_uuid'] = isset($data['envelope_uuid']) ? $data['envelope_uuid'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['archived'] = isset($data['archived']) ? $data['archived'] : null;
        $this->container['sent_by_me'] = isset($data['sent_by_me']) ? $data['sent_by_me'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['seen_at'] = isset($data['seen_at']) ? $data['seen_at'] : null;
        $this->container['expired_after'] = isset($data['expired_after']) ? $data['expired_after'] : null;
        $this->container['sharing_forbidden'] = isset($data['sharing_forbidden']) ? $data['sharing_forbidden'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['account_uuid'] = isset($data['account_uuid']) ? $data['account_uuid'] : null;
        $this->container['mailbox_uuid'] = isset($data['mailbox_uuid']) ? $data['mailbox_uuid'] : null;
        $this->container['mailbox_name'] = isset($data['mailbox_name']) ? $data['mailbox_name'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['completed'] = isset($data['completed']) ? $data['completed'] : null;
        $this->container['labels'] = isset($data['labels']) ? $data['labels'] : null;
        $this->container['template_uuid'] = isset($data['template_uuid']) ? $data['template_uuid'] : null;
        $this->container['template_name'] = isset($data['template_name']) ? $data['template_name'] : null;
        $this->container['invitation_code'] = isset($data['invitation_code']) ? $data['invitation_code'] : null;
        $this->container['chain_uuid'] = isset($data['chain_uuid']) ? $data['chain_uuid'] : null;
        $this->container['chained_by_me'] = isset($data['chained_by_me']) ? $data['chained_by_me'] : null;
        $this->container['extra_fields'] = isset($data['extra_fields']) ? $data['extra_fields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets envelope_uuid
     *
     * @return string
     */
    public function getEnvelopeUuid()
    {
        return $this->container['envelope_uuid'];
    }

    /**
     * Sets envelope_uuid
     *
     * @param string $envelope_uuid envelope_uuid
     *
     * @return $this
     */
    public function setEnvelopeUuid($envelope_uuid)
    {
        $this->container['envelope_uuid'] = $envelope_uuid;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject subject
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool $archived archived
     *
     * @return $this
     */
    public function setArchived($archived)
    {
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets sent_by_me
     *
     * @return bool
     */
    public function getSentByMe()
    {
        return $this->container['sent_by_me'];
    }

    /**
     * Sets sent_by_me
     *
     * @param bool $sent_by_me Flag meaning 'outbox'. Probably not necessary on UI
     *
     * @return $this
     */
    public function setSentByMe($sent_by_me)
    {
        $this->container['sent_by_me'] = $sent_by_me;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets seen_at
     *
     * @return \DateTime
     */
    public function getSeenAt()
    {
        return $this->container['seen_at'];
    }

    /**
     * Sets seen_at
     *
     * @param \DateTime $seen_at Date-time it was seen by receiver
     *
     * @return $this
     */
    public function setSeenAt($seen_at)
    {
        $this->container['seen_at'] = $seen_at;

        return $this;
    }

    /**
     * Gets expired_after
     *
     * @return \DateTime
     */
    public function getExpiredAfter()
    {
        return $this->container['expired_after'];
    }

    /**
     * Sets expired_after
     *
     * @param \DateTime $expired_after expired_after
     *
     * @return $this
     */
    public function setExpiredAfter($expired_after)
    {
        $this->container['expired_after'] = $expired_after;

        return $this;
    }

    /**
     * Gets sharing_forbidden
     *
     * @return bool
     */
    public function getSharingForbidden()
    {
        return $this->container['sharing_forbidden'];
    }

    /**
     * Sets sharing_forbidden
     *
     * @param bool $sharing_forbidden Sharing by email is forbidden
     *
     * @return $this
     */
    public function setSharingForbidden($sharing_forbidden)
    {
        $this->container['sharing_forbidden'] = $sharing_forbidden;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets account_uuid
     *
     * @return string
     */
    public function getAccountUuid()
    {
        return $this->container['account_uuid'];
    }

    /**
     * Sets account_uuid
     *
     * @param string $account_uuid Sender account UUID
     *
     * @return $this
     */
    public function setAccountUuid($account_uuid)
    {
        $this->container['account_uuid'] = $account_uuid;

        return $this;
    }

    /**
     * Gets mailbox_uuid
     *
     * @return string
     */
    public function getMailboxUuid()
    {
        return $this->container['mailbox_uuid'];
    }

    /**
     * Sets mailbox_uuid
     *
     * @param string $mailbox_uuid UUID of sender
     *
     * @return $this
     */
    public function setMailboxUuid($mailbox_uuid)
    {
        $this->container['mailbox_uuid'] = $mailbox_uuid;

        return $this;
    }

    /**
     * Gets mailbox_name
     *
     * @return string
     */
    public function getMailboxName()
    {
        return $this->container['mailbox_name'];
    }

    /**
     * Sets mailbox_name
     *
     * @param string $mailbox_name Mailbox name of sender
     *
     * @return $this
     */
    public function setMailboxName($mailbox_name)
    {
        $this->container['mailbox_name'] = $mailbox_name;

        return $this;
    }

    /**
     * Gets total
     *
     * @return int
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param int $total Total number of participants
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets completed
     *
     * @return int
     */
    public function getCompleted()
    {
        return $this->container['completed'];
    }

    /**
     * Sets completed
     *
     * @param int $completed Number of participants processed
     *
     * @return $this
     */
    public function setCompleted($completed)
    {
        $this->container['completed'] = $completed;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return string[]
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param string[] $labels labels
     *
     * @return $this
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets template_uuid
     *
     * @return string
     */
    public function getTemplateUuid()
    {
        return $this->container['template_uuid'];
    }

    /**
     * Sets template_uuid
     *
     * @param string $template_uuid Envelope template UUID
     *
     * @return $this
     */
    public function setTemplateUuid($template_uuid)
    {
        $this->container['template_uuid'] = $template_uuid;

        return $this;
    }

    /**
     * Gets template_name
     *
     * @return string
     */
    public function getTemplateName()
    {
        return $this->container['template_name'];
    }

    /**
     * Sets template_name
     *
     * @param string $template_name Envelope template name
     *
     * @return $this
     */
    public function setTemplateName($template_name)
    {
        $this->container['template_name'] = $template_name;

        return $this;
    }

    /**
     * Gets invitation_code
     *
     * @return string
     */
    public function getInvitationCode()
    {
        return $this->container['invitation_code'];
    }

    /**
     * Sets invitation_code
     *
     * @param string $invitation_code Invitation code, if acceptable
     *
     * @return $this
     */
    public function setInvitationCode($invitation_code)
    {
        $this->container['invitation_code'] = $invitation_code;

        return $this;
    }

    /**
     * Gets chain_uuid
     *
     * @return string
     */
    public function getChainUuid()
    {
        return $this->container['chain_uuid'];
    }

    /**
     * Sets chain_uuid
     *
     * @param string $chain_uuid Envelope chain UUID
     *
     * @return $this
     */
    public function setChainUuid($chain_uuid)
    {
        $this->container['chain_uuid'] = $chain_uuid;

        return $this;
    }

    /**
     * Gets chained_by_me
     *
     * @return bool
     */
    public function getChainedByMe()
    {
        return $this->container['chained_by_me'];
    }

    /**
     * Sets chained_by_me
     *
     * @param bool $chained_by_me Envelope chained by requested user
     *
     * @return $this
     */
    public function setChainedByMe($chained_by_me)
    {
        $this->container['chained_by_me'] = $chained_by_me;

        return $this;
    }

    /**
     * Gets extra_fields
     *
     * @return \Swagger\Client\Model\EnvelopeExtraFieldDTO[]
     */
    public function getExtraFields()
    {
        return $this->container['extra_fields'];
    }

    /**
     * Sets extra_fields
     *
     * @param \Swagger\Client\Model\EnvelopeExtraFieldDTO[] $extra_fields Data for extra columns
     *
     * @return $this
     */
    public function setExtraFields($extra_fields)
    {
        $this->container['extra_fields'] = $extra_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
