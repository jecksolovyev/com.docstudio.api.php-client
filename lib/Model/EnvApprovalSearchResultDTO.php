<?php
/**
 * EnvApprovalSearchResultDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Docstudio\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocStudio Api Documentation
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R74.25
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Docstudio\Client\Model;

use \ArrayAccess;
use \Docstudio\ClientObjectSerializer;

/**
 * EnvApprovalSearchResultDTO Class Doc Comment
 *
 * @category Class
 * @description Data records
 * @package  Docstudio\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EnvApprovalSearchResultDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EnvApprovalSearchResultDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'envelope_uuid' => 'string',
'subject' => 'string',
'message' => 'string',
'created_at' => '\DateTime',
'status' => 'string',
'mailbox_uuid' => 'string',
'account_uuid' => 'string',
'mailbox_name' => 'string',
'total' => 'int',
'completed' => 'int',
'template_uuid' => 'string',
'template_name' => 'string',
'seen_at' => '\DateTime',
'expired_after' => '\DateTime',
'approval_flow_uuid' => 'string',
'urgent' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'envelope_uuid' => 'uuid',
'subject' => null,
'message' => null,
'created_at' => 'date-time',
'status' => null,
'mailbox_uuid' => 'uuid',
'account_uuid' => 'uuid',
'mailbox_name' => null,
'total' => 'int32',
'completed' => 'int32',
'template_uuid' => 'uuid',
'template_name' => null,
'seen_at' => 'date-time',
'expired_after' => 'date-time',
'approval_flow_uuid' => 'uuid',
'urgent' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'envelope_uuid' => 'envelopeUuid',
'subject' => 'subject',
'message' => 'message',
'created_at' => 'createdAt',
'status' => 'status',
'mailbox_uuid' => 'mailboxUUID',
'account_uuid' => 'accountUuid',
'mailbox_name' => 'mailboxName',
'total' => 'total',
'completed' => 'completed',
'template_uuid' => 'templateUuid',
'template_name' => 'templateName',
'seen_at' => 'seenAt',
'expired_after' => 'expiredAfter',
'approval_flow_uuid' => 'approvalFlowUuid',
'urgent' => 'urgent'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'envelope_uuid' => 'setEnvelopeUuid',
'subject' => 'setSubject',
'message' => 'setMessage',
'created_at' => 'setCreatedAt',
'status' => 'setStatus',
'mailbox_uuid' => 'setMailboxUuid',
'account_uuid' => 'setAccountUuid',
'mailbox_name' => 'setMailboxName',
'total' => 'setTotal',
'completed' => 'setCompleted',
'template_uuid' => 'setTemplateUuid',
'template_name' => 'setTemplateName',
'seen_at' => 'setSeenAt',
'expired_after' => 'setExpiredAfter',
'approval_flow_uuid' => 'setApprovalFlowUuid',
'urgent' => 'setUrgent'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'envelope_uuid' => 'getEnvelopeUuid',
'subject' => 'getSubject',
'message' => 'getMessage',
'created_at' => 'getCreatedAt',
'status' => 'getStatus',
'mailbox_uuid' => 'getMailboxUuid',
'account_uuid' => 'getAccountUuid',
'mailbox_name' => 'getMailboxName',
'total' => 'getTotal',
'completed' => 'getCompleted',
'template_uuid' => 'getTemplateUuid',
'template_name' => 'getTemplateName',
'seen_at' => 'getSeenAt',
'expired_after' => 'getExpiredAfter',
'approval_flow_uuid' => 'getApprovalFlowUuid',
'urgent' => 'getUrgent'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['envelope_uuid'] = isset($data['envelope_uuid']) ? $data['envelope_uuid'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['mailbox_uuid'] = isset($data['mailbox_uuid']) ? $data['mailbox_uuid'] : null;
        $this->container['account_uuid'] = isset($data['account_uuid']) ? $data['account_uuid'] : null;
        $this->container['mailbox_name'] = isset($data['mailbox_name']) ? $data['mailbox_name'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['completed'] = isset($data['completed']) ? $data['completed'] : null;
        $this->container['template_uuid'] = isset($data['template_uuid']) ? $data['template_uuid'] : null;
        $this->container['template_name'] = isset($data['template_name']) ? $data['template_name'] : null;
        $this->container['seen_at'] = isset($data['seen_at']) ? $data['seen_at'] : null;
        $this->container['expired_after'] = isset($data['expired_after']) ? $data['expired_after'] : null;
        $this->container['approval_flow_uuid'] = isset($data['approval_flow_uuid']) ? $data['approval_flow_uuid'] : null;
        $this->container['urgent'] = isset($data['urgent']) ? $data['urgent'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets envelope_uuid
     *
     * @return string
     */
    public function getEnvelopeUuid()
    {
        return $this->container['envelope_uuid'];
    }

    /**
     * Sets envelope_uuid
     *
     * @param string $envelope_uuid The envelope UUID
     *
     * @return $this
     */
    public function setEnvelopeUuid($envelope_uuid)
    {
        $this->container['envelope_uuid'] = $envelope_uuid;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject The envelope subject
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message The envelope message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at The date the approval was created
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Status of approval
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets mailbox_uuid
     *
     * @return string
     */
    public function getMailboxUuid()
    {
        return $this->container['mailbox_uuid'];
    }

    /**
     * Sets mailbox_uuid
     *
     * @param string $mailbox_uuid Mailbox UUID of approval initiator
     *
     * @return $this
     */
    public function setMailboxUuid($mailbox_uuid)
    {
        $this->container['mailbox_uuid'] = $mailbox_uuid;

        return $this;
    }

    /**
     * Gets account_uuid
     *
     * @return string
     */
    public function getAccountUuid()
    {
        return $this->container['account_uuid'];
    }

    /**
     * Sets account_uuid
     *
     * @param string $account_uuid Mailbox account UUID of approval initiator
     *
     * @return $this
     */
    public function setAccountUuid($account_uuid)
    {
        $this->container['account_uuid'] = $account_uuid;

        return $this;
    }

    /**
     * Gets mailbox_name
     *
     * @return string
     */
    public function getMailboxName()
    {
        return $this->container['mailbox_name'];
    }

    /**
     * Sets mailbox_name
     *
     * @param string $mailbox_name Mailbox name of approval initiator
     *
     * @return $this
     */
    public function setMailboxName($mailbox_name)
    {
        $this->container['mailbox_name'] = $mailbox_name;

        return $this;
    }

    /**
     * Gets total
     *
     * @return int
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param int $total Total number of participants
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets completed
     *
     * @return int
     */
    public function getCompleted()
    {
        return $this->container['completed'];
    }

    /**
     * Sets completed
     *
     * @param int $completed Number of participants processed
     *
     * @return $this
     */
    public function setCompleted($completed)
    {
        $this->container['completed'] = $completed;

        return $this;
    }

    /**
     * Gets template_uuid
     *
     * @return string
     */
    public function getTemplateUuid()
    {
        return $this->container['template_uuid'];
    }

    /**
     * Sets template_uuid
     *
     * @param string $template_uuid Envelope template UUID
     *
     * @return $this
     */
    public function setTemplateUuid($template_uuid)
    {
        $this->container['template_uuid'] = $template_uuid;

        return $this;
    }

    /**
     * Gets template_name
     *
     * @return string
     */
    public function getTemplateName()
    {
        return $this->container['template_name'];
    }

    /**
     * Sets template_name
     *
     * @param string $template_name Envelope template name
     *
     * @return $this
     */
    public function setTemplateName($template_name)
    {
        $this->container['template_name'] = $template_name;

        return $this;
    }

    /**
     * Gets seen_at
     *
     * @return \DateTime
     */
    public function getSeenAt()
    {
        return $this->container['seen_at'];
    }

    /**
     * Sets seen_at
     *
     * @param \DateTime $seen_at Date-time it was seen by approver
     *
     * @return $this
     */
    public function setSeenAt($seen_at)
    {
        $this->container['seen_at'] = $seen_at;

        return $this;
    }

    /**
     * Gets expired_after
     *
     * @return \DateTime
     */
    public function getExpiredAfter()
    {
        return $this->container['expired_after'];
    }

    /**
     * Sets expired_after
     *
     * @param \DateTime $expired_after The date the envelope will be expired
     *
     * @return $this
     */
    public function setExpiredAfter($expired_after)
    {
        $this->container['expired_after'] = $expired_after;

        return $this;
    }

    /**
     * Gets approval_flow_uuid
     *
     * @return string
     */
    public function getApprovalFlowUuid()
    {
        return $this->container['approval_flow_uuid'];
    }

    /**
     * Sets approval_flow_uuid
     *
     * @param string $approval_flow_uuid UUID of approval flow
     *
     * @return $this
     */
    public function setApprovalFlowUuid($approval_flow_uuid)
    {
        $this->container['approval_flow_uuid'] = $approval_flow_uuid;

        return $this;
    }

    /**
     * Gets urgent
     *
     * @return bool
     */
    public function getUrgent()
    {
        return $this->container['urgent'];
    }

    /**
     * Sets urgent
     *
     * @param bool $urgent Is approval flow urgent?
     *
     * @return $this
     */
    public function setUrgent($urgent)
    {
        $this->container['urgent'] = $urgent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
