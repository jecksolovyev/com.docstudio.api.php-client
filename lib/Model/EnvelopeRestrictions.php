<?php
/**
 * EnvelopeRestrictions
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocStudio\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DocStudio Api Documentation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R125.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DocStudio\Client\Model;

use \ArrayAccess;
use \DocStudio\Client\ObjectSerializer;

/**
 * EnvelopeRestrictions Class Doc Comment
 *
 * @category Class
 * @description Envelope Restrictions
 * @package  DocStudio\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EnvelopeRestrictions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EnvelopeRestrictions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'eink_footer' => 'string',
        'field' => '\DocStudio\Client\Model\FieldRestriction',
        'attachment' => '\DocStudio\Client\Model\AttachmentRestriction',
        'search' => '\DocStudio\Client\Model\SearchRestriction',
        'search_field' => '\DocStudio\Client\Model\SearchFieldRestriction',
        'table' => '\DocStudio\Client\Model\EnvTableRestriction',
        'share' => '\DocStudio\Client\Model\ShareRestriction',
        'list_columns' => '\DocStudio\Client\Model\EnvelopeListColumn[]',
        'list_extra_column' => '\DocStudio\Client\Model\EnvelopeListColumnExtra',
        'delete_from_bin_after_days' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'eink_footer' => null,
        'field' => null,
        'attachment' => null,
        'search' => null,
        'search_field' => null,
        'table' => null,
        'share' => null,
        'list_columns' => null,
        'list_extra_column' => null,
        'delete_from_bin_after_days' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'eink_footer' => false,
        'field' => false,
        'attachment' => false,
        'search' => false,
        'search_field' => false,
        'table' => false,
        'share' => false,
        'list_columns' => false,
        'list_extra_column' => false,
        'delete_from_bin_after_days' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'eink_footer' => 'einkFooter',
        'field' => 'field',
        'attachment' => 'attachment',
        'search' => 'search',
        'search_field' => 'searchField',
        'table' => 'table',
        'share' => 'share',
        'list_columns' => 'listColumns',
        'list_extra_column' => 'listExtraColumn',
        'delete_from_bin_after_days' => 'deleteFromBinAfterDays'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'eink_footer' => 'setEinkFooter',
        'field' => 'setField',
        'attachment' => 'setAttachment',
        'search' => 'setSearch',
        'search_field' => 'setSearchField',
        'table' => 'setTable',
        'share' => 'setShare',
        'list_columns' => 'setListColumns',
        'list_extra_column' => 'setListExtraColumn',
        'delete_from_bin_after_days' => 'setDeleteFromBinAfterDays'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'eink_footer' => 'getEinkFooter',
        'field' => 'getField',
        'attachment' => 'getAttachment',
        'search' => 'getSearch',
        'search_field' => 'getSearchField',
        'table' => 'getTable',
        'share' => 'getShare',
        'list_columns' => 'getListColumns',
        'list_extra_column' => 'getListExtraColumn',
        'delete_from_bin_after_days' => 'getDeleteFromBinAfterDays'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('eink_footer', $data ?? [], null);
        $this->setIfExists('field', $data ?? [], null);
        $this->setIfExists('attachment', $data ?? [], null);
        $this->setIfExists('search', $data ?? [], null);
        $this->setIfExists('search_field', $data ?? [], null);
        $this->setIfExists('table', $data ?? [], null);
        $this->setIfExists('share', $data ?? [], null);
        $this->setIfExists('list_columns', $data ?? [], null);
        $this->setIfExists('list_extra_column', $data ?? [], null);
        $this->setIfExists('delete_from_bin_after_days', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets eink_footer
     *
     * @return string|null
     */
    public function getEinkFooter()
    {
        return $this->container['eink_footer'];
    }

    /**
     * Sets eink_footer
     *
     * @param string|null $eink_footer eink_footer
     *
     * @return self
     */
    public function setEinkFooter($eink_footer)
    {
        if (is_null($eink_footer)) {
            throw new \InvalidArgumentException('non-nullable eink_footer cannot be null');
        }
        $this->container['eink_footer'] = $eink_footer;

        return $this;
    }

    /**
     * Gets field
     *
     * @return \DocStudio\Client\Model\FieldRestriction|null
     */
    public function getField()
    {
        return $this->container['field'];
    }

    /**
     * Sets field
     *
     * @param \DocStudio\Client\Model\FieldRestriction|null $field field
     *
     * @return self
     */
    public function setField($field)
    {
        if (is_null($field)) {
            throw new \InvalidArgumentException('non-nullable field cannot be null');
        }
        $this->container['field'] = $field;

        return $this;
    }

    /**
     * Gets attachment
     *
     * @return \DocStudio\Client\Model\AttachmentRestriction|null
     */
    public function getAttachment()
    {
        return $this->container['attachment'];
    }

    /**
     * Sets attachment
     *
     * @param \DocStudio\Client\Model\AttachmentRestriction|null $attachment attachment
     *
     * @return self
     */
    public function setAttachment($attachment)
    {
        if (is_null($attachment)) {
            throw new \InvalidArgumentException('non-nullable attachment cannot be null');
        }
        $this->container['attachment'] = $attachment;

        return $this;
    }

    /**
     * Gets search
     *
     * @return \DocStudio\Client\Model\SearchRestriction|null
     */
    public function getSearch()
    {
        return $this->container['search'];
    }

    /**
     * Sets search
     *
     * @param \DocStudio\Client\Model\SearchRestriction|null $search search
     *
     * @return self
     */
    public function setSearch($search)
    {
        if (is_null($search)) {
            throw new \InvalidArgumentException('non-nullable search cannot be null');
        }
        $this->container['search'] = $search;

        return $this;
    }

    /**
     * Gets search_field
     *
     * @return \DocStudio\Client\Model\SearchFieldRestriction|null
     */
    public function getSearchField()
    {
        return $this->container['search_field'];
    }

    /**
     * Sets search_field
     *
     * @param \DocStudio\Client\Model\SearchFieldRestriction|null $search_field search_field
     *
     * @return self
     */
    public function setSearchField($search_field)
    {
        if (is_null($search_field)) {
            throw new \InvalidArgumentException('non-nullable search_field cannot be null');
        }
        $this->container['search_field'] = $search_field;

        return $this;
    }

    /**
     * Gets table
     *
     * @return \DocStudio\Client\Model\EnvTableRestriction|null
     */
    public function getTable()
    {
        return $this->container['table'];
    }

    /**
     * Sets table
     *
     * @param \DocStudio\Client\Model\EnvTableRestriction|null $table table
     *
     * @return self
     */
    public function setTable($table)
    {
        if (is_null($table)) {
            throw new \InvalidArgumentException('non-nullable table cannot be null');
        }
        $this->container['table'] = $table;

        return $this;
    }

    /**
     * Gets share
     *
     * @return \DocStudio\Client\Model\ShareRestriction|null
     */
    public function getShare()
    {
        return $this->container['share'];
    }

    /**
     * Sets share
     *
     * @param \DocStudio\Client\Model\ShareRestriction|null $share share
     *
     * @return self
     */
    public function setShare($share)
    {
        if (is_null($share)) {
            throw new \InvalidArgumentException('non-nullable share cannot be null');
        }
        $this->container['share'] = $share;

        return $this;
    }

    /**
     * Gets list_columns
     *
     * @return \DocStudio\Client\Model\EnvelopeListColumn[]|null
     */
    public function getListColumns()
    {
        return $this->container['list_columns'];
    }

    /**
     * Sets list_columns
     *
     * @param \DocStudio\Client\Model\EnvelopeListColumn[]|null $list_columns list_columns
     *
     * @return self
     */
    public function setListColumns($list_columns)
    {
        if (is_null($list_columns)) {
            throw new \InvalidArgumentException('non-nullable list_columns cannot be null');
        }
        $this->container['list_columns'] = $list_columns;

        return $this;
    }

    /**
     * Gets list_extra_column
     *
     * @return \DocStudio\Client\Model\EnvelopeListColumnExtra|null
     */
    public function getListExtraColumn()
    {
        return $this->container['list_extra_column'];
    }

    /**
     * Sets list_extra_column
     *
     * @param \DocStudio\Client\Model\EnvelopeListColumnExtra|null $list_extra_column list_extra_column
     *
     * @return self
     */
    public function setListExtraColumn($list_extra_column)
    {
        if (is_null($list_extra_column)) {
            throw new \InvalidArgumentException('non-nullable list_extra_column cannot be null');
        }
        $this->container['list_extra_column'] = $list_extra_column;

        return $this;
    }

    /**
     * Gets delete_from_bin_after_days
     *
     * @return int|null
     */
    public function getDeleteFromBinAfterDays()
    {
        return $this->container['delete_from_bin_after_days'];
    }

    /**
     * Sets delete_from_bin_after_days
     *
     * @param int|null $delete_from_bin_after_days delete_from_bin_after_days
     *
     * @return self
     */
    public function setDeleteFromBinAfterDays($delete_from_bin_after_days)
    {
        if (is_null($delete_from_bin_after_days)) {
            throw new \InvalidArgumentException('non-nullable delete_from_bin_after_days cannot be null');
        }
        $this->container['delete_from_bin_after_days'] = $delete_from_bin_after_days;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


