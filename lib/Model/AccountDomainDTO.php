<?php
/**
 * AccountDomainDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocStudio Api Documentation
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R74.25
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AccountDomainDTO Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountDomainDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccountDomainDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'uuid' => 'string',
'account_uuid' => 'string',
'domain' => 'string',
'verify_info' => '\Swagger\Client\Model\AccountDomainVerifyInfo',
'verify_method' => 'string',
'status' => 'string',
'verification_date' => '\DateTime',
'create_date' => '\DateTime',
'last_check_date' => '\DateTime',
'sso_id_provider' => '\Swagger\Client\Model\AccountSsoIdProviderShortDTO'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'uuid' => 'uuid',
'account_uuid' => 'uuid',
'domain' => null,
'verify_info' => null,
'verify_method' => null,
'status' => null,
'verification_date' => 'date-time',
'create_date' => 'date-time',
'last_check_date' => 'date-time',
'sso_id_provider' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'uuid' => 'uuid',
'account_uuid' => 'accountUuid',
'domain' => 'domain',
'verify_info' => 'verifyInfo',
'verify_method' => 'verifyMethod',
'status' => 'status',
'verification_date' => 'verificationDate',
'create_date' => 'createDate',
'last_check_date' => 'lastCheckDate',
'sso_id_provider' => 'ssoIdProvider'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'uuid' => 'setUuid',
'account_uuid' => 'setAccountUuid',
'domain' => 'setDomain',
'verify_info' => 'setVerifyInfo',
'verify_method' => 'setVerifyMethod',
'status' => 'setStatus',
'verification_date' => 'setVerificationDate',
'create_date' => 'setCreateDate',
'last_check_date' => 'setLastCheckDate',
'sso_id_provider' => 'setSsoIdProvider'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'uuid' => 'getUuid',
'account_uuid' => 'getAccountUuid',
'domain' => 'getDomain',
'verify_info' => 'getVerifyInfo',
'verify_method' => 'getVerifyMethod',
'status' => 'getStatus',
'verification_date' => 'getVerificationDate',
'create_date' => 'getCreateDate',
'last_check_date' => 'getLastCheckDate',
'sso_id_provider' => 'getSsoIdProvider'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const VERIFY_METHOD_TXT_RECORD = 'DNS_TXT_RECORD';
const VERIFY_METHOD_CNAME_RECORD = 'DNS_CNAME_RECORD';
const STATUS_UNVERIFIED = 'UNVERIFIED';
const STATUS_ACTIVE = 'ACTIVE';
const STATUS_INACTIVE = 'INACTIVE';
const STATUS_VERIFIED = 'VERIFIED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVerifyMethodAllowableValues()
    {
        return [
            self::VERIFY_METHOD_TXT_RECORD,
self::VERIFY_METHOD_CNAME_RECORD,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_UNVERIFIED,
self::STATUS_ACTIVE,
self::STATUS_INACTIVE,
self::STATUS_VERIFIED,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['uuid'] = isset($data['uuid']) ? $data['uuid'] : null;
        $this->container['account_uuid'] = isset($data['account_uuid']) ? $data['account_uuid'] : null;
        $this->container['domain'] = isset($data['domain']) ? $data['domain'] : null;
        $this->container['verify_info'] = isset($data['verify_info']) ? $data['verify_info'] : null;
        $this->container['verify_method'] = isset($data['verify_method']) ? $data['verify_method'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['verification_date'] = isset($data['verification_date']) ? $data['verification_date'] : null;
        $this->container['create_date'] = isset($data['create_date']) ? $data['create_date'] : null;
        $this->container['last_check_date'] = isset($data['last_check_date']) ? $data['last_check_date'] : null;
        $this->container['sso_id_provider'] = isset($data['sso_id_provider']) ? $data['sso_id_provider'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getVerifyMethodAllowableValues();
        if (!is_null($this->container['verify_method']) && !in_array($this->container['verify_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'verify_method', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets uuid
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string $uuid Domain UUID
     *
     * @return $this
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets account_uuid
     *
     * @return string
     */
    public function getAccountUuid()
    {
        return $this->container['account_uuid'];
    }

    /**
     * Sets account_uuid
     *
     * @param string $account_uuid Domain account uuid
     *
     * @return $this
     */
    public function setAccountUuid($account_uuid)
    {
        $this->container['account_uuid'] = $account_uuid;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain Domain name
     *
     * @return $this
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets verify_info
     *
     * @return \Swagger\Client\Model\AccountDomainVerifyInfo
     */
    public function getVerifyInfo()
    {
        return $this->container['verify_info'];
    }

    /**
     * Sets verify_info
     *
     * @param \Swagger\Client\Model\AccountDomainVerifyInfo $verify_info verify_info
     *
     * @return $this
     */
    public function setVerifyInfo($verify_info)
    {
        $this->container['verify_info'] = $verify_info;

        return $this;
    }

    /**
     * Gets verify_method
     *
     * @return string
     */
    public function getVerifyMethod()
    {
        return $this->container['verify_method'];
    }

    /**
     * Sets verify_method
     *
     * @param string $verify_method Domain verification method
     *
     * @return $this
     */
    public function setVerifyMethod($verify_method)
    {
        $allowedValues = $this->getVerifyMethodAllowableValues();
        if (!is_null($verify_method) && !in_array($verify_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'verify_method', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['verify_method'] = $verify_method;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Domain status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets verification_date
     *
     * @return \DateTime
     */
    public function getVerificationDate()
    {
        return $this->container['verification_date'];
    }

    /**
     * Sets verification_date
     *
     * @param \DateTime $verification_date Domain verification date
     *
     * @return $this
     */
    public function setVerificationDate($verification_date)
    {
        $this->container['verification_date'] = $verification_date;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime $create_date Domain creation date
     *
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets last_check_date
     *
     * @return \DateTime
     */
    public function getLastCheckDate()
    {
        return $this->container['last_check_date'];
    }

    /**
     * Sets last_check_date
     *
     * @param \DateTime $last_check_date Domain last check date
     *
     * @return $this
     */
    public function setLastCheckDate($last_check_date)
    {
        $this->container['last_check_date'] = $last_check_date;

        return $this;
    }

    /**
     * Gets sso_id_provider
     *
     * @return \Swagger\Client\Model\AccountSsoIdProviderShortDTO
     */
    public function getSsoIdProvider()
    {
        return $this->container['sso_id_provider'];
    }

    /**
     * Sets sso_id_provider
     *
     * @param \Swagger\Client\Model\AccountSsoIdProviderShortDTO $sso_id_provider sso_id_provider
     *
     * @return $this
     */
    public function setSsoIdProvider($sso_id_provider)
    {
        $this->container['sso_id_provider'] = $sso_id_provider;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
