<?php
/**
 * AccountDomainDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocStudio\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DocStudio Api Documentation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R125.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DocStudio\Client\Model;

use \ArrayAccess;
use \DocStudio\Client\ObjectSerializer;

/**
 * AccountDomainDTO Class Doc Comment
 *
 * @category Class
 * @package  DocStudio\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AccountDomainDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AccountDomainDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'uuid' => 'string',
        'account_uuid' => 'string',
        'domain' => 'string',
        'verify_info' => '\DocStudio\Client\Model\AccountDomainVerifyInfo',
        'verify_method' => 'string',
        'status' => 'string',
        'verification_date' => '\DateTime',
        'create_date' => '\DateTime',
        'last_check_date' => '\DateTime',
        'sso_id_provider' => '\DocStudio\Client\Model\AccountSsoIdProviderShortDTO'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'uuid' => 'uuid',
        'account_uuid' => 'uuid',
        'domain' => null,
        'verify_info' => null,
        'verify_method' => null,
        'status' => null,
        'verification_date' => 'date-time',
        'create_date' => 'date-time',
        'last_check_date' => 'date-time',
        'sso_id_provider' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'uuid' => false,
        'account_uuid' => false,
        'domain' => false,
        'verify_info' => false,
        'verify_method' => false,
        'status' => false,
        'verification_date' => false,
        'create_date' => false,
        'last_check_date' => false,
        'sso_id_provider' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'uuid' => 'uuid',
        'account_uuid' => 'accountUuid',
        'domain' => 'domain',
        'verify_info' => 'verifyInfo',
        'verify_method' => 'verifyMethod',
        'status' => 'status',
        'verification_date' => 'verificationDate',
        'create_date' => 'createDate',
        'last_check_date' => 'lastCheckDate',
        'sso_id_provider' => 'ssoIdProvider'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'uuid' => 'setUuid',
        'account_uuid' => 'setAccountUuid',
        'domain' => 'setDomain',
        'verify_info' => 'setVerifyInfo',
        'verify_method' => 'setVerifyMethod',
        'status' => 'setStatus',
        'verification_date' => 'setVerificationDate',
        'create_date' => 'setCreateDate',
        'last_check_date' => 'setLastCheckDate',
        'sso_id_provider' => 'setSsoIdProvider'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'uuid' => 'getUuid',
        'account_uuid' => 'getAccountUuid',
        'domain' => 'getDomain',
        'verify_info' => 'getVerifyInfo',
        'verify_method' => 'getVerifyMethod',
        'status' => 'getStatus',
        'verification_date' => 'getVerificationDate',
        'create_date' => 'getCreateDate',
        'last_check_date' => 'getLastCheckDate',
        'sso_id_provider' => 'getSsoIdProvider'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const VERIFY_METHOD_DNS_TXT_RECORD = 'DNS_TXT_RECORD';
    public const VERIFY_METHOD_DNS_CNAME_RECORD = 'DNS_CNAME_RECORD';
    public const STATUS_UNVERIFIED = 'UNVERIFIED';
    public const STATUS_ACTIVE = 'ACTIVE';
    public const STATUS_INACTIVE = 'INACTIVE';
    public const STATUS_VERIFIED = 'VERIFIED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVerifyMethodAllowableValues()
    {
        return [
            self::VERIFY_METHOD_DNS_TXT_RECORD,
            self::VERIFY_METHOD_DNS_CNAME_RECORD,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_UNVERIFIED,
            self::STATUS_ACTIVE,
            self::STATUS_INACTIVE,
            self::STATUS_VERIFIED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('uuid', $data ?? [], null);
        $this->setIfExists('account_uuid', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('verify_info', $data ?? [], null);
        $this->setIfExists('verify_method', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('verification_date', $data ?? [], null);
        $this->setIfExists('create_date', $data ?? [], null);
        $this->setIfExists('last_check_date', $data ?? [], null);
        $this->setIfExists('sso_id_provider', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getVerifyMethodAllowableValues();
        if (!is_null($this->container['verify_method']) && !in_array($this->container['verify_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'verify_method', must be one of '%s'",
                $this->container['verify_method'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid Domain UUID
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        if (is_null($uuid)) {
            throw new \InvalidArgumentException('non-nullable uuid cannot be null');
        }
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets account_uuid
     *
     * @return string|null
     */
    public function getAccountUuid()
    {
        return $this->container['account_uuid'];
    }

    /**
     * Sets account_uuid
     *
     * @param string|null $account_uuid Domain account uuid
     *
     * @return self
     */
    public function setAccountUuid($account_uuid)
    {
        if (is_null($account_uuid)) {
            throw new \InvalidArgumentException('non-nullable account_uuid cannot be null');
        }
        $this->container['account_uuid'] = $account_uuid;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain Domain name
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets verify_info
     *
     * @return \DocStudio\Client\Model\AccountDomainVerifyInfo|null
     */
    public function getVerifyInfo()
    {
        return $this->container['verify_info'];
    }

    /**
     * Sets verify_info
     *
     * @param \DocStudio\Client\Model\AccountDomainVerifyInfo|null $verify_info verify_info
     *
     * @return self
     */
    public function setVerifyInfo($verify_info)
    {
        if (is_null($verify_info)) {
            throw new \InvalidArgumentException('non-nullable verify_info cannot be null');
        }
        $this->container['verify_info'] = $verify_info;

        return $this;
    }

    /**
     * Gets verify_method
     *
     * @return string|null
     */
    public function getVerifyMethod()
    {
        return $this->container['verify_method'];
    }

    /**
     * Sets verify_method
     *
     * @param string|null $verify_method Domain verification method
     *
     * @return self
     */
    public function setVerifyMethod($verify_method)
    {
        if (is_null($verify_method)) {
            throw new \InvalidArgumentException('non-nullable verify_method cannot be null');
        }
        $allowedValues = $this->getVerifyMethodAllowableValues();
        if (!in_array($verify_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'verify_method', must be one of '%s'",
                    $verify_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['verify_method'] = $verify_method;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Domain status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets verification_date
     *
     * @return \DateTime|null
     */
    public function getVerificationDate()
    {
        return $this->container['verification_date'];
    }

    /**
     * Sets verification_date
     *
     * @param \DateTime|null $verification_date Domain verification date
     *
     * @return self
     */
    public function setVerificationDate($verification_date)
    {
        if (is_null($verification_date)) {
            throw new \InvalidArgumentException('non-nullable verification_date cannot be null');
        }
        $this->container['verification_date'] = $verification_date;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime|null
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime|null $create_date Domain creation date
     *
     * @return self
     */
    public function setCreateDate($create_date)
    {
        if (is_null($create_date)) {
            throw new \InvalidArgumentException('non-nullable create_date cannot be null');
        }
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets last_check_date
     *
     * @return \DateTime|null
     */
    public function getLastCheckDate()
    {
        return $this->container['last_check_date'];
    }

    /**
     * Sets last_check_date
     *
     * @param \DateTime|null $last_check_date Domain last check date
     *
     * @return self
     */
    public function setLastCheckDate($last_check_date)
    {
        if (is_null($last_check_date)) {
            throw new \InvalidArgumentException('non-nullable last_check_date cannot be null');
        }
        $this->container['last_check_date'] = $last_check_date;

        return $this;
    }

    /**
     * Gets sso_id_provider
     *
     * @return \DocStudio\Client\Model\AccountSsoIdProviderShortDTO|null
     */
    public function getSsoIdProvider()
    {
        return $this->container['sso_id_provider'];
    }

    /**
     * Sets sso_id_provider
     *
     * @param \DocStudio\Client\Model\AccountSsoIdProviderShortDTO|null $sso_id_provider sso_id_provider
     *
     * @return self
     */
    public function setSsoIdProvider($sso_id_provider)
    {
        if (is_null($sso_id_provider)) {
            throw new \InvalidArgumentException('non-nullable sso_id_provider cannot be null');
        }
        $this->container['sso_id_provider'] = $sso_id_provider;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


