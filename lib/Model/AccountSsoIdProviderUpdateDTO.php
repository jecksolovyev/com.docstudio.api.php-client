<?php
/**
 * AccountSsoIdProviderUpdateDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocStudio\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DocStudio Api Documentation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R110.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DocStudio\Client\Model;

use \ArrayAccess;
use \DocStudio\Client\ObjectSerializer;

/**
 * AccountSsoIdProviderUpdateDTO Class Doc Comment
 *
 * @category Class
 * @description New IdP info
 * @package  DocStudio\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AccountSsoIdProviderUpdateDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AccountSsoIdProviderUpdateDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'first_name_mapping' => 'string',
        'last_name_mapping' => 'string',
        'phone_mapping' => 'string',
        'metadata_url' => 'string',
        'metadata_xml' => 'string',
        'signing_certificate' => 'string',
        'signing_private_key' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'first_name_mapping' => null,
        'last_name_mapping' => null,
        'phone_mapping' => null,
        'metadata_url' => null,
        'metadata_xml' => null,
        'signing_certificate' => 'byte',
        'signing_private_key' => 'byte'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'first_name_mapping' => false,
        'last_name_mapping' => false,
        'phone_mapping' => false,
        'metadata_url' => false,
        'metadata_xml' => false,
        'signing_certificate' => false,
        'signing_private_key' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'first_name_mapping' => 'firstNameMapping',
        'last_name_mapping' => 'lastNameMapping',
        'phone_mapping' => 'phoneMapping',
        'metadata_url' => 'metadataUrl',
        'metadata_xml' => 'metadataXml',
        'signing_certificate' => 'signingCertificate',
        'signing_private_key' => 'signingPrivateKey'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'first_name_mapping' => 'setFirstNameMapping',
        'last_name_mapping' => 'setLastNameMapping',
        'phone_mapping' => 'setPhoneMapping',
        'metadata_url' => 'setMetadataUrl',
        'metadata_xml' => 'setMetadataXml',
        'signing_certificate' => 'setSigningCertificate',
        'signing_private_key' => 'setSigningPrivateKey'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'first_name_mapping' => 'getFirstNameMapping',
        'last_name_mapping' => 'getLastNameMapping',
        'phone_mapping' => 'getPhoneMapping',
        'metadata_url' => 'getMetadataUrl',
        'metadata_xml' => 'getMetadataXml',
        'signing_certificate' => 'getSigningCertificate',
        'signing_private_key' => 'getSigningPrivateKey'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('first_name_mapping', $data ?? [], null);
        $this->setIfExists('last_name_mapping', $data ?? [], null);
        $this->setIfExists('phone_mapping', $data ?? [], null);
        $this->setIfExists('metadata_url', $data ?? [], null);
        $this->setIfExists('metadata_xml', $data ?? [], null);
        $this->setIfExists('signing_certificate', $data ?? [], null);
        $this->setIfExists('signing_private_key', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) < 3)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['first_name_mapping']) && (mb_strlen($this->container['first_name_mapping']) > 64)) {
            $invalidProperties[] = "invalid value for 'first_name_mapping', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['first_name_mapping']) && (mb_strlen($this->container['first_name_mapping']) < 1)) {
            $invalidProperties[] = "invalid value for 'first_name_mapping', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['last_name_mapping']) && (mb_strlen($this->container['last_name_mapping']) > 64)) {
            $invalidProperties[] = "invalid value for 'last_name_mapping', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['last_name_mapping']) && (mb_strlen($this->container['last_name_mapping']) < 1)) {
            $invalidProperties[] = "invalid value for 'last_name_mapping', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['phone_mapping']) && (mb_strlen($this->container['phone_mapping']) > 64)) {
            $invalidProperties[] = "invalid value for 'phone_mapping', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['phone_mapping']) && (mb_strlen($this->container['phone_mapping']) < 1)) {
            $invalidProperties[] = "invalid value for 'phone_mapping', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['metadata_url']) && (mb_strlen($this->container['metadata_url']) > 2048)) {
            $invalidProperties[] = "invalid value for 'metadata_url', the character length must be smaller than or equal to 2048.";
        }

        if (!is_null($this->container['metadata_url']) && (mb_strlen($this->container['metadata_url']) < 7)) {
            $invalidProperties[] = "invalid value for 'metadata_url', the character length must be bigger than or equal to 7.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling AccountSsoIdProviderUpdateDTO., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($name) < 3)) {
            throw new \InvalidArgumentException('invalid length for $name when calling AccountSsoIdProviderUpdateDTO., must be bigger than or equal to 3.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets first_name_mapping
     *
     * @return string|null
     */
    public function getFirstNameMapping()
    {
        return $this->container['first_name_mapping'];
    }

    /**
     * Sets first_name_mapping
     *
     * @param string|null $first_name_mapping first_name_mapping
     *
     * @return self
     */
    public function setFirstNameMapping($first_name_mapping)
    {
        if (is_null($first_name_mapping)) {
            throw new \InvalidArgumentException('non-nullable first_name_mapping cannot be null');
        }
        if ((mb_strlen($first_name_mapping) > 64)) {
            throw new \InvalidArgumentException('invalid length for $first_name_mapping when calling AccountSsoIdProviderUpdateDTO., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($first_name_mapping) < 1)) {
            throw new \InvalidArgumentException('invalid length for $first_name_mapping when calling AccountSsoIdProviderUpdateDTO., must be bigger than or equal to 1.');
        }

        $this->container['first_name_mapping'] = $first_name_mapping;

        return $this;
    }

    /**
     * Gets last_name_mapping
     *
     * @return string|null
     */
    public function getLastNameMapping()
    {
        return $this->container['last_name_mapping'];
    }

    /**
     * Sets last_name_mapping
     *
     * @param string|null $last_name_mapping last_name_mapping
     *
     * @return self
     */
    public function setLastNameMapping($last_name_mapping)
    {
        if (is_null($last_name_mapping)) {
            throw new \InvalidArgumentException('non-nullable last_name_mapping cannot be null');
        }
        if ((mb_strlen($last_name_mapping) > 64)) {
            throw new \InvalidArgumentException('invalid length for $last_name_mapping when calling AccountSsoIdProviderUpdateDTO., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($last_name_mapping) < 1)) {
            throw new \InvalidArgumentException('invalid length for $last_name_mapping when calling AccountSsoIdProviderUpdateDTO., must be bigger than or equal to 1.');
        }

        $this->container['last_name_mapping'] = $last_name_mapping;

        return $this;
    }

    /**
     * Gets phone_mapping
     *
     * @return string|null
     */
    public function getPhoneMapping()
    {
        return $this->container['phone_mapping'];
    }

    /**
     * Sets phone_mapping
     *
     * @param string|null $phone_mapping phone_mapping
     *
     * @return self
     */
    public function setPhoneMapping($phone_mapping)
    {
        if (is_null($phone_mapping)) {
            throw new \InvalidArgumentException('non-nullable phone_mapping cannot be null');
        }
        if ((mb_strlen($phone_mapping) > 64)) {
            throw new \InvalidArgumentException('invalid length for $phone_mapping when calling AccountSsoIdProviderUpdateDTO., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($phone_mapping) < 1)) {
            throw new \InvalidArgumentException('invalid length for $phone_mapping when calling AccountSsoIdProviderUpdateDTO., must be bigger than or equal to 1.');
        }

        $this->container['phone_mapping'] = $phone_mapping;

        return $this;
    }

    /**
     * Gets metadata_url
     *
     * @return string|null
     */
    public function getMetadataUrl()
    {
        return $this->container['metadata_url'];
    }

    /**
     * Sets metadata_url
     *
     * @param string|null $metadata_url metadata_url
     *
     * @return self
     */
    public function setMetadataUrl($metadata_url)
    {
        if (is_null($metadata_url)) {
            throw new \InvalidArgumentException('non-nullable metadata_url cannot be null');
        }
        if ((mb_strlen($metadata_url) > 2048)) {
            throw new \InvalidArgumentException('invalid length for $metadata_url when calling AccountSsoIdProviderUpdateDTO., must be smaller than or equal to 2048.');
        }
        if ((mb_strlen($metadata_url) < 7)) {
            throw new \InvalidArgumentException('invalid length for $metadata_url when calling AccountSsoIdProviderUpdateDTO., must be bigger than or equal to 7.');
        }

        $this->container['metadata_url'] = $metadata_url;

        return $this;
    }

    /**
     * Gets metadata_xml
     *
     * @return string|null
     */
    public function getMetadataXml()
    {
        return $this->container['metadata_xml'];
    }

    /**
     * Sets metadata_xml
     *
     * @param string|null $metadata_xml metadata_xml
     *
     * @return self
     */
    public function setMetadataXml($metadata_xml)
    {
        if (is_null($metadata_xml)) {
            throw new \InvalidArgumentException('non-nullable metadata_xml cannot be null');
        }
        $this->container['metadata_xml'] = $metadata_xml;

        return $this;
    }

    /**
     * Gets signing_certificate
     *
     * @return string|null
     */
    public function getSigningCertificate()
    {
        return $this->container['signing_certificate'];
    }

    /**
     * Sets signing_certificate
     *
     * @param string|null $signing_certificate signing_certificate
     *
     * @return self
     */
    public function setSigningCertificate($signing_certificate)
    {
        if (is_null($signing_certificate)) {
            throw new \InvalidArgumentException('non-nullable signing_certificate cannot be null');
        }
        $this->container['signing_certificate'] = $signing_certificate;

        return $this;
    }

    /**
     * Gets signing_private_key
     *
     * @return string|null
     */
    public function getSigningPrivateKey()
    {
        return $this->container['signing_private_key'];
    }

    /**
     * Sets signing_private_key
     *
     * @param string|null $signing_private_key signing_private_key
     *
     * @return self
     */
    public function setSigningPrivateKey($signing_private_key)
    {
        if (is_null($signing_private_key)) {
            throw new \InvalidArgumentException('non-nullable signing_private_key cannot be null');
        }
        $this->container['signing_private_key'] = $signing_private_key;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


