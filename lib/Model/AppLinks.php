<?php
/**
 * AppLinks
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocStudio\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DocStudio Api Documentation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R110.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DocStudio\Client\Model;

use \ArrayAccess;
use \DocStudio\Client\ObjectSerializer;

/**
 * AppLinks Class Doc Comment
 *
 * @category Class
 * @description Application Links
 * @package  DocStudio\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AppLinks implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AppLinks';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'official_url' => 'string',
        'base_url' => 'string',
        'docs_url' => 'string',
        'error_list_url' => 'string',
        'terms_and_conditions' => 'string',
        'privacy_policy' => 'string',
        'alt_login_page_side' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'official_url' => null,
        'base_url' => null,
        'docs_url' => null,
        'error_list_url' => null,
        'terms_and_conditions' => null,
        'privacy_policy' => null,
        'alt_login_page_side' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'official_url' => false,
        'base_url' => false,
        'docs_url' => false,
        'error_list_url' => false,
        'terms_and_conditions' => false,
        'privacy_policy' => false,
        'alt_login_page_side' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'official_url' => 'officialUrl',
        'base_url' => 'baseUrl',
        'docs_url' => 'docsUrl',
        'error_list_url' => 'errorListUrl',
        'terms_and_conditions' => 'termsAndConditions',
        'privacy_policy' => 'privacyPolicy',
        'alt_login_page_side' => 'altLoginPageSide'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'official_url' => 'setOfficialUrl',
        'base_url' => 'setBaseUrl',
        'docs_url' => 'setDocsUrl',
        'error_list_url' => 'setErrorListUrl',
        'terms_and_conditions' => 'setTermsAndConditions',
        'privacy_policy' => 'setPrivacyPolicy',
        'alt_login_page_side' => 'setAltLoginPageSide'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'official_url' => 'getOfficialUrl',
        'base_url' => 'getBaseUrl',
        'docs_url' => 'getDocsUrl',
        'error_list_url' => 'getErrorListUrl',
        'terms_and_conditions' => 'getTermsAndConditions',
        'privacy_policy' => 'getPrivacyPolicy',
        'alt_login_page_side' => 'getAltLoginPageSide'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('official_url', $data ?? [], null);
        $this->setIfExists('base_url', $data ?? [], null);
        $this->setIfExists('docs_url', $data ?? [], null);
        $this->setIfExists('error_list_url', $data ?? [], null);
        $this->setIfExists('terms_and_conditions', $data ?? [], null);
        $this->setIfExists('privacy_policy', $data ?? [], null);
        $this->setIfExists('alt_login_page_side', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets official_url
     *
     * @return string|null
     */
    public function getOfficialUrl()
    {
        return $this->container['official_url'];
    }

    /**
     * Sets official_url
     *
     * @param string|null $official_url official_url
     *
     * @return self
     */
    public function setOfficialUrl($official_url)
    {
        if (is_null($official_url)) {
            throw new \InvalidArgumentException('non-nullable official_url cannot be null');
        }
        $this->container['official_url'] = $official_url;

        return $this;
    }

    /**
     * Gets base_url
     *
     * @return string|null
     */
    public function getBaseUrl()
    {
        return $this->container['base_url'];
    }

    /**
     * Sets base_url
     *
     * @param string|null $base_url base_url
     *
     * @return self
     */
    public function setBaseUrl($base_url)
    {
        if (is_null($base_url)) {
            throw new \InvalidArgumentException('non-nullable base_url cannot be null');
        }
        $this->container['base_url'] = $base_url;

        return $this;
    }

    /**
     * Gets docs_url
     *
     * @return string|null
     */
    public function getDocsUrl()
    {
        return $this->container['docs_url'];
    }

    /**
     * Sets docs_url
     *
     * @param string|null $docs_url docs_url
     *
     * @return self
     */
    public function setDocsUrl($docs_url)
    {
        if (is_null($docs_url)) {
            throw new \InvalidArgumentException('non-nullable docs_url cannot be null');
        }
        $this->container['docs_url'] = $docs_url;

        return $this;
    }

    /**
     * Gets error_list_url
     *
     * @return string|null
     */
    public function getErrorListUrl()
    {
        return $this->container['error_list_url'];
    }

    /**
     * Sets error_list_url
     *
     * @param string|null $error_list_url error_list_url
     *
     * @return self
     */
    public function setErrorListUrl($error_list_url)
    {
        if (is_null($error_list_url)) {
            throw new \InvalidArgumentException('non-nullable error_list_url cannot be null');
        }
        $this->container['error_list_url'] = $error_list_url;

        return $this;
    }

    /**
     * Gets terms_and_conditions
     *
     * @return string|null
     */
    public function getTermsAndConditions()
    {
        return $this->container['terms_and_conditions'];
    }

    /**
     * Sets terms_and_conditions
     *
     * @param string|null $terms_and_conditions terms_and_conditions
     *
     * @return self
     */
    public function setTermsAndConditions($terms_and_conditions)
    {
        if (is_null($terms_and_conditions)) {
            throw new \InvalidArgumentException('non-nullable terms_and_conditions cannot be null');
        }
        $this->container['terms_and_conditions'] = $terms_and_conditions;

        return $this;
    }

    /**
     * Gets privacy_policy
     *
     * @return string|null
     */
    public function getPrivacyPolicy()
    {
        return $this->container['privacy_policy'];
    }

    /**
     * Sets privacy_policy
     *
     * @param string|null $privacy_policy privacy_policy
     *
     * @return self
     */
    public function setPrivacyPolicy($privacy_policy)
    {
        if (is_null($privacy_policy)) {
            throw new \InvalidArgumentException('non-nullable privacy_policy cannot be null');
        }
        $this->container['privacy_policy'] = $privacy_policy;

        return $this;
    }

    /**
     * Gets alt_login_page_side
     *
     * @return string|null
     */
    public function getAltLoginPageSide()
    {
        return $this->container['alt_login_page_side'];
    }

    /**
     * Sets alt_login_page_side
     *
     * @param string|null $alt_login_page_side alt_login_page_side
     *
     * @return self
     */
    public function setAltLoginPageSide($alt_login_page_side)
    {
        if (is_null($alt_login_page_side)) {
            throw new \InvalidArgumentException('non-nullable alt_login_page_side cannot be null');
        }
        $this->container['alt_login_page_side'] = $alt_login_page_side;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


