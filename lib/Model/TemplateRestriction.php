<?php
/**
 * TemplateRestriction
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocStudio\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DocStudio Api Documentation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R125.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DocStudio\Client\Model;

use \ArrayAccess;
use \DocStudio\Client\ObjectSerializer;

/**
 * TemplateRestriction Class Doc Comment
 *
 * @category Class
 * @description Template Restrictions
 * @package  DocStudio\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TemplateRestriction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TemplateRestriction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'image' => '\DocStudio\Client\Model\ImageRestriction',
        'logo' => '\DocStudio\Client\Model\LogoImageRestriction',
        'table' => '\DocStudio\Client\Model\TemplTableRestriction',
        'patterns' => '\DocStudio\Client\Model\TextFieldPattern[]',
        'expire_after_days' => 'int',
        'notify_in_days' => 'int',
        'max_external_docs_count' => 'int',
        'default_page_size' => 'string',
        'supported_page_sizes' => '\DocStudio\Client\Model\DocumentPageSizeDTO[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'image' => null,
        'logo' => null,
        'table' => null,
        'patterns' => null,
        'expire_after_days' => 'int32',
        'notify_in_days' => 'int32',
        'max_external_docs_count' => 'int32',
        'default_page_size' => null,
        'supported_page_sizes' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'image' => false,
        'logo' => false,
        'table' => false,
        'patterns' => false,
        'expire_after_days' => false,
        'notify_in_days' => false,
        'max_external_docs_count' => false,
        'default_page_size' => false,
        'supported_page_sizes' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'image' => 'image',
        'logo' => 'logo',
        'table' => 'table',
        'patterns' => 'patterns',
        'expire_after_days' => 'expireAfterDays',
        'notify_in_days' => 'notifyInDays',
        'max_external_docs_count' => 'maxExternalDocsCount',
        'default_page_size' => 'defaultPageSize',
        'supported_page_sizes' => 'supportedPageSizes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'image' => 'setImage',
        'logo' => 'setLogo',
        'table' => 'setTable',
        'patterns' => 'setPatterns',
        'expire_after_days' => 'setExpireAfterDays',
        'notify_in_days' => 'setNotifyInDays',
        'max_external_docs_count' => 'setMaxExternalDocsCount',
        'default_page_size' => 'setDefaultPageSize',
        'supported_page_sizes' => 'setSupportedPageSizes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'image' => 'getImage',
        'logo' => 'getLogo',
        'table' => 'getTable',
        'patterns' => 'getPatterns',
        'expire_after_days' => 'getExpireAfterDays',
        'notify_in_days' => 'getNotifyInDays',
        'max_external_docs_count' => 'getMaxExternalDocsCount',
        'default_page_size' => 'getDefaultPageSize',
        'supported_page_sizes' => 'getSupportedPageSizes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DEFAULT_PAGE_SIZE_A2 = 'A2';
    public const DEFAULT_PAGE_SIZE_A3 = 'A3';
    public const DEFAULT_PAGE_SIZE_A4 = 'A4';
    public const DEFAULT_PAGE_SIZE_A5 = 'A5';
    public const DEFAULT_PAGE_SIZE_LETTER = 'letter';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefaultPageSizeAllowableValues()
    {
        return [
            self::DEFAULT_PAGE_SIZE_A2,
            self::DEFAULT_PAGE_SIZE_A3,
            self::DEFAULT_PAGE_SIZE_A4,
            self::DEFAULT_PAGE_SIZE_A5,
            self::DEFAULT_PAGE_SIZE_LETTER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('image', $data ?? [], null);
        $this->setIfExists('logo', $data ?? [], null);
        $this->setIfExists('table', $data ?? [], null);
        $this->setIfExists('patterns', $data ?? [], null);
        $this->setIfExists('expire_after_days', $data ?? [], null);
        $this->setIfExists('notify_in_days', $data ?? [], null);
        $this->setIfExists('max_external_docs_count', $data ?? [], null);
        $this->setIfExists('default_page_size', $data ?? [], null);
        $this->setIfExists('supported_page_sizes', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDefaultPageSizeAllowableValues();
        if (!is_null($this->container['default_page_size']) && !in_array($this->container['default_page_size'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'default_page_size', must be one of '%s'",
                $this->container['default_page_size'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets image
     *
     * @return \DocStudio\Client\Model\ImageRestriction|null
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param \DocStudio\Client\Model\ImageRestriction|null $image image
     *
     * @return self
     */
    public function setImage($image)
    {
        if (is_null($image)) {
            throw new \InvalidArgumentException('non-nullable image cannot be null');
        }
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return \DocStudio\Client\Model\LogoImageRestriction|null
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param \DocStudio\Client\Model\LogoImageRestriction|null $logo logo
     *
     * @return self
     */
    public function setLogo($logo)
    {
        if (is_null($logo)) {
            throw new \InvalidArgumentException('non-nullable logo cannot be null');
        }
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets table
     *
     * @return \DocStudio\Client\Model\TemplTableRestriction|null
     */
    public function getTable()
    {
        return $this->container['table'];
    }

    /**
     * Sets table
     *
     * @param \DocStudio\Client\Model\TemplTableRestriction|null $table table
     *
     * @return self
     */
    public function setTable($table)
    {
        if (is_null($table)) {
            throw new \InvalidArgumentException('non-nullable table cannot be null');
        }
        $this->container['table'] = $table;

        return $this;
    }

    /**
     * Gets patterns
     *
     * @return \DocStudio\Client\Model\TextFieldPattern[]|null
     */
    public function getPatterns()
    {
        return $this->container['patterns'];
    }

    /**
     * Sets patterns
     *
     * @param \DocStudio\Client\Model\TextFieldPattern[]|null $patterns patterns
     *
     * @return self
     */
    public function setPatterns($patterns)
    {
        if (is_null($patterns)) {
            throw new \InvalidArgumentException('non-nullable patterns cannot be null');
        }
        $this->container['patterns'] = $patterns;

        return $this;
    }

    /**
     * Gets expire_after_days
     *
     * @return int|null
     */
    public function getExpireAfterDays()
    {
        return $this->container['expire_after_days'];
    }

    /**
     * Sets expire_after_days
     *
     * @param int|null $expire_after_days expire_after_days
     *
     * @return self
     */
    public function setExpireAfterDays($expire_after_days)
    {
        if (is_null($expire_after_days)) {
            throw new \InvalidArgumentException('non-nullable expire_after_days cannot be null');
        }
        $this->container['expire_after_days'] = $expire_after_days;

        return $this;
    }

    /**
     * Gets notify_in_days
     *
     * @return int|null
     */
    public function getNotifyInDays()
    {
        return $this->container['notify_in_days'];
    }

    /**
     * Sets notify_in_days
     *
     * @param int|null $notify_in_days notify_in_days
     *
     * @return self
     */
    public function setNotifyInDays($notify_in_days)
    {
        if (is_null($notify_in_days)) {
            throw new \InvalidArgumentException('non-nullable notify_in_days cannot be null');
        }
        $this->container['notify_in_days'] = $notify_in_days;

        return $this;
    }

    /**
     * Gets max_external_docs_count
     *
     * @return int|null
     */
    public function getMaxExternalDocsCount()
    {
        return $this->container['max_external_docs_count'];
    }

    /**
     * Sets max_external_docs_count
     *
     * @param int|null $max_external_docs_count max_external_docs_count
     *
     * @return self
     */
    public function setMaxExternalDocsCount($max_external_docs_count)
    {
        if (is_null($max_external_docs_count)) {
            throw new \InvalidArgumentException('non-nullable max_external_docs_count cannot be null');
        }
        $this->container['max_external_docs_count'] = $max_external_docs_count;

        return $this;
    }

    /**
     * Gets default_page_size
     *
     * @return string|null
     */
    public function getDefaultPageSize()
    {
        return $this->container['default_page_size'];
    }

    /**
     * Sets default_page_size
     *
     * @param string|null $default_page_size default_page_size
     *
     * @return self
     */
    public function setDefaultPageSize($default_page_size)
    {
        if (is_null($default_page_size)) {
            throw new \InvalidArgumentException('non-nullable default_page_size cannot be null');
        }
        $allowedValues = $this->getDefaultPageSizeAllowableValues();
        if (!in_array($default_page_size, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'default_page_size', must be one of '%s'",
                    $default_page_size,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['default_page_size'] = $default_page_size;

        return $this;
    }

    /**
     * Gets supported_page_sizes
     *
     * @return \DocStudio\Client\Model\DocumentPageSizeDTO[]|null
     */
    public function getSupportedPageSizes()
    {
        return $this->container['supported_page_sizes'];
    }

    /**
     * Sets supported_page_sizes
     *
     * @param \DocStudio\Client\Model\DocumentPageSizeDTO[]|null $supported_page_sizes supported_page_sizes
     *
     * @return self
     */
    public function setSupportedPageSizes($supported_page_sizes)
    {
        if (is_null($supported_page_sizes)) {
            throw new \InvalidArgumentException('non-nullable supported_page_sizes cannot be null');
        }
        $this->container['supported_page_sizes'] = $supported_page_sizes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


