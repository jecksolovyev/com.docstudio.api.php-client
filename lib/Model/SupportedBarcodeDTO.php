<?php
/**
 * SupportedBarcodeDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocStudio\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DocStudio Api Documentation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R125.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DocStudio\Client\Model;

use \ArrayAccess;
use \DocStudio\Client\ObjectSerializer;

/**
 * SupportedBarcodeDTO Class Doc Comment
 *
 * @category Class
 * @description Supported barcodes
 * @package  DocStudio\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SupportedBarcodeDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SupportedBarcodeDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'default_width' => 'int',
        'default_height' => 'int',
        'link_supported' => 'bool',
        'name' => 'string',
        'static_size' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'default_width' => 'int32',
        'default_height' => 'int32',
        'link_supported' => null,
        'name' => null,
        'static_size' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => false,
        'default_width' => false,
        'default_height' => false,
        'link_supported' => false,
        'name' => false,
        'static_size' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'default_width' => 'defaultWidth',
        'default_height' => 'defaultHeight',
        'link_supported' => 'linkSupported',
        'name' => 'name',
        'static_size' => 'staticSize'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'default_width' => 'setDefaultWidth',
        'default_height' => 'setDefaultHeight',
        'link_supported' => 'setLinkSupported',
        'name' => 'setName',
        'static_size' => 'setStaticSize'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'default_width' => 'getDefaultWidth',
        'default_height' => 'getDefaultHeight',
        'link_supported' => 'getLinkSupported',
        'name' => 'getName',
        'static_size' => 'getStaticSize'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_UPCA = 'upca';
    public const TYPE_UPCE = 'upce';
    public const TYPE_EAN8 = 'ean8';
    public const TYPE_EAN13 = 'ean13';
    public const TYPE_CODE39 = 'code39';
    public const TYPE_CODE128 = 'code128';
    public const TYPE_ITF14 = 'itf14';
    public const TYPE_CODE93 = 'code93';
    public const TYPE_RATIONALIZED_CODABAR = 'rationalizedCodabar';
    public const TYPE_DATABAREXPANDEDSTACKED = 'databarexpandedstacked';
    public const TYPE_QRCODE = 'qrcode';
    public const TYPE_DATAMATRIX = 'datamatrix';
    public const TYPE_PDF417 = 'pdf417';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_UPCA,
            self::TYPE_UPCE,
            self::TYPE_EAN8,
            self::TYPE_EAN13,
            self::TYPE_CODE39,
            self::TYPE_CODE128,
            self::TYPE_ITF14,
            self::TYPE_CODE93,
            self::TYPE_RATIONALIZED_CODABAR,
            self::TYPE_DATABAREXPANDEDSTACKED,
            self::TYPE_QRCODE,
            self::TYPE_DATAMATRIX,
            self::TYPE_PDF417,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('default_width', $data ?? [], null);
        $this->setIfExists('default_height', $data ?? [], null);
        $this->setIfExists('link_supported', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('static_size', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets default_width
     *
     * @return int|null
     */
    public function getDefaultWidth()
    {
        return $this->container['default_width'];
    }

    /**
     * Sets default_width
     *
     * @param int|null $default_width default_width
     *
     * @return self
     */
    public function setDefaultWidth($default_width)
    {
        if (is_null($default_width)) {
            throw new \InvalidArgumentException('non-nullable default_width cannot be null');
        }
        $this->container['default_width'] = $default_width;

        return $this;
    }

    /**
     * Gets default_height
     *
     * @return int|null
     */
    public function getDefaultHeight()
    {
        return $this->container['default_height'];
    }

    /**
     * Sets default_height
     *
     * @param int|null $default_height default_height
     *
     * @return self
     */
    public function setDefaultHeight($default_height)
    {
        if (is_null($default_height)) {
            throw new \InvalidArgumentException('non-nullable default_height cannot be null');
        }
        $this->container['default_height'] = $default_height;

        return $this;
    }

    /**
     * Gets link_supported
     *
     * @return bool|null
     */
    public function getLinkSupported()
    {
        return $this->container['link_supported'];
    }

    /**
     * Sets link_supported
     *
     * @param bool|null $link_supported link_supported
     *
     * @return self
     */
    public function setLinkSupported($link_supported)
    {
        if (is_null($link_supported)) {
            throw new \InvalidArgumentException('non-nullable link_supported cannot be null');
        }
        $this->container['link_supported'] = $link_supported;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets static_size
     *
     * @return bool|null
     */
    public function getStaticSize()
    {
        return $this->container['static_size'];
    }

    /**
     * Sets static_size
     *
     * @param bool|null $static_size static_size
     *
     * @return self
     */
    public function setStaticSize($static_size)
    {
        if (is_null($static_size)) {
            throw new \InvalidArgumentException('non-nullable static_size cannot be null');
        }
        $this->container['static_size'] = $static_size;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


