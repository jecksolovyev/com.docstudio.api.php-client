<?php
/**
 * IntegrationRuleDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocStudio Api Documentation
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R74.25
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * IntegrationRuleDTO Class Doc Comment
 *
 * @category Class
 * @description Integration rule
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IntegrationRuleDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'IntegrationRuleDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'integration_rule_uuid' => 'string',
'mailbox_uuid' => 'string',
'active' => 'bool',
'in' => 'bool',
'name' => 'string',
'template_uuid' => 'string',
'template_name' => 'string',
'version_uuid' => 'string',
'matching_pattern' => 'string',
'matching_pattern_src' => 'string',
'naming_pattern' => 'string',
'rule' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'integration_rule_uuid' => 'uuid',
'mailbox_uuid' => 'uuid',
'active' => null,
'in' => null,
'name' => null,
'template_uuid' => 'uuid',
'template_name' => null,
'version_uuid' => 'uuid',
'matching_pattern' => null,
'matching_pattern_src' => null,
'naming_pattern' => null,
'rule' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'integration_rule_uuid' => 'integrationRuleUuid',
'mailbox_uuid' => 'mailboxUuid',
'active' => 'active',
'in' => 'in',
'name' => 'name',
'template_uuid' => 'templateUuid',
'template_name' => 'templateName',
'version_uuid' => 'versionUuid',
'matching_pattern' => 'matchingPattern',
'matching_pattern_src' => 'matchingPatternSrc',
'naming_pattern' => 'namingPattern',
'rule' => 'rule'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'integration_rule_uuid' => 'setIntegrationRuleUuid',
'mailbox_uuid' => 'setMailboxUuid',
'active' => 'setActive',
'in' => 'setIn',
'name' => 'setName',
'template_uuid' => 'setTemplateUuid',
'template_name' => 'setTemplateName',
'version_uuid' => 'setVersionUuid',
'matching_pattern' => 'setMatchingPattern',
'matching_pattern_src' => 'setMatchingPatternSrc',
'naming_pattern' => 'setNamingPattern',
'rule' => 'setRule'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'integration_rule_uuid' => 'getIntegrationRuleUuid',
'mailbox_uuid' => 'getMailboxUuid',
'active' => 'getActive',
'in' => 'getIn',
'name' => 'getName',
'template_uuid' => 'getTemplateUuid',
'template_name' => 'getTemplateName',
'version_uuid' => 'getVersionUuid',
'matching_pattern' => 'getMatchingPattern',
'matching_pattern_src' => 'getMatchingPatternSrc',
'naming_pattern' => 'getNamingPattern',
'rule' => 'getRule'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MATCHING_PATTERN_SRC_NAME = 'name';
const MATCHING_PATTERN_SRC_CONTENT = 'content';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMatchingPatternSrcAllowableValues()
    {
        return [
            self::MATCHING_PATTERN_SRC_NAME,
self::MATCHING_PATTERN_SRC_CONTENT,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['integration_rule_uuid'] = isset($data['integration_rule_uuid']) ? $data['integration_rule_uuid'] : null;
        $this->container['mailbox_uuid'] = isset($data['mailbox_uuid']) ? $data['mailbox_uuid'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['in'] = isset($data['in']) ? $data['in'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['template_uuid'] = isset($data['template_uuid']) ? $data['template_uuid'] : null;
        $this->container['template_name'] = isset($data['template_name']) ? $data['template_name'] : null;
        $this->container['version_uuid'] = isset($data['version_uuid']) ? $data['version_uuid'] : null;
        $this->container['matching_pattern'] = isset($data['matching_pattern']) ? $data['matching_pattern'] : null;
        $this->container['matching_pattern_src'] = isset($data['matching_pattern_src']) ? $data['matching_pattern_src'] : null;
        $this->container['naming_pattern'] = isset($data['naming_pattern']) ? $data['naming_pattern'] : null;
        $this->container['rule'] = isset($data['rule']) ? $data['rule'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['mailbox_uuid'] === null) {
            $invalidProperties[] = "'mailbox_uuid' can't be null";
        }
        if ($this->container['active'] === null) {
            $invalidProperties[] = "'active' can't be null";
        }
        if ($this->container['in'] === null) {
            $invalidProperties[] = "'in' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['template_uuid'] === null) {
            $invalidProperties[] = "'template_uuid' can't be null";
        }
        if ($this->container['version_uuid'] === null) {
            $invalidProperties[] = "'version_uuid' can't be null";
        }
        $allowedValues = $this->getMatchingPatternSrcAllowableValues();
        if (!is_null($this->container['matching_pattern_src']) && !in_array($this->container['matching_pattern_src'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'matching_pattern_src', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['rule'] === null) {
            $invalidProperties[] = "'rule' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets integration_rule_uuid
     *
     * @return string
     */
    public function getIntegrationRuleUuid()
    {
        return $this->container['integration_rule_uuid'];
    }

    /**
     * Sets integration_rule_uuid
     *
     * @param string $integration_rule_uuid Integration rule uuid
     *
     * @return $this
     */
    public function setIntegrationRuleUuid($integration_rule_uuid)
    {
        $this->container['integration_rule_uuid'] = $integration_rule_uuid;

        return $this;
    }

    /**
     * Gets mailbox_uuid
     *
     * @return string
     */
    public function getMailboxUuid()
    {
        return $this->container['mailbox_uuid'];
    }

    /**
     * Sets mailbox_uuid
     *
     * @param string $mailbox_uuid Mailbox uuid
     *
     * @return $this
     */
    public function setMailboxUuid($mailbox_uuid)
    {
        $this->container['mailbox_uuid'] = $mailbox_uuid;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active Integration rule status
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets in
     *
     * @return bool
     */
    public function getIn()
    {
        return $this->container['in'];
    }

    /**
     * Sets in
     *
     * @param bool $in Integration rule direction, true: in, false: out
     *
     * @return $this
     */
    public function setIn($in)
    {
        $this->container['in'] = $in;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Integration rule name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets template_uuid
     *
     * @return string
     */
    public function getTemplateUuid()
    {
        return $this->container['template_uuid'];
    }

    /**
     * Sets template_uuid
     *
     * @param string $template_uuid Template uuid
     *
     * @return $this
     */
    public function setTemplateUuid($template_uuid)
    {
        $this->container['template_uuid'] = $template_uuid;

        return $this;
    }

    /**
     * Gets template_name
     *
     * @return string
     */
    public function getTemplateName()
    {
        return $this->container['template_name'];
    }

    /**
     * Sets template_name
     *
     * @param string $template_name Template name
     *
     * @return $this
     */
    public function setTemplateName($template_name)
    {
        $this->container['template_name'] = $template_name;

        return $this;
    }

    /**
     * Gets version_uuid
     *
     * @return string
     */
    public function getVersionUuid()
    {
        return $this->container['version_uuid'];
    }

    /**
     * Sets version_uuid
     *
     * @param string $version_uuid Version uuid
     *
     * @return $this
     */
    public function setVersionUuid($version_uuid)
    {
        $this->container['version_uuid'] = $version_uuid;

        return $this;
    }

    /**
     * Gets matching_pattern
     *
     * @return string
     */
    public function getMatchingPattern()
    {
        return $this->container['matching_pattern'];
    }

    /**
     * Sets matching_pattern
     *
     * @param string $matching_pattern File matching pattern
     *
     * @return $this
     */
    public function setMatchingPattern($matching_pattern)
    {
        $this->container['matching_pattern'] = $matching_pattern;

        return $this;
    }

    /**
     * Gets matching_pattern_src
     *
     * @return string
     */
    public function getMatchingPatternSrc()
    {
        return $this->container['matching_pattern_src'];
    }

    /**
     * Sets matching_pattern_src
     *
     * @param string $matching_pattern_src File matching pattern source: name or content
     *
     * @return $this
     */
    public function setMatchingPatternSrc($matching_pattern_src)
    {
        $allowedValues = $this->getMatchingPatternSrcAllowableValues();
        if (!is_null($matching_pattern_src) && !in_array($matching_pattern_src, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'matching_pattern_src', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['matching_pattern_src'] = $matching_pattern_src;

        return $this;
    }

    /**
     * Gets naming_pattern
     *
     * @return string
     */
    public function getNamingPattern()
    {
        return $this->container['naming_pattern'];
    }

    /**
     * Sets naming_pattern
     *
     * @param string $naming_pattern File naming pattern
     *
     * @return $this
     */
    public function setNamingPattern($naming_pattern)
    {
        $this->container['naming_pattern'] = $naming_pattern;

        return $this;
    }

    /**
     * Gets rule
     *
     * @return string
     */
    public function getRule()
    {
        return $this->container['rule'];
    }

    /**
     * Sets rule
     *
     * @param string $rule File naming pattern
     *
     * @return $this
     */
    public function setRule($rule)
    {
        $this->container['rule'] = $rule;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
