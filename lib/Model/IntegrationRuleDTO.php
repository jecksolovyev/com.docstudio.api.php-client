<?php
/**
 * IntegrationRuleDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocStudio\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DocStudio Api Documentation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R110.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DocStudio\Client\Model;

use \ArrayAccess;
use \DocStudio\Client\ObjectSerializer;

/**
 * IntegrationRuleDTO Class Doc Comment
 *
 * @category Class
 * @description Integration rule
 * @package  DocStudio\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class IntegrationRuleDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'IntegrationRuleDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'integration_rule_uuid' => 'string',
        'account_uuid' => 'string',
        'mailbox_uuid' => 'string',
        'active' => 'bool',
        'in' => 'bool',
        'name' => 'string',
        'template_uuid' => 'string',
        'template_name' => 'string',
        'version_uuid' => 'string',
        'matching_pattern' => 'string',
        'matching_pattern_src' => 'string',
        'naming_pattern' => 'string',
        'rule' => 'string',
        'zip_structure_name' => 'string',
        'exclude_zip_files' => 'string',
        'multiple_envelopes' => 'bool',
        'attributes' => 'array<string,string>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'integration_rule_uuid' => 'uuid',
        'account_uuid' => 'uuid',
        'mailbox_uuid' => 'uuid',
        'active' => null,
        'in' => null,
        'name' => null,
        'template_uuid' => 'uuid',
        'template_name' => null,
        'version_uuid' => 'uuid',
        'matching_pattern' => null,
        'matching_pattern_src' => null,
        'naming_pattern' => null,
        'rule' => null,
        'zip_structure_name' => null,
        'exclude_zip_files' => null,
        'multiple_envelopes' => null,
        'attributes' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'integration_rule_uuid' => false,
        'account_uuid' => false,
        'mailbox_uuid' => false,
        'active' => false,
        'in' => false,
        'name' => false,
        'template_uuid' => false,
        'template_name' => false,
        'version_uuid' => false,
        'matching_pattern' => false,
        'matching_pattern_src' => false,
        'naming_pattern' => false,
        'rule' => false,
        'zip_structure_name' => false,
        'exclude_zip_files' => false,
        'multiple_envelopes' => false,
        'attributes' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'integration_rule_uuid' => 'integrationRuleUuid',
        'account_uuid' => 'accountUuid',
        'mailbox_uuid' => 'mailboxUuid',
        'active' => 'active',
        'in' => 'in',
        'name' => 'name',
        'template_uuid' => 'templateUuid',
        'template_name' => 'templateName',
        'version_uuid' => 'versionUuid',
        'matching_pattern' => 'matchingPattern',
        'matching_pattern_src' => 'matchingPatternSrc',
        'naming_pattern' => 'namingPattern',
        'rule' => 'rule',
        'zip_structure_name' => 'zipStructureName',
        'exclude_zip_files' => 'excludeZipFiles',
        'multiple_envelopes' => 'multipleEnvelopes',
        'attributes' => 'attributes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'integration_rule_uuid' => 'setIntegrationRuleUuid',
        'account_uuid' => 'setAccountUuid',
        'mailbox_uuid' => 'setMailboxUuid',
        'active' => 'setActive',
        'in' => 'setIn',
        'name' => 'setName',
        'template_uuid' => 'setTemplateUuid',
        'template_name' => 'setTemplateName',
        'version_uuid' => 'setVersionUuid',
        'matching_pattern' => 'setMatchingPattern',
        'matching_pattern_src' => 'setMatchingPatternSrc',
        'naming_pattern' => 'setNamingPattern',
        'rule' => 'setRule',
        'zip_structure_name' => 'setZipStructureName',
        'exclude_zip_files' => 'setExcludeZipFiles',
        'multiple_envelopes' => 'setMultipleEnvelopes',
        'attributes' => 'setAttributes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'integration_rule_uuid' => 'getIntegrationRuleUuid',
        'account_uuid' => 'getAccountUuid',
        'mailbox_uuid' => 'getMailboxUuid',
        'active' => 'getActive',
        'in' => 'getIn',
        'name' => 'getName',
        'template_uuid' => 'getTemplateUuid',
        'template_name' => 'getTemplateName',
        'version_uuid' => 'getVersionUuid',
        'matching_pattern' => 'getMatchingPattern',
        'matching_pattern_src' => 'getMatchingPatternSrc',
        'naming_pattern' => 'getNamingPattern',
        'rule' => 'getRule',
        'zip_structure_name' => 'getZipStructureName',
        'exclude_zip_files' => 'getExcludeZipFiles',
        'multiple_envelopes' => 'getMultipleEnvelopes',
        'attributes' => 'getAttributes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const MATCHING_PATTERN_SRC_NAME = 'name';
    public const MATCHING_PATTERN_SRC_CONTENT = 'content';
    public const MATCHING_PATTERN_SRC_ATTRIBUTE = 'attribute';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMatchingPatternSrcAllowableValues()
    {
        return [
            self::MATCHING_PATTERN_SRC_NAME,
            self::MATCHING_PATTERN_SRC_CONTENT,
            self::MATCHING_PATTERN_SRC_ATTRIBUTE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('integration_rule_uuid', $data ?? [], null);
        $this->setIfExists('account_uuid', $data ?? [], null);
        $this->setIfExists('mailbox_uuid', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('in', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('template_uuid', $data ?? [], null);
        $this->setIfExists('template_name', $data ?? [], null);
        $this->setIfExists('version_uuid', $data ?? [], null);
        $this->setIfExists('matching_pattern', $data ?? [], null);
        $this->setIfExists('matching_pattern_src', $data ?? [], null);
        $this->setIfExists('naming_pattern', $data ?? [], null);
        $this->setIfExists('rule', $data ?? [], null);
        $this->setIfExists('zip_structure_name', $data ?? [], null);
        $this->setIfExists('exclude_zip_files', $data ?? [], null);
        $this->setIfExists('multiple_envelopes', $data ?? [], null);
        $this->setIfExists('attributes', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account_uuid'] === null) {
            $invalidProperties[] = "'account_uuid' can't be null";
        }
        if ($this->container['active'] === null) {
            $invalidProperties[] = "'active' can't be null";
        }
        if ($this->container['in'] === null) {
            $invalidProperties[] = "'in' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['template_uuid'] === null) {
            $invalidProperties[] = "'template_uuid' can't be null";
        }
        if ($this->container['version_uuid'] === null) {
            $invalidProperties[] = "'version_uuid' can't be null";
        }
        $allowedValues = $this->getMatchingPatternSrcAllowableValues();
        if (!is_null($this->container['matching_pattern_src']) && !in_array($this->container['matching_pattern_src'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'matching_pattern_src', must be one of '%s'",
                $this->container['matching_pattern_src'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets integration_rule_uuid
     *
     * @return string|null
     */
    public function getIntegrationRuleUuid()
    {
        return $this->container['integration_rule_uuid'];
    }

    /**
     * Sets integration_rule_uuid
     *
     * @param string|null $integration_rule_uuid Integration rule uuid
     *
     * @return self
     */
    public function setIntegrationRuleUuid($integration_rule_uuid)
    {
        if (is_null($integration_rule_uuid)) {
            throw new \InvalidArgumentException('non-nullable integration_rule_uuid cannot be null');
        }
        $this->container['integration_rule_uuid'] = $integration_rule_uuid;

        return $this;
    }

    /**
     * Gets account_uuid
     *
     * @return string
     */
    public function getAccountUuid()
    {
        return $this->container['account_uuid'];
    }

    /**
     * Sets account_uuid
     *
     * @param string $account_uuid Account uuid
     *
     * @return self
     */
    public function setAccountUuid($account_uuid)
    {
        if (is_null($account_uuid)) {
            throw new \InvalidArgumentException('non-nullable account_uuid cannot be null');
        }
        $this->container['account_uuid'] = $account_uuid;

        return $this;
    }

    /**
     * Gets mailbox_uuid
     *
     * @return string|null
     */
    public function getMailboxUuid()
    {
        return $this->container['mailbox_uuid'];
    }

    /**
     * Sets mailbox_uuid
     *
     * @param string|null $mailbox_uuid Mailbox uuid
     *
     * @return self
     */
    public function setMailboxUuid($mailbox_uuid)
    {
        if (is_null($mailbox_uuid)) {
            throw new \InvalidArgumentException('non-nullable mailbox_uuid cannot be null');
        }
        $this->container['mailbox_uuid'] = $mailbox_uuid;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active Integration rule status
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets in
     *
     * @return bool
     */
    public function getIn()
    {
        return $this->container['in'];
    }

    /**
     * Sets in
     *
     * @param bool $in Integration rule direction, true: in, false: out
     *
     * @return self
     */
    public function setIn($in)
    {
        if (is_null($in)) {
            throw new \InvalidArgumentException('non-nullable in cannot be null');
        }
        $this->container['in'] = $in;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Integration rule name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling IntegrationRuleDTO., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling IntegrationRuleDTO., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets template_uuid
     *
     * @return string
     */
    public function getTemplateUuid()
    {
        return $this->container['template_uuid'];
    }

    /**
     * Sets template_uuid
     *
     * @param string $template_uuid Template uuid
     *
     * @return self
     */
    public function setTemplateUuid($template_uuid)
    {
        if (is_null($template_uuid)) {
            throw new \InvalidArgumentException('non-nullable template_uuid cannot be null');
        }
        $this->container['template_uuid'] = $template_uuid;

        return $this;
    }

    /**
     * Gets template_name
     *
     * @return string|null
     */
    public function getTemplateName()
    {
        return $this->container['template_name'];
    }

    /**
     * Sets template_name
     *
     * @param string|null $template_name Template name
     *
     * @return self
     */
    public function setTemplateName($template_name)
    {
        if (is_null($template_name)) {
            throw new \InvalidArgumentException('non-nullable template_name cannot be null');
        }
        $this->container['template_name'] = $template_name;

        return $this;
    }

    /**
     * Gets version_uuid
     *
     * @return string
     */
    public function getVersionUuid()
    {
        return $this->container['version_uuid'];
    }

    /**
     * Sets version_uuid
     *
     * @param string $version_uuid Version uuid
     *
     * @return self
     */
    public function setVersionUuid($version_uuid)
    {
        if (is_null($version_uuid)) {
            throw new \InvalidArgumentException('non-nullable version_uuid cannot be null');
        }
        $this->container['version_uuid'] = $version_uuid;

        return $this;
    }

    /**
     * Gets matching_pattern
     *
     * @return string|null
     */
    public function getMatchingPattern()
    {
        return $this->container['matching_pattern'];
    }

    /**
     * Sets matching_pattern
     *
     * @param string|null $matching_pattern File matching pattern
     *
     * @return self
     */
    public function setMatchingPattern($matching_pattern)
    {
        if (is_null($matching_pattern)) {
            throw new \InvalidArgumentException('non-nullable matching_pattern cannot be null');
        }
        $this->container['matching_pattern'] = $matching_pattern;

        return $this;
    }

    /**
     * Gets matching_pattern_src
     *
     * @return string|null
     */
    public function getMatchingPatternSrc()
    {
        return $this->container['matching_pattern_src'];
    }

    /**
     * Sets matching_pattern_src
     *
     * @param string|null $matching_pattern_src File matching pattern source: name or content
     *
     * @return self
     */
    public function setMatchingPatternSrc($matching_pattern_src)
    {
        if (is_null($matching_pattern_src)) {
            throw new \InvalidArgumentException('non-nullable matching_pattern_src cannot be null');
        }
        $allowedValues = $this->getMatchingPatternSrcAllowableValues();
        if (!in_array($matching_pattern_src, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'matching_pattern_src', must be one of '%s'",
                    $matching_pattern_src,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['matching_pattern_src'] = $matching_pattern_src;

        return $this;
    }

    /**
     * Gets naming_pattern
     *
     * @return string|null
     */
    public function getNamingPattern()
    {
        return $this->container['naming_pattern'];
    }

    /**
     * Sets naming_pattern
     *
     * @param string|null $naming_pattern File naming pattern
     *
     * @return self
     */
    public function setNamingPattern($naming_pattern)
    {
        if (is_null($naming_pattern)) {
            throw new \InvalidArgumentException('non-nullable naming_pattern cannot be null');
        }
        $this->container['naming_pattern'] = $naming_pattern;

        return $this;
    }

    /**
     * Gets rule
     *
     * @return string|null
     */
    public function getRule()
    {
        return $this->container['rule'];
    }

    /**
     * Sets rule
     *
     * @param string|null $rule XSLT mapping
     *
     * @return self
     */
    public function setRule($rule)
    {
        if (is_null($rule)) {
            throw new \InvalidArgumentException('non-nullable rule cannot be null');
        }
        $this->container['rule'] = $rule;

        return $this;
    }

    /**
     * Gets zip_structure_name
     *
     * @return string|null
     */
    public function getZipStructureName()
    {
        return $this->container['zip_structure_name'];
    }

    /**
     * Sets zip_structure_name
     *
     * @param string|null $zip_structure_name The name of pre-saved zip structure in the template
     *
     * @return self
     */
    public function setZipStructureName($zip_structure_name)
    {
        if (is_null($zip_structure_name)) {
            throw new \InvalidArgumentException('non-nullable zip_structure_name cannot be null');
        }
        $this->container['zip_structure_name'] = $zip_structure_name;

        return $this;
    }

    /**
     * Gets exclude_zip_files
     *
     * @return string|null
     */
    public function getExcludeZipFiles()
    {
        return $this->container['exclude_zip_files'];
    }

    /**
     * Sets exclude_zip_files
     *
     * @param string|null $exclude_zip_files Mask to exclude some files from ZIP. c - for signature/processing Certificate, p - for Printable version, a - for Audit trail
     *
     * @return self
     */
    public function setExcludeZipFiles($exclude_zip_files)
    {
        if (is_null($exclude_zip_files)) {
            throw new \InvalidArgumentException('non-nullable exclude_zip_files cannot be null');
        }
        $this->container['exclude_zip_files'] = $exclude_zip_files;

        return $this;
    }

    /**
     * Gets multiple_envelopes
     *
     * @return bool|null
     */
    public function getMultipleEnvelopes()
    {
        return $this->container['multiple_envelopes'];
    }

    /**
     * Sets multiple_envelopes
     *
     * @param bool|null $multiple_envelopes Rule using for creating multiple envelopes
     *
     * @return self
     */
    public function setMultipleEnvelopes($multiple_envelopes)
    {
        if (is_null($multiple_envelopes)) {
            throw new \InvalidArgumentException('non-nullable multiple_envelopes cannot be null');
        }
        $this->container['multiple_envelopes'] = $multiple_envelopes;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return array<string,string>|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param array<string,string>|null $attributes Some additional attributes (XPATH can be used as a value)
     *
     * @return self
     */
    public function setAttributes($attributes)
    {
        if (is_null($attributes)) {
            throw new \InvalidArgumentException('non-nullable attributes cannot be null');
        }
        $this->container['attributes'] = $attributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


