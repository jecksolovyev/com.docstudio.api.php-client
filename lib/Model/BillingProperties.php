<?php
/**
 * BillingProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  Docstudio\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocStudio Api Documentation
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R74.25
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Docstudio\Client\Model;

use \ArrayAccess;
use \Docstudio\ClientObjectSerializer;

/**
 * BillingProperties Class Doc Comment
 *
 * @category Class
 * @description Billing properties
 * @package  Docstudio\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BillingProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BillingProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'enabled' => 'bool',
'hide_tariffs' => 'bool',
'payment_providers' => 'string[]',
'allowed_currencies' => 'string[]',
'default_currency' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'enabled' => null,
'hide_tariffs' => null,
'payment_providers' => null,
'allowed_currencies' => null,
'default_currency' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enabled' => 'enabled',
'hide_tariffs' => 'hideTariffs',
'payment_providers' => 'paymentProviders',
'allowed_currencies' => 'allowedCurrencies',
'default_currency' => 'defaultCurrency'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enabled' => 'setEnabled',
'hide_tariffs' => 'setHideTariffs',
'payment_providers' => 'setPaymentProviders',
'allowed_currencies' => 'setAllowedCurrencies',
'default_currency' => 'setDefaultCurrency'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enabled' => 'getEnabled',
'hide_tariffs' => 'getHideTariffs',
'payment_providers' => 'getPaymentProviders',
'allowed_currencies' => 'getAllowedCurrencies',
'default_currency' => 'getDefaultCurrency'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['hide_tariffs'] = isset($data['hide_tariffs']) ? $data['hide_tariffs'] : null;
        $this->container['payment_providers'] = isset($data['payment_providers']) ? $data['payment_providers'] : null;
        $this->container['allowed_currencies'] = isset($data['allowed_currencies']) ? $data['allowed_currencies'] : null;
        $this->container['default_currency'] = isset($data['default_currency']) ? $data['default_currency'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets hide_tariffs
     *
     * @return bool
     */
    public function getHideTariffs()
    {
        return $this->container['hide_tariffs'];
    }

    /**
     * Sets hide_tariffs
     *
     * @param bool $hide_tariffs hide_tariffs
     *
     * @return $this
     */
    public function setHideTariffs($hide_tariffs)
    {
        $this->container['hide_tariffs'] = $hide_tariffs;

        return $this;
    }

    /**
     * Gets payment_providers
     *
     * @return string[]
     */
    public function getPaymentProviders()
    {
        return $this->container['payment_providers'];
    }

    /**
     * Sets payment_providers
     *
     * @param string[] $payment_providers payment_providers
     *
     * @return $this
     */
    public function setPaymentProviders($payment_providers)
    {
        $this->container['payment_providers'] = $payment_providers;

        return $this;
    }

    /**
     * Gets allowed_currencies
     *
     * @return string[]
     */
    public function getAllowedCurrencies()
    {
        return $this->container['allowed_currencies'];
    }

    /**
     * Sets allowed_currencies
     *
     * @param string[] $allowed_currencies allowed_currencies
     *
     * @return $this
     */
    public function setAllowedCurrencies($allowed_currencies)
    {
        $this->container['allowed_currencies'] = $allowed_currencies;

        return $this;
    }

    /**
     * Gets default_currency
     *
     * @return string
     */
    public function getDefaultCurrency()
    {
        return $this->container['default_currency'];
    }

    /**
     * Sets default_currency
     *
     * @param string $default_currency default_currency
     *
     * @return $this
     */
    public function setDefaultCurrency($default_currency)
    {
        $this->container['default_currency'] = $default_currency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
