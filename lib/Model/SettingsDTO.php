<?php
/**
 * SettingsDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocStudio\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DocStudio Api Documentation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: R110.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DocStudio\Client\Model;

use \ArrayAccess;
use \DocStudio\Client\ObjectSerializer;

/**
 * SettingsDTO Class Doc Comment
 *
 * @category Class
 * @package  DocStudio\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SettingsDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SettingsDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'build_version' => 'string',
        'application_name' => 'string',
        'theme' => 'string',
        'hide_unauthorized_functions' => 'bool',
        'pod_name' => 'string',
        'links' => '\DocStudio\Client\Model\AppLinks',
        'locales' => '\DocStudio\Client\Model\AppLocales',
        'test_mode' => 'bool',
        'envelope' => '\DocStudio\Client\Model\EnvelopeRestrictions',
        'template' => '\DocStudio\Client\Model\TemplateRestriction',
        'user' => '\DocStudio\Client\Model\UserProperties',
        'page_scripts' => '\DocStudio\Client\Model\AppPageScripts',
        'chunk_upload' => '\DocStudio\Client\Model\ChunkUploadProps',
        'crypto' => '\DocStudio\Client\Model\CryptoProperties',
        'logos_properties' => '\DocStudio\Client\Model\LogosProperties',
        'email_properties' => '\DocStudio\Client\Model\EmailProperties',
        'billing' => '\DocStudio\Client\Model\BillingProperties',
        'sso' => '\DocStudio\Client\Model\SsoProperties',
        'geolocation' => '\DocStudio\Client\Model\GeolocationProperties',
        'google_maps_api_key' => 'string',
        'pdf' => '\DocStudio\Client\Model\PdfPropertiesDTO',
        'mailbox' => '\DocStudio\Client\Model\MailboxProperties',
        'exchange_protocols' => 'array<string,\DocStudio\Client\Model\ExchangeProps>',
        'info_links' => '\DocStudio\Client\Model\ExternalLinkShortResponseDTO[]',
        'supported_barcodes' => '\DocStudio\Client\Model\SupportedBarcodeDTO[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'build_version' => null,
        'application_name' => null,
        'theme' => null,
        'hide_unauthorized_functions' => null,
        'pod_name' => null,
        'links' => null,
        'locales' => null,
        'test_mode' => null,
        'envelope' => null,
        'template' => null,
        'user' => null,
        'page_scripts' => null,
        'chunk_upload' => null,
        'crypto' => null,
        'logos_properties' => null,
        'email_properties' => null,
        'billing' => null,
        'sso' => null,
        'geolocation' => null,
        'google_maps_api_key' => null,
        'pdf' => null,
        'mailbox' => null,
        'exchange_protocols' => null,
        'info_links' => null,
        'supported_barcodes' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'build_version' => false,
        'application_name' => false,
        'theme' => false,
        'hide_unauthorized_functions' => false,
        'pod_name' => false,
        'links' => false,
        'locales' => false,
        'test_mode' => false,
        'envelope' => false,
        'template' => false,
        'user' => false,
        'page_scripts' => false,
        'chunk_upload' => false,
        'crypto' => false,
        'logos_properties' => false,
        'email_properties' => false,
        'billing' => false,
        'sso' => false,
        'geolocation' => false,
        'google_maps_api_key' => false,
        'pdf' => false,
        'mailbox' => false,
        'exchange_protocols' => false,
        'info_links' => false,
        'supported_barcodes' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'build_version' => 'buildVersion',
        'application_name' => 'applicationName',
        'theme' => 'theme',
        'hide_unauthorized_functions' => 'hideUnauthorizedFunctions',
        'pod_name' => 'podName',
        'links' => 'links',
        'locales' => 'locales',
        'test_mode' => 'testMode',
        'envelope' => 'envelope',
        'template' => 'template',
        'user' => 'user',
        'page_scripts' => 'pageScripts',
        'chunk_upload' => 'chunkUpload',
        'crypto' => 'crypto',
        'logos_properties' => 'logosProperties',
        'email_properties' => 'emailProperties',
        'billing' => 'billing',
        'sso' => 'sso',
        'geolocation' => 'geolocation',
        'google_maps_api_key' => 'googleMapsApiKey',
        'pdf' => 'pdf',
        'mailbox' => 'mailbox',
        'exchange_protocols' => 'exchangeProtocols',
        'info_links' => 'infoLinks',
        'supported_barcodes' => 'supportedBarcodes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'build_version' => 'setBuildVersion',
        'application_name' => 'setApplicationName',
        'theme' => 'setTheme',
        'hide_unauthorized_functions' => 'setHideUnauthorizedFunctions',
        'pod_name' => 'setPodName',
        'links' => 'setLinks',
        'locales' => 'setLocales',
        'test_mode' => 'setTestMode',
        'envelope' => 'setEnvelope',
        'template' => 'setTemplate',
        'user' => 'setUser',
        'page_scripts' => 'setPageScripts',
        'chunk_upload' => 'setChunkUpload',
        'crypto' => 'setCrypto',
        'logos_properties' => 'setLogosProperties',
        'email_properties' => 'setEmailProperties',
        'billing' => 'setBilling',
        'sso' => 'setSso',
        'geolocation' => 'setGeolocation',
        'google_maps_api_key' => 'setGoogleMapsApiKey',
        'pdf' => 'setPdf',
        'mailbox' => 'setMailbox',
        'exchange_protocols' => 'setExchangeProtocols',
        'info_links' => 'setInfoLinks',
        'supported_barcodes' => 'setSupportedBarcodes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'build_version' => 'getBuildVersion',
        'application_name' => 'getApplicationName',
        'theme' => 'getTheme',
        'hide_unauthorized_functions' => 'getHideUnauthorizedFunctions',
        'pod_name' => 'getPodName',
        'links' => 'getLinks',
        'locales' => 'getLocales',
        'test_mode' => 'getTestMode',
        'envelope' => 'getEnvelope',
        'template' => 'getTemplate',
        'user' => 'getUser',
        'page_scripts' => 'getPageScripts',
        'chunk_upload' => 'getChunkUpload',
        'crypto' => 'getCrypto',
        'logos_properties' => 'getLogosProperties',
        'email_properties' => 'getEmailProperties',
        'billing' => 'getBilling',
        'sso' => 'getSso',
        'geolocation' => 'getGeolocation',
        'google_maps_api_key' => 'getGoogleMapsApiKey',
        'pdf' => 'getPdf',
        'mailbox' => 'getMailbox',
        'exchange_protocols' => 'getExchangeProtocols',
        'info_links' => 'getInfoLinks',
        'supported_barcodes' => 'getSupportedBarcodes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('build_version', $data ?? [], null);
        $this->setIfExists('application_name', $data ?? [], null);
        $this->setIfExists('theme', $data ?? [], null);
        $this->setIfExists('hide_unauthorized_functions', $data ?? [], null);
        $this->setIfExists('pod_name', $data ?? [], null);
        $this->setIfExists('links', $data ?? [], null);
        $this->setIfExists('locales', $data ?? [], null);
        $this->setIfExists('test_mode', $data ?? [], null);
        $this->setIfExists('envelope', $data ?? [], null);
        $this->setIfExists('template', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('page_scripts', $data ?? [], null);
        $this->setIfExists('chunk_upload', $data ?? [], null);
        $this->setIfExists('crypto', $data ?? [], null);
        $this->setIfExists('logos_properties', $data ?? [], null);
        $this->setIfExists('email_properties', $data ?? [], null);
        $this->setIfExists('billing', $data ?? [], null);
        $this->setIfExists('sso', $data ?? [], null);
        $this->setIfExists('geolocation', $data ?? [], null);
        $this->setIfExists('google_maps_api_key', $data ?? [], null);
        $this->setIfExists('pdf', $data ?? [], null);
        $this->setIfExists('mailbox', $data ?? [], null);
        $this->setIfExists('exchange_protocols', $data ?? [], null);
        $this->setIfExists('info_links', $data ?? [], null);
        $this->setIfExists('supported_barcodes', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets build_version
     *
     * @return string|null
     */
    public function getBuildVersion()
    {
        return $this->container['build_version'];
    }

    /**
     * Sets build_version
     *
     * @param string|null $build_version The version of the build
     *
     * @return self
     */
    public function setBuildVersion($build_version)
    {
        if (is_null($build_version)) {
            throw new \InvalidArgumentException('non-nullable build_version cannot be null');
        }
        $this->container['build_version'] = $build_version;

        return $this;
    }

    /**
     * Gets application_name
     *
     * @return string|null
     */
    public function getApplicationName()
    {
        return $this->container['application_name'];
    }

    /**
     * Sets application_name
     *
     * @param string|null $application_name The name of the platform
     *
     * @return self
     */
    public function setApplicationName($application_name)
    {
        if (is_null($application_name)) {
            throw new \InvalidArgumentException('non-nullable application_name cannot be null');
        }
        $this->container['application_name'] = $application_name;

        return $this;
    }

    /**
     * Gets theme
     *
     * @return string|null
     */
    public function getTheme()
    {
        return $this->container['theme'];
    }

    /**
     * Sets theme
     *
     * @param string|null $theme The name of the UI theme
     *
     * @return self
     */
    public function setTheme($theme)
    {
        if (is_null($theme)) {
            throw new \InvalidArgumentException('non-nullable theme cannot be null');
        }
        $this->container['theme'] = $theme;

        return $this;
    }

    /**
     * Gets hide_unauthorized_functions
     *
     * @return bool|null
     */
    public function getHideUnauthorizedFunctions()
    {
        return $this->container['hide_unauthorized_functions'];
    }

    /**
     * Sets hide_unauthorized_functions
     *
     * @param bool|null $hide_unauthorized_functions Hide or disable unauthorized functions
     *
     * @return self
     */
    public function setHideUnauthorizedFunctions($hide_unauthorized_functions)
    {
        if (is_null($hide_unauthorized_functions)) {
            throw new \InvalidArgumentException('non-nullable hide_unauthorized_functions cannot be null');
        }
        $this->container['hide_unauthorized_functions'] = $hide_unauthorized_functions;

        return $this;
    }

    /**
     * Gets pod_name
     *
     * @return string|null
     */
    public function getPodName()
    {
        return $this->container['pod_name'];
    }

    /**
     * Sets pod_name
     *
     * @param string|null $pod_name Kubernetes Pod Name
     *
     * @return self
     */
    public function setPodName($pod_name)
    {
        if (is_null($pod_name)) {
            throw new \InvalidArgumentException('non-nullable pod_name cannot be null');
        }
        $this->container['pod_name'] = $pod_name;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \DocStudio\Client\Model\AppLinks|null
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \DocStudio\Client\Model\AppLinks|null $links links
     *
     * @return self
     */
    public function setLinks($links)
    {
        if (is_null($links)) {
            throw new \InvalidArgumentException('non-nullable links cannot be null');
        }
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets locales
     *
     * @return \DocStudio\Client\Model\AppLocales|null
     */
    public function getLocales()
    {
        return $this->container['locales'];
    }

    /**
     * Sets locales
     *
     * @param \DocStudio\Client\Model\AppLocales|null $locales locales
     *
     * @return self
     */
    public function setLocales($locales)
    {
        if (is_null($locales)) {
            throw new \InvalidArgumentException('non-nullable locales cannot be null');
        }
        $this->container['locales'] = $locales;

        return $this;
    }

    /**
     * Gets test_mode
     *
     * @return bool|null
     */
    public function getTestMode()
    {
        return $this->container['test_mode'];
    }

    /**
     * Sets test_mode
     *
     * @param bool|null $test_mode Is Test Mode enabled?
     *
     * @return self
     */
    public function setTestMode($test_mode)
    {
        if (is_null($test_mode)) {
            throw new \InvalidArgumentException('non-nullable test_mode cannot be null');
        }
        $this->container['test_mode'] = $test_mode;

        return $this;
    }

    /**
     * Gets envelope
     *
     * @return \DocStudio\Client\Model\EnvelopeRestrictions|null
     */
    public function getEnvelope()
    {
        return $this->container['envelope'];
    }

    /**
     * Sets envelope
     *
     * @param \DocStudio\Client\Model\EnvelopeRestrictions|null $envelope envelope
     *
     * @return self
     */
    public function setEnvelope($envelope)
    {
        if (is_null($envelope)) {
            throw new \InvalidArgumentException('non-nullable envelope cannot be null');
        }
        $this->container['envelope'] = $envelope;

        return $this;
    }

    /**
     * Gets template
     *
     * @return \DocStudio\Client\Model\TemplateRestriction|null
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param \DocStudio\Client\Model\TemplateRestriction|null $template template
     *
     * @return self
     */
    public function setTemplate($template)
    {
        if (is_null($template)) {
            throw new \InvalidArgumentException('non-nullable template cannot be null');
        }
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \DocStudio\Client\Model\UserProperties|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \DocStudio\Client\Model\UserProperties|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets page_scripts
     *
     * @return \DocStudio\Client\Model\AppPageScripts|null
     */
    public function getPageScripts()
    {
        return $this->container['page_scripts'];
    }

    /**
     * Sets page_scripts
     *
     * @param \DocStudio\Client\Model\AppPageScripts|null $page_scripts page_scripts
     *
     * @return self
     */
    public function setPageScripts($page_scripts)
    {
        if (is_null($page_scripts)) {
            throw new \InvalidArgumentException('non-nullable page_scripts cannot be null');
        }
        $this->container['page_scripts'] = $page_scripts;

        return $this;
    }

    /**
     * Gets chunk_upload
     *
     * @return \DocStudio\Client\Model\ChunkUploadProps|null
     */
    public function getChunkUpload()
    {
        return $this->container['chunk_upload'];
    }

    /**
     * Sets chunk_upload
     *
     * @param \DocStudio\Client\Model\ChunkUploadProps|null $chunk_upload chunk_upload
     *
     * @return self
     */
    public function setChunkUpload($chunk_upload)
    {
        if (is_null($chunk_upload)) {
            throw new \InvalidArgumentException('non-nullable chunk_upload cannot be null');
        }
        $this->container['chunk_upload'] = $chunk_upload;

        return $this;
    }

    /**
     * Gets crypto
     *
     * @return \DocStudio\Client\Model\CryptoProperties|null
     */
    public function getCrypto()
    {
        return $this->container['crypto'];
    }

    /**
     * Sets crypto
     *
     * @param \DocStudio\Client\Model\CryptoProperties|null $crypto crypto
     *
     * @return self
     */
    public function setCrypto($crypto)
    {
        if (is_null($crypto)) {
            throw new \InvalidArgumentException('non-nullable crypto cannot be null');
        }
        $this->container['crypto'] = $crypto;

        return $this;
    }

    /**
     * Gets logos_properties
     *
     * @return \DocStudio\Client\Model\LogosProperties|null
     */
    public function getLogosProperties()
    {
        return $this->container['logos_properties'];
    }

    /**
     * Sets logos_properties
     *
     * @param \DocStudio\Client\Model\LogosProperties|null $logos_properties logos_properties
     *
     * @return self
     */
    public function setLogosProperties($logos_properties)
    {
        if (is_null($logos_properties)) {
            throw new \InvalidArgumentException('non-nullable logos_properties cannot be null');
        }
        $this->container['logos_properties'] = $logos_properties;

        return $this;
    }

    /**
     * Gets email_properties
     *
     * @return \DocStudio\Client\Model\EmailProperties|null
     */
    public function getEmailProperties()
    {
        return $this->container['email_properties'];
    }

    /**
     * Sets email_properties
     *
     * @param \DocStudio\Client\Model\EmailProperties|null $email_properties email_properties
     *
     * @return self
     */
    public function setEmailProperties($email_properties)
    {
        if (is_null($email_properties)) {
            throw new \InvalidArgumentException('non-nullable email_properties cannot be null');
        }
        $this->container['email_properties'] = $email_properties;

        return $this;
    }

    /**
     * Gets billing
     *
     * @return \DocStudio\Client\Model\BillingProperties|null
     */
    public function getBilling()
    {
        return $this->container['billing'];
    }

    /**
     * Sets billing
     *
     * @param \DocStudio\Client\Model\BillingProperties|null $billing billing
     *
     * @return self
     */
    public function setBilling($billing)
    {
        if (is_null($billing)) {
            throw new \InvalidArgumentException('non-nullable billing cannot be null');
        }
        $this->container['billing'] = $billing;

        return $this;
    }

    /**
     * Gets sso
     *
     * @return \DocStudio\Client\Model\SsoProperties|null
     */
    public function getSso()
    {
        return $this->container['sso'];
    }

    /**
     * Sets sso
     *
     * @param \DocStudio\Client\Model\SsoProperties|null $sso sso
     *
     * @return self
     */
    public function setSso($sso)
    {
        if (is_null($sso)) {
            throw new \InvalidArgumentException('non-nullable sso cannot be null');
        }
        $this->container['sso'] = $sso;

        return $this;
    }

    /**
     * Gets geolocation
     *
     * @return \DocStudio\Client\Model\GeolocationProperties|null
     */
    public function getGeolocation()
    {
        return $this->container['geolocation'];
    }

    /**
     * Sets geolocation
     *
     * @param \DocStudio\Client\Model\GeolocationProperties|null $geolocation geolocation
     *
     * @return self
     */
    public function setGeolocation($geolocation)
    {
        if (is_null($geolocation)) {
            throw new \InvalidArgumentException('non-nullable geolocation cannot be null');
        }
        $this->container['geolocation'] = $geolocation;

        return $this;
    }

    /**
     * Gets google_maps_api_key
     *
     * @return string|null
     */
    public function getGoogleMapsApiKey()
    {
        return $this->container['google_maps_api_key'];
    }

    /**
     * Sets google_maps_api_key
     *
     * @param string|null $google_maps_api_key Google maps api key
     *
     * @return self
     */
    public function setGoogleMapsApiKey($google_maps_api_key)
    {
        if (is_null($google_maps_api_key)) {
            throw new \InvalidArgumentException('non-nullable google_maps_api_key cannot be null');
        }
        $this->container['google_maps_api_key'] = $google_maps_api_key;

        return $this;
    }

    /**
     * Gets pdf
     *
     * @return \DocStudio\Client\Model\PdfPropertiesDTO|null
     */
    public function getPdf()
    {
        return $this->container['pdf'];
    }

    /**
     * Sets pdf
     *
     * @param \DocStudio\Client\Model\PdfPropertiesDTO|null $pdf pdf
     *
     * @return self
     */
    public function setPdf($pdf)
    {
        if (is_null($pdf)) {
            throw new \InvalidArgumentException('non-nullable pdf cannot be null');
        }
        $this->container['pdf'] = $pdf;

        return $this;
    }

    /**
     * Gets mailbox
     *
     * @return \DocStudio\Client\Model\MailboxProperties|null
     */
    public function getMailbox()
    {
        return $this->container['mailbox'];
    }

    /**
     * Sets mailbox
     *
     * @param \DocStudio\Client\Model\MailboxProperties|null $mailbox mailbox
     *
     * @return self
     */
    public function setMailbox($mailbox)
    {
        if (is_null($mailbox)) {
            throw new \InvalidArgumentException('non-nullable mailbox cannot be null');
        }
        $this->container['mailbox'] = $mailbox;

        return $this;
    }

    /**
     * Gets exchange_protocols
     *
     * @return array<string,\DocStudio\Client\Model\ExchangeProps>|null
     */
    public function getExchangeProtocols()
    {
        return $this->container['exchange_protocols'];
    }

    /**
     * Sets exchange_protocols
     *
     * @param array<string,\DocStudio\Client\Model\ExchangeProps>|null $exchange_protocols Available exchange protocols
     *
     * @return self
     */
    public function setExchangeProtocols($exchange_protocols)
    {
        if (is_null($exchange_protocols)) {
            throw new \InvalidArgumentException('non-nullable exchange_protocols cannot be null');
        }
        $this->container['exchange_protocols'] = $exchange_protocols;

        return $this;
    }

    /**
     * Gets info_links
     *
     * @return \DocStudio\Client\Model\ExternalLinkShortResponseDTO[]|null
     */
    public function getInfoLinks()
    {
        return $this->container['info_links'];
    }

    /**
     * Sets info_links
     *
     * @param \DocStudio\Client\Model\ExternalLinkShortResponseDTO[]|null $info_links Info menu links
     *
     * @return self
     */
    public function setInfoLinks($info_links)
    {
        if (is_null($info_links)) {
            throw new \InvalidArgumentException('non-nullable info_links cannot be null');
        }
        $this->container['info_links'] = $info_links;

        return $this;
    }

    /**
     * Gets supported_barcodes
     *
     * @return \DocStudio\Client\Model\SupportedBarcodeDTO[]|null
     */
    public function getSupportedBarcodes()
    {
        return $this->container['supported_barcodes'];
    }

    /**
     * Sets supported_barcodes
     *
     * @param \DocStudio\Client\Model\SupportedBarcodeDTO[]|null $supported_barcodes Supported barcodes
     *
     * @return self
     */
    public function setSupportedBarcodes($supported_barcodes)
    {
        if (is_null($supported_barcodes)) {
            throw new \InvalidArgumentException('non-nullable supported_barcodes cannot be null');
        }
        $this->container['supported_barcodes'] = $supported_barcodes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


