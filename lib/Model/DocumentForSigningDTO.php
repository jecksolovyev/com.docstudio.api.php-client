<?php
/**
 * DocumentForSigningDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocStudio Api Documentation
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: R74.25
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Docstudio\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DocumentForSigningDTO Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DocumentForSigningDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DocumentForSigningDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'document_id' => 'string',
'xml_name' => 'string',
'xml' => 'string',
'xml_hash' => 'string',
'binary_file_name' => 'string',
'binary_file' => 'string',
'binary_hash' => 'string',
'signatures' => '\Swagger\Client\Model\RequiredSignatureDTO[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'document_id' => null,
'xml_name' => null,
'xml' => null,
'xml_hash' => null,
'binary_file_name' => null,
'binary_file' => null,
'binary_hash' => null,
'signatures' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'document_id' => 'documentId',
'xml_name' => 'xmlName',
'xml' => 'xml',
'xml_hash' => 'xmlHash',
'binary_file_name' => 'binaryFileName',
'binary_file' => 'binaryFile',
'binary_hash' => 'binaryHash',
'signatures' => 'signatures'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'document_id' => 'setDocumentId',
'xml_name' => 'setXmlName',
'xml' => 'setXml',
'xml_hash' => 'setXmlHash',
'binary_file_name' => 'setBinaryFileName',
'binary_file' => 'setBinaryFile',
'binary_hash' => 'setBinaryHash',
'signatures' => 'setSignatures'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'document_id' => 'getDocumentId',
'xml_name' => 'getXmlName',
'xml' => 'getXml',
'xml_hash' => 'getXmlHash',
'binary_file_name' => 'getBinaryFileName',
'binary_file' => 'getBinaryFile',
'binary_hash' => 'getBinaryHash',
'signatures' => 'getSignatures'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['document_id'] = isset($data['document_id']) ? $data['document_id'] : null;
        $this->container['xml_name'] = isset($data['xml_name']) ? $data['xml_name'] : null;
        $this->container['xml'] = isset($data['xml']) ? $data['xml'] : null;
        $this->container['xml_hash'] = isset($data['xml_hash']) ? $data['xml_hash'] : null;
        $this->container['binary_file_name'] = isset($data['binary_file_name']) ? $data['binary_file_name'] : null;
        $this->container['binary_file'] = isset($data['binary_file']) ? $data['binary_file'] : null;
        $this->container['binary_hash'] = isset($data['binary_hash']) ? $data['binary_hash'] : null;
        $this->container['signatures'] = isset($data['signatures']) ? $data['signatures'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets document_id
     *
     * @return string
     */
    public function getDocumentId()
    {
        return $this->container['document_id'];
    }

    /**
     * Sets document_id
     *
     * @param string $document_id ID of document
     *
     * @return $this
     */
    public function setDocumentId($document_id)
    {
        $this->container['document_id'] = $document_id;

        return $this;
    }

    /**
     * Gets xml_name
     *
     * @return string
     */
    public function getXmlName()
    {
        return $this->container['xml_name'];
    }

    /**
     * Sets xml_name
     *
     * @param string $xml_name XML file name
     *
     * @return $this
     */
    public function setXmlName($xml_name)
    {
        $this->container['xml_name'] = $xml_name;

        return $this;
    }

    /**
     * Gets xml
     *
     * @return string
     */
    public function getXml()
    {
        return $this->container['xml'];
    }

    /**
     * Sets xml
     *
     * @param string $xml XML for signing
     *
     * @return $this
     */
    public function setXml($xml)
    {
        $this->container['xml'] = $xml;

        return $this;
    }

    /**
     * Gets xml_hash
     *
     * @return string
     */
    public function getXmlHash()
    {
        return $this->container['xml_hash'];
    }

    /**
     * Sets xml_hash
     *
     * @param string $xml_hash XML hash for signing
     *
     * @return $this
     */
    public function setXmlHash($xml_hash)
    {
        $this->container['xml_hash'] = $xml_hash;

        return $this;
    }

    /**
     * Gets binary_file_name
     *
     * @return string
     */
    public function getBinaryFileName()
    {
        return $this->container['binary_file_name'];
    }

    /**
     * Sets binary_file_name
     *
     * @param string $binary_file_name Binary file name
     *
     * @return $this
     */
    public function setBinaryFileName($binary_file_name)
    {
        $this->container['binary_file_name'] = $binary_file_name;

        return $this;
    }

    /**
     * Gets binary_file
     *
     * @return string
     */
    public function getBinaryFile()
    {
        return $this->container['binary_file'];
    }

    /**
     * Sets binary_file
     *
     * @param string $binary_file Binary file for signing
     *
     * @return $this
     */
    public function setBinaryFile($binary_file)
    {
        $this->container['binary_file'] = $binary_file;

        return $this;
    }

    /**
     * Gets binary_hash
     *
     * @return string
     */
    public function getBinaryHash()
    {
        return $this->container['binary_hash'];
    }

    /**
     * Sets binary_hash
     *
     * @param string $binary_hash Binary file hash for signing
     *
     * @return $this
     */
    public function setBinaryHash($binary_hash)
    {
        $this->container['binary_hash'] = $binary_hash;

        return $this;
    }

    /**
     * Gets signatures
     *
     * @return \Swagger\Client\Model\RequiredSignatureDTO[]
     */
    public function getSignatures()
    {
        return $this->container['signatures'];
    }

    /**
     * Sets signatures
     *
     * @param \Swagger\Client\Model\RequiredSignatureDTO[] $signatures Signatures
     *
     * @return $this
     */
    public function setSignatures($signatures)
    {
        $this->container['signatures'] = $signatures;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
